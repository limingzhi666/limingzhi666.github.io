{"name":"JUC","slug":"JUC","count":7,"postlist":[{"title":"CAS","uid":"779600de7239585350eddc687c9afdbb","slug":"CAS","date":"2022-06-11T13:20:41.435Z","updated":"2022-06-11T13:21:17.762Z","comments":true,"path":"api/articles/CAS.json","keywords":null,"cover":null,"text":"CAS与volatileCAS — compareAndSet()，内部实现了原子性（） public void withdraw(Integer amount) &#123; // 需要不断尝试，直到成功为止 while (true) &#123; // 比如拿到了旧值 100...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"ReentrantLock原理","uid":"de5cee1035d10664a305cb1a74a3c58a","slug":"ReentrantLock","date":"2022-06-11T13:07:20.302Z","updated":"2022-06-11T13:21:17.762Z","comments":true,"path":"api/articles/ReentrantLock.json","keywords":null,"cover":[],"text":" ReentrantLock原理： 1.非公平锁的实现原理： 加锁解锁流程：先从构造器来看，默认为非公平锁实现 public ReentrantLock() &#123; sync = new NonfairSync(); &#125; NonfairSync 继承自 AQS 没...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"java内存模型(JMM)","uid":"8719a59ea15091ad0c2facf954842244","slug":"java内存模型(JMM)","date":"2022-06-11T13:15:23.102Z","updated":"2022-06-11T13:21:17.770Z","comments":true,"path":"api/articles/java内存模型(JMM).json","keywords":null,"cover":[],"text":"java内存模型(JMM)java内存模型：JMM即java Memory Model，它定义了内存、工作内存抽象概念、底层对CPU寄存器、缓存、硬件内存、CPU指令优化等 JMM体现在以下几个方面：​ 1.原子性：保证指令不会受到线程上下文切换的影响 ​ 2.可见性：保证指令不...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"java线程","uid":"dffb2abec4fa02f1174c155cbd8d7f1a","slug":"java线程","date":"2022-06-11T12:49:10.748Z","updated":"2022-06-11T12:49:42.674Z","comments":true,"path":"api/articles/java线程.json","keywords":null,"cover":[],"text":"java线程 创建和启动线程1.new Thread：public static void test1() &#123; Thread t = new Thread() &#123; //执行的方法 @Override public void run() &#123; log.d...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"wait/notify，join，park/Unpark","uid":"489d7b6b150f5087fe22abf19dc56ce1","slug":"waitnotify，join，parkUnpark","date":"2022-06-11T13:10:26.016Z","updated":"2022-06-11T13:11:09.285Z","comments":true,"path":"api/articles/waitnotify，join，parkUnpark.json","keywords":null,"cover":[],"text":"wait&#x2F;notify，join，park&#x2F;Unparkwait&#x2F;notify的原理： 1.Owner发现线程条件不满足，调用wait方法，即可进入WaitSet变为WAITING状态 2.BLOCKED和WAITING的线程都处于阻塞状态，不占用C...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"synchronized关键字","uid":"e1b3118af0455ea0158a80d4d6b7a3a6","slug":"synchronized关键字","date":"2022-06-11T12:58:01.936Z","updated":"2022-06-11T12:58:35.833Z","comments":true,"path":"api/articles/synchronized关键字.json","keywords":null,"cover":[],"text":" synchronized 解决方案 互斥为了避免临界区的竞态条件发生，有多种手段可以达到目的。 阻塞式的解决方案：synchronized，Lock 非阻塞式的解决方案：原子变量 synchronized，来解决上述问题，即俗称的【对象锁】，它采用互斥的方式让同一时刻至多只有一...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"进程线程并行并发","uid":"6ce63568dd0197dd5234fafddc6d369d","slug":"进程线程并行并发","date":"2022-06-11T12:36:30.645Z","updated":"2022-06-11T12:49:42.674Z","comments":true,"path":"api/articles/进程线程并行并发.json","keywords":null,"cover":null,"text":" 进程和线程： 进程：资源分配的最小单位程序由指令和数据组成，但这些指令需要运行，数据要读写，就必须将指令加载到CPU，数据加载至内存。在指令运行过程种还须需要用到磁盘，网络等设备。进程就是用来加载指令，管理内存，管理IO的 当一个程序被运行，从磁盘加载这个程序的代码到内存种，这...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}