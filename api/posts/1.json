{"total":28,"pageSize":12,"pageCount":3,"data":[{"title":"SpringBoot源码分析","uid":"a26dba1745837d214d39192aa8ca3207","slug":"SpringBoot源码分析","date":"2022-06-11T09:02:18.830Z","updated":"2022-07-09T07:50:22.819Z","comments":true,"path":"api/articles/SpringBoot源码分析.json","cover":[],"text":"1 如何搭建SpringBoot源码调试环境1 前言这是 SpringBoot2.1 源码分析专题的第一篇文章，主要讲如何来搭建我们的源码阅读调试环境。如果有经验的小伙伴们可以略过此篇文章。 2 环境安装要求 IntelliJ IDEA JDK1.8 Maven3.5 以上 3 ...","link":"","photos":[],"count_time":{"symbolsCount":"161k","symbolsTime":"2:26"},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"},{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/tags/SpringBoot.json"},{"name":"源码分析","slug":"源码分析","count":1,"path":"api/tags/源码分析.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Netty源码分析","uid":"f63fd983001a548ddde94851f2bab33a","slug":"Netty源码分析","date":"2022-06-11T08:38:37.855Z","updated":"2022-06-11T08:39:39.149Z","comments":true,"path":"api/articles/Netty源码分析.json","cover":[],"text":"本文将介绍 Netty，Java 平台上使用最广泛的 NIO 包，它是对 JDK 中的 NIO 实现的一层封装，让我们能更方便地开发 NIO 程序。其实，Netty 不仅仅是 NIO 吧，但是，基本上大家都冲着 NIO 来的。 本文只介绍 TCP 相关的内容，Netty 对于其他...","link":"","photos":[],"count_time":{"symbolsCount":"66k","symbolsTime":"1:01"},"categories":[{"name":"源码","slug":"源码","count":2,"path":"api/categories/源码.json"}],"tags":[{"name":"java","slug":"java","count":11,"path":"api/tags/java.json"},{"name":"源码","slug":"源码","count":2,"path":"api/tags/源码.json"},{"name":"Netty","slug":"Netty","count":1,"path":"api/tags/Netty.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"SpringSecurity","uid":"fceed54d2b78e915f81cbddb878dcc7f","slug":"SpringSecurity","date":"2022-06-09T08:30:49.418Z","updated":"2022-06-11T08:30:07.290Z","comments":true,"path":"api/articles/SpringSecurity.json","cover":[],"text":" 0. 简介Spring Security 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架Shiro，它提供了更丰富的功能，社区资源也比Shiro丰富。 一般来说中大型的项目都是使用SpringSecurity 来做安全框架。小项目有Shiro的比较多，因为相...","link":"","photos":[],"count_time":{"symbolsCount":"53k","symbolsTime":"48 mins."},"categories":[{"name":"SpringSecurity","slug":"SpringSecurity","count":1,"path":"api/categories/SpringSecurity.json"}],"tags":[{"name":"java","slug":"java","count":11,"path":"api/tags/java.json"},{"name":"SpringSecurity","slug":"SpringSecurity","count":1,"path":"api/tags/SpringSecurity.json"},{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Kafka","uid":"e1579ed1c931165c644c9ec68da7a87a","slug":"kafka","date":"2022-07-13T08:31:01.630Z","updated":"2022-07-13T08:43:19.422Z","comments":true,"path":"api/articles/kafka.json","cover":[],"text":"一、为什么使用消息队列1.使用同步的通信方式来解决多个服务之间的通信同步的通信方式会存在性能和稳定性的问题。 2.使用异步的通信方式 针对于同步的通信方式来说，异步的方式，可以让上游快速成功，极大提高了系统的吞吐量。而且在分布式系统中，通过下游多个服务的分布式事务的保障，也能保障...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[{"name":"Kafka","slug":"Kafka","count":1,"path":"api/categories/Kafka.json"}],"tags":[{"name":"Kafka","slug":"Kafka","count":1,"path":"api/tags/Kafka.json"},{"name":"消息中间件","slug":"消息中间件","count":1,"path":"api/tags/消息中间件.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Stream流","uid":"090d1240eb81aec2da7fdd1a11b68406","slug":"Java8 Stream详解","date":"2022-07-09T07:49:18.688Z","updated":"2022-07-09T07:50:22.787Z","comments":true,"path":"api/articles/Java8 Stream详解.json","cover":null,"text":"JDK8 Stream概念 Stream是Java8 API的新成员，它允许以声明性方式处理数据集合 。 特点 （1）代码简洁：函数式编程写出的代码简洁且意图明确，使用stream接口让你从此告别for循环。 （2）多核友好：Java函数式编程使得编写并行程序从未如此简单，你需要...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"java","slug":"java","count":1,"path":"api/categories/java.json"}],"tags":[{"name":"java","slug":"java","count":11,"path":"api/tags/java.json"},{"name":"Stream","slug":"Stream","count":1,"path":"api/tags/Stream.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"MybatisPlus","uid":"3244bafd4b77bc1eda4a2f2a047e0e05","slug":"MybatisPlus","date":"2022-06-19T12:43:38.059Z","updated":"2022-06-19T12:44:26.668Z","comments":true,"path":"api/articles/MybatisPlus.json","cover":[],"text":"一、MyBatis-Plus1.简介MyBatis-Plus (opens new window)（简称 MP）是一个 MyBatis (opens new window)的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。 我们的愿景是成为 My...","link":"","photos":[],"count_time":{"symbolsCount":"37k","symbolsTime":"34 mins."},"categories":[{"name":"mybatisPlus","slug":"mybatisPlus","count":1,"path":"api/categories/mybatisPlus.json"}],"tags":[{"name":"mybatisPlus","slug":"mybatisPlus","count":1,"path":"api/tags/mybatisPlus.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"凸包算法-Andrew算法","uid":"dffa3dc092427bd4c66bed12d5783ad5","slug":"凸包算法-- Andrew 算法","date":"2022-06-11T13:28:51.911Z","updated":"2022-06-11T13:29:56.770Z","comments":true,"path":"api/articles/凸包算法-- Andrew 算法.json","cover":[],"text":" class Solution &#123; public int[][] outerTrees(int[][] trees) &#123; int n = trees.length; if (n &lt; 4) &#123; return trees; &#125; /* 按照...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"字典树(前缀树)","uid":"781fb484634f3be0f1bf39d2ec5d0535","slug":"字典树","date":"2022-06-11T13:28:51.903Z","updated":"2022-06-11T13:32:00.060Z","comments":true,"path":"api/articles/字典树.json","cover":[],"text":"1 class Solution &#123; public int findKthNumber(int n, int k) &#123; int ans = 1; while(k>1)&#123; int count = dfs(ans,n); //求出子树的数量和K比较，若大...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"约瑟夫环","uid":"d1408add887a68e7d3f5038df24f24f8","slug":"约瑟夫问题","date":"2022-06-11T13:28:51.903Z","updated":"2022-06-11T13:32:00.060Z","comments":true,"path":"api/articles/约瑟夫问题.json","cover":[],"text":"约瑟夫环——公式法（递推公式） ","link":"","photos":[],"count_time":{"symbolsCount":16,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"线段树","uid":"a448dfd8ebb4408d1633f0dff8411f1c","slug":"线段树","date":"2022-06-11T13:28:51.895Z","updated":"2022-06-11T13:29:56.762Z","comments":true,"path":"api/articles/线段树.json","cover":[],"text":"leetcode class NumArray &#123; class TreeNode&#123; int sum; int start,end; TreeNode left,right; public TreeNode(int s,int e)&#123; left = n...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"实现LRU","uid":"c4317418140da87757f2c4ade40f3f4c","slug":"LRU缓存","date":"2022-06-11T13:26:26.264Z","updated":"2022-06-11T13:29:56.770Z","comments":true,"path":"api/articles/LRU缓存.json","cover":[],"text":"实际上底层维护双向链表和哈希表，将新查询的数据或插入的数据移动到链表头，若再插入数据时容量不足则从链表尾部删除 class LRUCache &#123; Map&lt;Integer, Node> map; DoubleLinkedList cache; int capacit...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"背包dp","uid":"fb29227b1d7a6ce56d78eec37318e1c8","slug":"背包dp","date":"2022-06-11T13:26:26.264Z","updated":"2022-06-11T13:32:00.068Z","comments":true,"path":"api/articles/背包dp.json","cover":[],"text":"1 class Solution &#123; public boolean canPartition(int[] nums) &#123; int len = nums.length; int sum = 0; for (int num : nums) &#123; sum +...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}