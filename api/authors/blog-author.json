{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}},"post_list":[{"title":"SpringBoot源码分析","uid":"a26dba1745837d214d39192aa8ca3207","slug":"SpringBoot源码分析","date":"2022-06-11T09:02:18.830Z","updated":"2022-06-11T09:10:56.725Z","comments":true,"path":"api/articles/SpringBoot源码分析.json","keywords":null,"cover":[],"text":"1 如何搭建SpringBoot源码调试环境1 前言这是 SpringBoot2.1 源码分析专题的第一篇文章，主要讲如何来搭建我们的源码阅读调试环境。如果有经验的小伙伴们可以略过此篇文章。 2 环境安装要求 IntelliJ IDEA JDK1.8 Maven3.5 以上 3 ...","link":"","photos":[],"count_time":{"symbolsCount":"161k","symbolsTime":"2:26"},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"},{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/tags/SpringBoot.json"},{"name":"源码分析","slug":"源码分析","count":1,"path":"api/tags/源码分析.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"Netty源码分析","uid":"f63fd983001a548ddde94851f2bab33a","slug":"Netty源码分析","date":"2022-06-11T08:38:37.855Z","updated":"2022-06-11T08:39:39.149Z","comments":true,"path":"api/articles/Netty源码分析.json","keywords":null,"cover":[],"text":"本文将介绍 Netty，Java 平台上使用最广泛的 NIO 包，它是对 JDK 中的 NIO 实现的一层封装，让我们能更方便地开发 NIO 程序。其实，Netty 不仅仅是 NIO 吧，但是，基本上大家都冲着 NIO 来的。 本文只介绍 TCP 相关的内容，Netty 对于其他...","link":"","photos":[],"count_time":{"symbolsCount":"66k","symbolsTime":"1:01"},"categories":[{"name":"源码","slug":"源码","count":2,"path":"api/categories/源码.json"}],"tags":[{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"Netty","slug":"Netty","count":1,"path":"api/tags/Netty.json"},{"name":"源码","slug":"源码","count":2,"path":"api/tags/源码.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"SpringSecurity","uid":"fceed54d2b78e915f81cbddb878dcc7f","slug":"SpringSecurity","date":"2022-06-09T08:30:49.418Z","updated":"2022-06-11T08:30:07.290Z","comments":true,"path":"api/articles/SpringSecurity.json","keywords":null,"cover":[],"text":" 0. 简介Spring Security 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架Shiro，它提供了更丰富的功能，社区资源也比Shiro丰富。 一般来说中大型的项目都是使用SpringSecurity 来做安全框架。小项目有Shiro的比较多，因为相...","link":"","photos":[],"count_time":{"symbolsCount":"53k","symbolsTime":"48 mins."},"categories":[{"name":"SpringSecurity","slug":"SpringSecurity","count":1,"path":"api/categories/SpringSecurity.json"}],"tags":[{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"SpringSecurity","slug":"SpringSecurity","count":1,"path":"api/tags/SpringSecurity.json"},{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"凸包算法-Andrew算法","uid":"dffa3dc092427bd4c66bed12d5783ad5","slug":"凸包算法-- Andrew 算法","date":"2022-06-11T13:28:51.911Z","updated":"2022-06-11T13:29:56.770Z","comments":true,"path":"api/articles/凸包算法-- Andrew 算法.json","keywords":null,"cover":[],"text":" class Solution &#123; public int[][] outerTrees(int[][] trees) &#123; int n = trees.length; if (n &lt; 4) &#123; return trees; &#125; /* 按照...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"字典树(前缀树)","uid":"781fb484634f3be0f1bf39d2ec5d0535","slug":"字典树","date":"2022-06-11T13:28:51.903Z","updated":"2022-06-11T13:32:00.060Z","comments":true,"path":"api/articles/字典树.json","keywords":null,"cover":[],"text":"1 class Solution &#123; public int findKthNumber(int n, int k) &#123; int ans = 1; while(k>1)&#123; int count = dfs(ans,n); //求出子树的数量和K比较，若大...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"约瑟夫环","uid":"d1408add887a68e7d3f5038df24f24f8","slug":"约瑟夫问题","date":"2022-06-11T13:28:51.903Z","updated":"2022-06-11T13:32:00.060Z","comments":true,"path":"api/articles/约瑟夫问题.json","keywords":null,"cover":[],"text":"约瑟夫环——公式法（递推公式） ","link":"","photos":[],"count_time":{"symbolsCount":16,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"线段树","uid":"a448dfd8ebb4408d1633f0dff8411f1c","slug":"线段树","date":"2022-06-11T13:28:51.895Z","updated":"2022-06-11T13:29:56.762Z","comments":true,"path":"api/articles/线段树.json","keywords":null,"cover":[],"text":"leetcode class NumArray &#123; class TreeNode&#123; int sum; int start,end; TreeNode left,right; public TreeNode(int s,int e)&#123; left = n...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"实现LRU","uid":"c4317418140da87757f2c4ade40f3f4c","slug":"LRU缓存","date":"2022-06-11T13:26:26.264Z","updated":"2022-06-11T13:29:56.770Z","comments":true,"path":"api/articles/LRU缓存.json","keywords":null,"cover":[],"text":"实际上底层维护双向链表和哈希表，将新查询的数据或插入的数据移动到链表头，若再插入数据时容量不足则从链表尾部删除 class LRUCache &#123; Map&lt;Integer, Node> map; DoubleLinkedList cache; int capacit...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"背包dp","uid":"fb29227b1d7a6ce56d78eec37318e1c8","slug":"背包dp","date":"2022-06-11T13:26:26.264Z","updated":"2022-06-11T13:32:00.068Z","comments":true,"path":"api/articles/背包dp.json","keywords":null,"cover":[],"text":"1 class Solution &#123; public boolean canPartition(int[] nums) &#123; int len = nums.length; int sum = 0; for (int num : nums) &#123; sum +...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"290场周赛","uid":"546eab39c80ef1d176f6354aacd8516e","slug":"290场周赛","date":"2022-06-11T13:26:26.256Z","updated":"2022-06-11T13:29:56.762Z","comments":true,"path":"api/articles/290场周赛.json","keywords":null,"cover":[],"text":" 1.6041. 多个数组求交集 class Solution &#123; public List&lt;Integer> intersection(int[][] nums) &#123; List&lt;Integer> list = new ArrayList&lt;>(...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"},{"name":"周赛","slug":"周赛","count":1,"path":"api/tags/周赛.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"并查集","uid":"c18469ab20e7b093d36b4a61728d07eb","slug":"并查集","date":"2022-06-11T13:26:26.256Z","updated":"2022-06-11T13:28:31.701Z","comments":true,"path":"api/articles/并查集.json","keywords":null,"cover":[],"text":" class Solution &#123; public double[] calcEquation(List&lt;List&lt;String>> equations, double[] values, List&lt;List&lt;String>> queries) &...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"CAS","uid":"779600de7239585350eddc687c9afdbb","slug":"CAS","date":"2022-06-11T13:20:41.435Z","updated":"2022-06-11T13:21:17.762Z","comments":true,"path":"api/articles/CAS.json","keywords":null,"cover":null,"text":"CAS与volatileCAS — compareAndSet()，内部实现了原子性（） public void withdraw(Integer amount) &#123; // 需要不断尝试，直到成功为止 while (true) &#123; // 比如拿到了旧值 100...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"java内存模型(JMM)","uid":"8719a59ea15091ad0c2facf954842244","slug":"java内存模型(JMM)","date":"2022-06-11T13:15:23.102Z","updated":"2022-06-11T13:21:17.770Z","comments":true,"path":"api/articles/java内存模型(JMM).json","keywords":null,"cover":[],"text":"java内存模型(JMM)java内存模型：JMM即java Memory Model，它定义了内存、工作内存抽象概念、底层对CPU寄存器、缓存、硬件内存、CPU指令优化等 JMM体现在以下几个方面：​ 1.原子性：保证指令不会受到线程上下文切换的影响 ​ 2.可见性：保证指令不...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"wait/notify，join，park/Unpark","uid":"489d7b6b150f5087fe22abf19dc56ce1","slug":"waitnotify，join，parkUnpark","date":"2022-06-11T13:10:26.016Z","updated":"2022-06-11T13:11:09.285Z","comments":true,"path":"api/articles/waitnotify，join，parkUnpark.json","keywords":null,"cover":[],"text":"wait&#x2F;notify，join，park&#x2F;Unparkwait&#x2F;notify的原理： 1.Owner发现线程条件不满足，调用wait方法，即可进入WaitSet变为WAITING状态 2.BLOCKED和WAITING的线程都处于阻塞状态，不占用C...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"ReentrantLock原理","uid":"de5cee1035d10664a305cb1a74a3c58a","slug":"ReentrantLock","date":"2022-06-11T13:07:20.302Z","updated":"2022-06-11T13:21:17.762Z","comments":true,"path":"api/articles/ReentrantLock.json","keywords":null,"cover":[],"text":" ReentrantLock原理： 1.非公平锁的实现原理： 加锁解锁流程：先从构造器来看，默认为非公平锁实现 public ReentrantLock() &#123; sync = new NonfairSync(); &#125; NonfairSync 继承自 AQS 没...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"synchronized关键字","uid":"e1b3118af0455ea0158a80d4d6b7a3a6","slug":"synchronized关键字","date":"2022-06-11T12:58:01.936Z","updated":"2022-06-11T12:58:35.833Z","comments":true,"path":"api/articles/synchronized关键字.json","keywords":null,"cover":[],"text":" synchronized 解决方案 互斥为了避免临界区的竞态条件发生，有多种手段可以达到目的。 阻塞式的解决方案：synchronized，Lock 非阻塞式的解决方案：原子变量 synchronized，来解决上述问题，即俗称的【对象锁】，它采用互斥的方式让同一时刻至多只有一...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"java线程","uid":"dffb2abec4fa02f1174c155cbd8d7f1a","slug":"java线程","date":"2022-06-11T12:49:10.748Z","updated":"2022-06-11T12:49:42.674Z","comments":true,"path":"api/articles/java线程.json","keywords":null,"cover":[],"text":"java线程 创建和启动线程1.new Thread：public static void test1() &#123; Thread t = new Thread() &#123; //执行的方法 @Override public void run() &#123; log.d...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"进程线程并行并发","uid":"6ce63568dd0197dd5234fafddc6d369d","slug":"进程线程并行并发","date":"2022-06-11T12:36:30.645Z","updated":"2022-06-11T12:49:42.674Z","comments":true,"path":"api/articles/进程线程并行并发.json","keywords":null,"cover":null,"text":" 进程和线程： 进程：资源分配的最小单位程序由指令和数据组成，但这些指令需要运行，数据要读写，就必须将指令加载到CPU，数据加载至内存。在指令运行过程种还须需要用到磁盘，网络等设备。进程就是用来加载指令，管理内存，管理IO的 当一个程序被运行，从磁盘加载这个程序的代码到内存种，这...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"MySQL事务","uid":"c1f6d722cc4602038235f2e7924e8ff2","slug":"事务","date":"2022-06-11T12:25:00.191Z","updated":"2022-06-11T12:25:34.870Z","comments":true,"path":"api/articles/事务.json","keywords":null,"cover":[],"text":"事务 事务的基础知识：在MySQL中只有InnoDB存储引擎支持事务 1.数据库事务的概述：事务是数据库区别于文件系统的重要特征之一，当我们有了事务就会让数据库始终保持一致性，同时我们还可以通过事务的机制恢复到某个时间点 基本概念：事务：是一组逻辑单元，使数据从一种状态转换到另一...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/categories/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/tags/MySQL.json"},{"name":"事务","slug":"事务","count":1,"path":"api/tags/事务.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"MySQL中的锁","uid":"55817b11714364db5e90bcd7c8c20421","slug":"MySQL中的锁","date":"2022-06-11T12:23:16.177Z","updated":"2022-06-11T12:24:00.496Z","comments":true,"path":"api/articles/MySQL中的锁.json","keywords":null,"cover":[],"text":" MySQL中的锁在数据库中，除传统的计算资源（如CPU、RAM、I&#x2F;O等）的争用以外，数据也是一种供许多用户共享的资源。为保证数据的一致性，需要对 并发操作进行控制 ，因此产生了 锁 。同时 锁机制 也为实现MySQL的各个隔离级别提供了保证。 锁冲突也是影响数据库并...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/categories/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/tags/MySQL.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"索引优化与查询优化","uid":"70425fba86b2c28266d9c33de675b2d8","slug":"索引优化与查询优化","date":"2022-06-11T12:12:38.267Z","updated":"2022-06-11T12:21:33.664Z","comments":true,"path":"api/articles/索引优化与查询优化.json","keywords":null,"cover":[],"text":"索引优化与查询优化哪些维度可以进行数据库调优？ 1.索引失效、没有充分利用索引 — 建立索引 2.关联查询太多join（设计缺陷或不得已的需求） – sql优化 3..服务器调优及各个参数设置（缓冲，线程数等） – 调整my.cnf 4.数据过多 – 分库分表 sql查询优化的大...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/categories/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/tags/MySQL.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"范式","uid":"4a36e618a4b7e38da744c1d2baebbf87","slug":"范式","date":"2022-06-11T11:53:14.859Z","updated":"2022-06-11T11:55:10.247Z","comments":true,"path":"api/articles/范式.json","keywords":null,"cover":[],"text":" 范式：在关系型数据库中，关于数据表设计的基本原则，规则就成为范式 目前关系型数据库有六种常见范式，按照范式级别，从低到高分别是：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。 数据库...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/categories/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/tags/MySQL.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"数据表的设计原则","uid":"fdf7bb567823aed005b212decd2fd46a","slug":"数据表的设计原则","date":"2022-06-11T11:53:14.856Z","updated":"2022-06-11T11:55:10.247Z","comments":true,"path":"api/articles/数据表的设计原则.json","keywords":null,"cover":null,"text":" 数据表的设计原则：（具体根据实际情况）1.数据表的个数越少越好 2.数据表中的字段越少越好 3.数据表中联合主键的字段个数越少越好 ​ 联合主键的字段越多，导致占用的索引空间较大 4.使用主键和外键越多越好 ​ 此处的外键并不一定是指数据库中的外键，而是指一种业务逻辑关系，表和...","link":"","photos":[],"count_time":{"symbolsCount":173,"symbolsTime":"1 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/categories/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/tags/MySQL.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"MVCC","uid":"c027261888329c6d8eabd6851937e11d","slug":"MVCC","date":"2022-06-11T11:53:14.852Z","updated":"2022-06-11T11:54:09.746Z","comments":true,"path":"api/articles/MVCC.json","keywords":null,"cover":[],"text":" 多版本并发控制：MVCC就是通过数据行的多个版本来管理实现数据库的并发控制，这项技术使得在InnoDB的事务隔离级别下执行一直性读操作有了保证，换言之就是为了查询一些正在被另一个事务更新的行，并且可以看到他们被更新之前的值，这样在做查询的时候就不用等待另一个事务释放锁 MVCC...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/categories/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/tags/MySQL.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Dubbo源码分析","uid":"0cb8b12f38f1e4c52cf2229e17b82a90","slug":"Dubbo源码分析","date":"2022-06-11T08:15:34.680Z","updated":"2022-06-11T09:17:18.565Z","comments":true,"path":"api/articles/Dubbo源码分析.json","keywords":null,"cover":[],"text":"准备什么是 Dubbo?Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源 Java RPC 框架。 根据 Dubbo 官方文档的介绍，Dubbo 提供了六大核心能力 面向接口代理的高性能RPC调用。 智能容错和负载均衡。 服务自动注...","link":"","photos":[],"count_time":{"symbolsCount":"322k","symbolsTime":"4:53"},"categories":[{"name":"源码","slug":"源码","count":2,"path":"api/categories/源码.json"}],"tags":[{"name":"java","slug":"java","count":10,"path":"api/tags/java.json"},{"name":"源码","slug":"源码","count":2,"path":"api/tags/源码.json"},{"name":"Dubbo","slug":"Dubbo","count":1,"path":"api/tags/Dubbo.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}],"categories":6,"tags":57,"word_count":"659k","post_count":25}