{"title":"范式","uid":"4a36e618a4b7e38da744c1d2baebbf87","slug":"范式","date":"2022-06-11T11:53:14.859Z","updated":"2022-06-11T11:55:10.247Z","comments":true,"path":"api/articles/范式.json","keywords":null,"cover":[],"content":"<p><a name=\"55f8da1e\"></a></p>\n<h4 id=\"范式：\"><a href=\"#范式：\" class=\"headerlink\" title=\"范式：\"></a>范式：</h4><p>在关系型数据库中，关于数据表设计的基本原则，规则就成为范式</p>\n<p>目前关系型数据库有六种常见范式，按照范式级别，从低到高分别是：第一范式（1NF）、第二范式<br />（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美<br />范式）。</p>\n<p><img src=\"/../assets/1647330878497-e7c8c39d-0712-4d23-8ab8-9ef9fc633f30.png\" alt=\"1646461608280.png\"></p>\n<p>数据库的范式设计越高阶，冗余度就越低，同时高阶的范式一定符合低阶范式的要求，最低要求为第一范式</p>\n<p>一般来说，在关系型数据库设计中，最高也就遵循到BCNF(巴斯范式），普遍还是3NF，但也不是绝对，有时候为了提高某些查询性能，我们还需要破坏范式规则，也就是反范式化</p>\n<p><a name=\"41f77279\"></a></p>\n<h4 id=\"第一范式\"><a href=\"#第一范式\" class=\"headerlink\" title=\"第一范式:\"></a>第一范式:</h4><p>确保数据表中每个字段的值必须具有原子性，也就是说每个数据表中每个字段的值为不可再次拆分的最小单元数据</p>\n<p><a name=\"c6b4c762\"></a></p>\n<h4 id=\"第二范式：\"><a href=\"#第二范式：\" class=\"headerlink\" title=\"第二范式：\"></a>第二范式：</h4><p>在满足第一范式的基础上，还要满足数据表中的每一条记录都是可唯一标识的，而且所有的非主键字段，都必须完全依赖主键，不能只依赖主键的一部分</p>\n<p>例如：成绩表中，学号和课程号可以决定成绩，但是学号不能决定成绩，课程号也不能决定成绩，</p>\n<p>所以（学号、课程号）–》成绩  就是完全依赖关系</p>\n<p><a name=\"2cf0095d\"></a></p>\n<h4 id=\"第三范式：\"><a href=\"#第三范式：\" class=\"headerlink\" title=\"第三范式：\"></a>第三范式：</h4><p>在第二范式的基础上，确保数据表中的每一个非主键字段都和主键字段直接相关，也就是说，要求数据表中的所有非主键字段不能依赖于其他非主键字段</p>\n<p>即：</p>\n<p>不能存在非主键字段A依赖于非主键B，而非主键B又依赖于主键C，即存在A-&gt;B-&gt;C的关系</p>\n<p><a name=\"8c9d507e\"></a></p>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><p>1.第一范式，确保了每列保持原子性</p>\n<p>2.第二范式，确保了每列都和主键完全依赖</p>\n<p>3.第三范式，确保了每列都和主键列直接相关而不能间接相关（A-&gt;B,B-&gt;C，不能是A-&gt;B-&gt;C）</p>\n<p><strong>优点</strong>：数据的标准化有助于消除数据库中的数据冗余，第三范式通常被认为在性能，扩展性和数据完整性方面达到了最好的平衡</p>\n<p><strong>缺点</strong>：范式的使用可能会降低查询效率，因为范式的等级越高，设计出来的数据表就越多，越精细，数据的冗余度越低，进行数据查询的时候可能就需要关联多张表，也可能导致一些索引策略失效</p>\n<hr>\n<p><a name=\"d97f42bd\"></a></p>\n<h4 id=\"反范式化：\"><a href=\"#反范式化：\" class=\"headerlink\" title=\"反范式化：\"></a>反范式化：</h4><p>不能只按照范式的要求进行数据库表的设计，要遵循<strong>业务优先</strong>的原则</p>\n<p>有时候可以考虑适当增加冗余的字段来减少表的关联查询，从而达到对性能优化的效果，增加冗余字段就是反范式化</p>\n<p><a name=\"5870d689\"></a></p>\n<h5 id=\"规范化-vs-性能\"><a href=\"#规范化-vs-性能\" class=\"headerlink\" title=\"规范化 vs 性能\"></a>规范化 vs 性能</h5><ol>\n<li>为满足某种商业目标 , 数据库性能比规范化数据库更重要</li>\n<li>在数据规范化的同时 , 要综合考虑数据库的性能</li>\n<li>通过在给定的表中添加额外的字段，以大量减少需要从中搜索信息所需的时间</li>\n<li>通过在给定的表中插入计算列，以方便查询</li>\n</ol>\n<p><a name=\"bf2dd750\"></a></p>\n<h5 id=\"反范式化的新问题：\"><a href=\"#反范式化的新问题：\" class=\"headerlink\" title=\"反范式化的新问题：\"></a>反范式化的新问题：</h5><p>1.存储空间变大了</p>\n<p>2.一个表中字段做了修改，另一个表中冗余的字段也需要同步修改，否则数据不一致</p>\n<p>3.若采用存储过程来支持数据的更新、删除等操作，如果更新频繁会很消耗系统资源</p>\n<p>4.在数据量小的情况下，反范式化不能体现性能的优势，可能还会让数据库表的设计更加复杂</p>\n<p><a name=\"7059e9a3\"></a></p>\n<h5 id=\"使用场景：\"><a href=\"#使用场景：\" class=\"headerlink\" title=\"使用场景：\"></a>使用场景：</h5><p>当冗余信息有价值或者能大幅度提升查询效率的时候才会使用反范式化</p>\n<p><a name=\"c04c58c8\"></a></p>\n<h5 id=\"1-增加冗余字段的建议：\"><a href=\"#1-增加冗余字段的建议：\" class=\"headerlink\" title=\"1.增加冗余字段的建议：\"></a>1.增加冗余字段的建议：</h5><p>①：冗余字段不需要经常进行修改</p>\n<p>②：冗余字段查询的时候不可或缺</p>\n<p><a name=\"0e0e69ff\"></a></p>\n<h5 id=\"2-历史快照、历史数据的需要\"><a href=\"#2-历史快照、历史数据的需要\" class=\"headerlink\" title=\"2.历史快照、历史数据的需要\"></a>2.历史快照、历史数据的需要</h5><p>比如订单中的收货人，地址等信息，每次发生的订单收货信息都属于历史数据，需要进行保存，但是用户随时有可能对收货信息进行修改，所以冗余字段的保存是十分必要的</p>\n<p><a name=\"289b6b44\"></a></p>\n<h5 id=\"3-数据仓库的设计中通常使用反范式化\"><a href=\"#3-数据仓库的设计中通常使用反范式化\" class=\"headerlink\" title=\"3.数据仓库的设计中通常使用反范式化\"></a>3.数据仓库的设计中通常使用反范式化</h5><p>数据仓库通常用来存储历史信息，对于信息的修改比较少，但是设置冗余字段可能更利于数据分析</p>\n<p><a name=\"a2f21b2b\"></a></p>\n<h4 id=\"4-巴斯范式-BCNF\"><a href=\"#4-巴斯范式-BCNF\" class=\"headerlink\" title=\"4.巴斯范式 BCNF\"></a>4.巴斯范式 BCNF</h4>","text":" 范式：在关系型数据库中，关于数据表设计的基本原则，规则就成为范式 目前关系型数据库有六种常见范式，按照范式级别，从低到高分别是：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。 数据库...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/categories/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/tags/MySQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%8C%83%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">范式：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F\"><span class=\"toc-text\">第一范式:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">第二范式：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">第三范式：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">总结：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E8%8C%83%E5%BC%8F%E5%8C%96%EF%BC%9A\"><span class=\"toc-text\">反范式化：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%A7%84%E8%8C%83%E5%8C%96-vs-%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">规范化 vs 性能</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E8%8C%83%E5%BC%8F%E5%8C%96%E7%9A%84%E6%96%B0%E9%97%AE%E9%A2%98%EF%BC%9A\"><span class=\"toc-text\">反范式化的新问题：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9A\"><span class=\"toc-text\">使用场景：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%A2%9E%E5%8A%A0%E5%86%97%E4%BD%99%E5%AD%97%E6%AE%B5%E7%9A%84%E5%BB%BA%E8%AE%AE%EF%BC%9A\"><span class=\"toc-text\">1.增加冗余字段的建议：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%8E%86%E5%8F%B2%E5%BF%AB%E7%85%A7%E3%80%81%E5%8E%86%E5%8F%B2%E6%95%B0%E6%8D%AE%E7%9A%84%E9%9C%80%E8%A6%81\"><span class=\"toc-text\">2.历史快照、历史数据的需要</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%AD%E9%80%9A%E5%B8%B8%E4%BD%BF%E7%94%A8%E5%8F%8D%E8%8C%83%E5%BC%8F%E5%8C%96\"><span class=\"toc-text\">3.数据仓库的设计中通常使用反范式化</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%B7%B4%E6%96%AF%E8%8C%83%E5%BC%8F-BCNF\"><span class=\"toc-text\">4.巴斯范式 BCNF</span></a></li></ol>","author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"索引优化与查询优化","uid":"70425fba86b2c28266d9c33de675b2d8","slug":"索引优化与查询优化","date":"2022-06-11T12:12:38.267Z","updated":"2022-06-11T12:21:33.664Z","comments":true,"path":"api/articles/索引优化与查询优化.json","keywords":null,"cover":[],"text":"索引优化与查询优化哪些维度可以进行数据库调优？ 1.索引失效、没有充分利用索引 — 建立索引 2.关联查询太多join（设计缺陷或不得已的需求） – sql优化 3..服务器调优及各个参数设置（缓冲，线程数等） – 调整my.cnf 4.数据过多 – 分库分表 sql查询优化的大...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/categories/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/tags/MySQL.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"数据表的设计原则","uid":"fdf7bb567823aed005b212decd2fd46a","slug":"数据表的设计原则","date":"2022-06-11T11:53:14.856Z","updated":"2022-06-11T11:55:10.247Z","comments":true,"path":"api/articles/数据表的设计原则.json","keywords":null,"cover":null,"text":" 数据表的设计原则：（具体根据实际情况）1.数据表的个数越少越好 2.数据表中的字段越少越好 3.数据表中联合主键的字段个数越少越好 ​ 联合主键的字段越多，导致占用的索引空间较大 4.使用主键和外键越多越好 ​ 此处的外键并不一定是指数据库中的外键，而是指一种业务逻辑关系，表和...","link":"","photos":[],"count_time":{"symbolsCount":173,"symbolsTime":"1 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/categories/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":6,"path":"api/tags/MySQL.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}