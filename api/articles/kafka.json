{"title":"Kafka","uid":"e1579ed1c931165c644c9ec68da7a87a","slug":"kafka","date":"2022-07-13T08:31:01.630Z","updated":"2022-07-13T08:43:19.422Z","comments":true,"path":"api/articles/kafka.json","keywords":null,"cover":[],"content":"<h1 id=\"一、为什么使用消息队列\"><a href=\"#一、为什么使用消息队列\" class=\"headerlink\" title=\"一、为什么使用消息队列\"></a>一、为什么使用消息队列</h1><h2 id=\"1-使用同步的通信方式来解决多个服务之间的通信\"><a href=\"#1-使用同步的通信方式来解决多个服务之间的通信\" class=\"headerlink\" title=\"1.使用同步的通信方式来解决多个服务之间的通信\"></a>1.使用同步的通信方式来解决多个服务之间的通信</h2><p><img src=\"/../assets/img/%E6%88%AA%E5%B1%8F2021-08-20%20%E4%B8%8B%E5%8D%882.42.07.png\"><br>同步的通信方式会存在性能和稳定性的问题。</p>\n<h2 id=\"2-使用异步的通信方式\"><a href=\"#2-使用异步的通信方式\" class=\"headerlink\" title=\"2.使用异步的通信方式\"></a>2.使用异步的通信方式</h2><p><img src=\"/../assets/img/%E6%88%AA%E5%B1%8F2021-08-20%20%E4%B8%8B%E5%8D%882.49.42.png\"></p>\n<p>针对于同步的通信方式来说，异步的方式，可以让上游快速成功，极大提高了系统的吞吐量。而且在分布式系统中，通过下游多个服务的分布式事务的保障，也能保障业务执行之后的最终一致性。</p>\n<p>消息队列解决具体的是什么问题——通信问题。</p>\n<h1 id=\"二、消息队列的流派\"><a href=\"#二、消息队列的流派\" class=\"headerlink\" title=\"二、消息队列的流派\"></a>二、消息队列的流派</h1><p>目前消息队列的中间件选型有很多种：</p>\n<ul>\n<li><p>rabbitMQ：内部的可玩性（功能性）是非常强的</p>\n</li>\n<li><p>rocketMQ： 阿里内部一个大神，根据kafka的内部执行原理，手写的一个消息队列中间件。性能是与Kafka相比肩，除此之外，在功能上封装了更多的功能。</p>\n</li>\n<li><p>kafka：全球消息处理性能最快的一款MQ</p>\n</li>\n<li><p>zeroMQ</p>\n</li>\n</ul>\n<p>这些消息队列中间件有什么区别？</p>\n<h2 id=\"1-有broker\"><a href=\"#1-有broker\" class=\"headerlink\" title=\"1. 有broker\"></a>1. 有broker</h2><ul>\n<li><p>重topic：Kafka、RocketMQ、ActiveMQ</p>\n<p>整个broker，依据topic来进行消息的中转。在重topic的消息队列里必然需要topic的存在</p>\n</li>\n<li><p>轻topic：RabbitMQ</p>\n<p>topic只是一种中转模式。</p>\n</li>\n</ul>\n<h2 id=\"2-无broker\"><a href=\"#2-无broker\" class=\"headerlink\" title=\"2.无broker\"></a>2.无broker</h2><p>在生产者和消费者之间没有使用broker，例如zeroMQ，直接使用socket进行通信。</p>\n<h1 id=\"三、Kafka的基本知识\"><a href=\"#三、Kafka的基本知识\" class=\"headerlink\" title=\"三、Kafka的基本知识\"></a>三、Kafka的基本知识</h1><h2 id=\"1-Kafka的安装\"><a href=\"#1-Kafka的安装\" class=\"headerlink\" title=\"1.Kafka的安装\"></a>1.Kafka的安装</h2><ul>\n<li>部署一台zookeeper服务器</li>\n<li>安装jdk</li>\n<li>下载kafka的安装包：<a href=\"http://kafka.apache.org/downloads\">http://kafka.apache.org/downloads</a></li>\n<li>上传到kafka服务器上：<code>/usr/local/kafka</code></li>\n<li>解压缩压缩包</li>\n<li>进入到config目录内，修改server.properties</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#broker.id属性在kafka集群中必须要是唯一</span>\nbroker.id<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token comment\">#kafka部署的机器ip和提供服务的端口号</span>\n<span class=\"token assign-left variable\">listeners</span><span class=\"token operator\">=</span>PLAINTEXT://192.168.65.60:9092   \n<span class=\"token comment\">#kafka的消息存储文件</span>\nlog.dir<span class=\"token operator\">=</span>/usr/local/data/kafka-logs\n<span class=\"token comment\">#kafka连接zookeeper的地址</span>\nzookeeper.connect<span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.65.60:2181<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>进入到bin目录内，执行以下命令来启动kafka服务器（带着配置文件）</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./kafka-server-start.sh -daemon <span class=\"token punctuation\">..</span>/config/server.properties <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>校验kafka是否启动成功：</li>\n</ul>\n<p>进入到zk内查看是否有kafka的节点：<code>/brokers/ids/0</code></p>\n<h3 id=\"server-properties核心配置详解\"><a href=\"#server-properties核心配置详解\" class=\"headerlink\" title=\"server.properties核心配置详解\"></a>server.properties核心配置详解</h3><table>\n<thead>\n<tr>\n<th align=\"left\"><strong>Property</strong></th>\n<th><strong>Default</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">broker.id</td>\n<td>0</td>\n<td>每个broker都可以用一个唯一的非负整数id进行标识；这个id可以作为broker的“名字”，你可以选择任意你喜欢的数字作为id，只要id是唯一的即可。</td>\n</tr>\n<tr>\n<td align=\"left\">log.dirs</td>\n<td>&#x2F;tmp&#x2F;kafka-logs</td>\n<td>kafka存放数据的路径。这个路径并不是唯一的，可以是多个，路径之间只需要使用逗号分隔即可；每当创建新partition时，都会选择在包含最少partitions的路径下进行。</td>\n</tr>\n<tr>\n<td align=\"left\">listeners</td>\n<td>PLAINTEXT:&#x2F;&#x2F;192.168.65.60:9092</td>\n<td>server接受客户端连接的端口，ip配置kafka本机ip即可</td>\n</tr>\n<tr>\n<td align=\"left\">zookeeper.connect</td>\n<td>localhost:2181</td>\n<td>zooKeeper连接字符串的格式为：hostname:port，此处hostname和port分别是ZooKeeper集群中某个节点的host和port；zookeeper如果是集群，连接方式为 hostname1:port1, hostname2:port2, hostname3:port3</td>\n</tr>\n<tr>\n<td align=\"left\">log.retention.hours</td>\n<td>168</td>\n<td>每个日志文件删除之前保存的时间。默认数据保存时间对所有topic都一样。</td>\n</tr>\n<tr>\n<td align=\"left\">num.partitions</td>\n<td>1</td>\n<td>创建topic的默认分区数</td>\n</tr>\n<tr>\n<td align=\"left\">default.replication.factor</td>\n<td>1</td>\n<td>自动创建topic的默认副本数量，建议设置为大于等于2</td>\n</tr>\n<tr>\n<td align=\"left\">min.insync.replicas</td>\n<td>1</td>\n<td>当producer设置acks为-1时，min.insync.replicas指定replicas的最小数目（必须确认每一个repica的写数据都是成功的），如果这个数目没有达到，producer发送消息会产生异常</td>\n</tr>\n<tr>\n<td align=\"left\">delete.topic.enable</td>\n<td>false</td>\n<td>是否允许删除主题</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-kafka中的一些基本概念\"><a href=\"#2-kafka中的一些基本概念\" class=\"headerlink\" title=\"2.kafka中的一些基本概念\"></a>2.kafka中的一些基本概念</h2><table>\n<thead>\n<tr>\n<th><strong>名称</strong></th>\n<th><strong>解释</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Broker</td>\n<td>消息中间件处理节点，一个Kafka节点就是一个broker，一个或者多个Broker可以组成一个Kafka集群</td>\n</tr>\n<tr>\n<td>Topic</td>\n<td>Kafka根据topic对消息进行归类，发布到Kafka集群的每条消息都需要指定一个topic</td>\n</tr>\n<tr>\n<td>Producer</td>\n<td>消息生产者，向Broker发送消息的客户端</td>\n</tr>\n<tr>\n<td>Consumer</td>\n<td>消息消费者，从Broker读取消息的客户端</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"3-创建topic\"><a href=\"#3-创建topic\" class=\"headerlink\" title=\"3.创建topic\"></a>3.创建topic</h2><ul>\n<li>通过kafka命令向zk中创建一个主题</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./kafka-topics.sh --create --zookeeper <span class=\"token number\">172.16</span>.253.35:2181 --replication-factor <span class=\"token number\">1</span> --partitions <span class=\"token number\">1</span> --topic <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>查看当前zk中所有的主题</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./kafka-topics.sh --list --zookeeper <span class=\"token number\">172.16</span>.253.35:2181 <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"4-发送消息\"><a href=\"#4-发送消息\" class=\"headerlink\" title=\"4.发送消息\"></a>4.发送消息</h2><p>把消息发送给broker中的某个topic，打开一个kafka发送消息的客户端，然后开始用客户端向kafka服务器发送消息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./kafka-console-consumer.sh --bootstrap-server <span class=\"token number\">172.16</span>.253.38:9092 --topic <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"5-消费消息\"><a href=\"#5-消费消息\" class=\"headerlink\" title=\"5.消费消息\"></a>5.消费消息</h2><p>打开一个消费消息的客户端，向kafka服务器的某个主题消费消息</p>\n<ul>\n<li>方式一：从当前主题中的最后一条消息的offset（偏移量位置）+1开始消费</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./kafka-console-consumer.sh --bootstrap-server <span class=\"token number\">172.16</span>.253.38:9092 --topic <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>方式二：从当前主题中的第一条消息开始消费</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./kafka-console-consumer.sh --bootstrap-server <span class=\"token number\">172.16</span>.253.38:9092 --from-beginning --topic <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"6-关于消息的细节\"><a href=\"#6-关于消息的细节\" class=\"headerlink\" title=\"6.关于消息的细节\"></a>6.关于消息的细节</h2><p><img src=\"/../assets/img/%E6%88%AA%E5%B1%8F2021-08-20%20%E4%B8%8B%E5%8D%884.18.24.png\"></p>\n<ul>\n<li>生产者将消息发送给broker，broker会将消息保存在本地的日志文件中</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/usr/local/kafka/data/kafka-logs/主题-分区/00000000.log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>消息的保存是有序的，通过offset偏移量来描述消息的有序性</li>\n<li>消费者消费消息时也是通过offset来描述当前要消费的那条消息的位置</li>\n</ul>\n<h2 id=\"7-单播消息\"><a href=\"#7-单播消息\" class=\"headerlink\" title=\"7.单播消息\"></a>7.单播消息</h2><p>在一个kafka的topic中，启动两个消费者，一个生产者，问：生产者发送消息，这条消息是否同时会被两个消费者消费？</p>\n<p>如果多个消费者在同一个消费组，那么只有一个消费者可以收到订阅的topic中的消息。换言之，同一个消费组中只能有一个消费者收到一个topic中的消息。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.&#x2F;kafka-console-consumer.sh --bootstrap-server 172.16.253.38:9092  --consumer-property group.id&#x3D;testGroup --topic test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"8-多播消息\"><a href=\"#8-多播消息\" class=\"headerlink\" title=\"8.多播消息\"></a>8.多播消息</h2><p>不同的消费组订阅同一个topic，那么不同的消费组中只有一个消费者能收到消息。实际上也是多个消费组中的多个消费者收到了同一个消息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./kafka-console-consumer.sh --bootstrap-server <span class=\"token number\">172.16</span>.253.38:9092  --consumer-property group.id<span class=\"token operator\">=</span>testGroup1 --topic <span class=\"token builtin class-name\">test</span>\n./kafka-console-consumer.sh --bootstrap-server <span class=\"token number\">172.16</span>.253.38:9092  --consumer-property group.id<span class=\"token operator\">=</span>testGroup2 --topic <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p>下图就是描述多播和单播消息的区别</p>\n<p><img src=\"/../assets/img/%E6%88%AA%E5%B1%8F2021-08-23%20%E4%B8%8A%E5%8D%889.45.21.png\"></p>\n<h2 id=\"9-查看消费组的详细信息\"><a href=\"#9-查看消费组的详细信息\" class=\"headerlink\" title=\"9. 查看消费组的详细信息\"></a>9. 查看消费组的详细信息</h2><p>通过以下命令可以查看到消费组的相信信息：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./kafka-consumer-groups.sh --bootstrap-server <span class=\"token number\">172.16</span>.253.38:9092 --describe --group testGroup<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/../assets/img/%E6%88%AA%E5%B1%8F2021-08-23%20%E4%B8%8A%E5%8D%889.51.46.png\"></p>\n<p>重点关注以下几个信息：</p>\n<ul>\n<li>current-offset: 最后被消费的消息的偏移量</li>\n<li>Log-end-offset: 消息总量（最后一条消息的偏移量）</li>\n<li>Lag：积压了多少条消息</li>\n</ul>\n<h1 id=\"四、Kafka中主题和分区的概念\"><a href=\"#四、Kafka中主题和分区的概念\" class=\"headerlink\" title=\"四、Kafka中主题和分区的概念\"></a>四、Kafka中主题和分区的概念</h1><h2 id=\"1-主题Topic\"><a href=\"#1-主题Topic\" class=\"headerlink\" title=\"1.主题Topic\"></a>1.主题Topic</h2><p>主题-topic在kafka中是一个逻辑的概念，kafka通过topic将消息进行分类。不同的topic会被订阅该topic的消费者消费。</p>\n<p>但是有一个问题，如果说这个topic中的消息非常非常多，多到需要几T来存，因为消息是会被保存到log日志文件中的。为了解决这个文件过大的问题，kafka提出了Partition分区的概念</p>\n<h2 id=\"2-分区Partition\"><a href=\"#2-分区Partition\" class=\"headerlink\" title=\"2.分区Partition\"></a>2.分区Partition</h2><h3 id=\"1）分区的概念\"><a href=\"#1）分区的概念\" class=\"headerlink\" title=\"1）分区的概念\"></a>1）分区的概念</h3><p>通过partition将一个topic中的消息分区来存储。这样的好处有多个：</p>\n<ul>\n<li>分区存储，可以解决统一存储文件过大的问题</li>\n<li>提供了读写的吞吐量：读和写可以同时在多个分区中进行</li>\n</ul>\n<img src=\"../assets/img/image-20210823095952128.png\" alt=\"image-20210823095952128\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"2）创建多分区的主题\"><a href=\"#2）创建多分区的主题\" class=\"headerlink\" title=\"2）创建多分区的主题\"></a>2）创建多分区的主题</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./kafka-topics.sh --create --zookeeper <span class=\"token number\">172.16</span>.253.35:2181 --replication-factor <span class=\"token number\">1</span> --partitions <span class=\"token number\">2</span> --topic test1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"3-kafka中消息日志文件中保存的内容\"><a href=\"#3-kafka中消息日志文件中保存的内容\" class=\"headerlink\" title=\"3.kafka中消息日志文件中保存的内容\"></a>3.kafka中消息日志文件中保存的内容</h2><ul>\n<li><p>00000.log： 这个文件中保存的就是消息</p>\n</li>\n<li><p>__consumer_offsets-49:</p>\n<p>kafka内部自己创建了__consumer_offsets主题包含了50个分区。这个主题用来存放消费者消费某个主题的偏移量。因为每个消费者都会自己维护着消费的主题的偏移量，也就是说每个消费者会把消费的主题的偏移量自主上报给kafka中的默认主题：consumer_offsets。因此kafka为了提升这个主题的并发性，默认设置了50个分区。</p>\n<ul>\n<li><p>提交到哪个分区：通过hash函数：hash(consumerGroupId) % __consumer_offsets主题的分区数</p>\n</li>\n<li><p>提交到该主题中的内容是：key是consumerGroupId+topic+分区号，value就是当前offset的值</p>\n</li>\n</ul>\n</li>\n<li><p>文件中保存的消息，默认保存7天。七天到后消息会被删除。</p>\n</li>\n</ul>\n<h1 id=\"五、Kafka集群操作\"><a href=\"#五、Kafka集群操作\" class=\"headerlink\" title=\"五、Kafka集群操作\"></a>五、Kafka集群操作</h1><h2 id=\"1-搭建kafka集群（三个broker）\"><a href=\"#1-搭建kafka集群（三个broker）\" class=\"headerlink\" title=\"1.搭建kafka集群（三个broker）\"></a>1.搭建kafka集群（三个broker）</h2><ul>\n<li>创建三个server.properties文件</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 0 1 2</span>\nbroker.id<span class=\"token operator\">=</span><span class=\"token number\">2</span>\n// <span class=\"token number\">9092</span> <span class=\"token number\">9093</span> <span class=\"token number\">9094</span>\n<span class=\"token assign-left variable\">listeners</span><span class=\"token operator\">=</span>PLAINTEXT://192.168.65.60:9094\n//kafka-logs kafka-logs-1 kafka-logs-2\nlog.dir<span class=\"token operator\">=</span>/usr/local/data/kafka-logs-2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>通过命令来启动三台broker</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./kafka-server-start.sh -daemon <span class=\"token punctuation\">..</span>/config/server.properties\n./kafka-server-start.sh -daemon <span class=\"token punctuation\">..</span>/config/server1.properties\n./kafka-server-start.sh -daemon <span class=\"token punctuation\">..</span>/config/server2.properties<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>校验是否启动成功</li>\n</ul>\n<p>进入到zk中查看&#x2F;brokers&#x2F;ids中过是否有三个znode（0，1，2）</p>\n<h2 id=\"2-副本的概念\"><a href=\"#2-副本的概念\" class=\"headerlink\" title=\"2.副本的概念\"></a>2.副本的概念</h2><p>在创建主题时，除了指明了主题的分区数以外，还指明了副本数，那么副本是一个什么概念呢？</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./kafka-topics.sh --create --zookeeper <span class=\"token number\">172.16</span>.253.35:2181 --replication-factor <span class=\"token number\">3</span> --partitions <span class=\"token number\">2</span> --topic my-replicated-topic<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p>副本是为了为主题中的分区创建多个备份，多个副本在kafka集群的多个broker中，会有一个副本作为leader，其他是follower。</p>\n<p>查看topic情况：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看topic情况</span>\n./kafka-topics.sh --describe --zookeeper <span class=\"token number\">172.16</span>.253.35:2181 --topic my-replicated-topic<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"/../assets/img/%E6%88%AA%E5%B1%8F2021-08-23%20%E4%B8%8A%E5%8D%8811.08.37.png\"></p>\n<ul>\n<li>leader：</li>\n</ul>\n<p>kafka的写和读的操作，都发生在leader上。leader负责把数据同步给follower。当leader挂了，经过主从选举，从多个follower中选举产生一个新的leader</p>\n<ul>\n<li>follower</li>\n</ul>\n<p>接收leader的同步的数据</p>\n<ul>\n<li><p>isr：</p>\n<p>可以同步和已同步的节点会被存入到isr集合中。这里有一个细节：如果isr中的节点性能较差，会被踢出isr集合。</p>\n</li>\n</ul>\n<p><strong>（重点～！）</strong>此时，broker、主题、分区、副本 这些概念就全部展现了，大家需要把这些概念梳理清楚：</p>\n<p>集群中有多个broker，创建主题时可以指明主题有多个分区（把消息拆分到不同的分区中存储），可以为分区创建多个副本，不同的副本存放在不同的broker里。</p>\n<h2 id=\"3-关于集群消费\"><a href=\"#3-关于集群消费\" class=\"headerlink\" title=\"3.关于集群消费\"></a>3.关于集群消费</h2><h3 id=\"1）向集群发送消息：\"><a href=\"#1）向集群发送消息：\" class=\"headerlink\" title=\"1）向集群发送消息：\"></a>1）向集群发送消息：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./kafka-console-consumer.sh --bootstrap-server <span class=\"token number\">172.16</span>.253.38:9092,172.16.253.38:9093,172.16.253.38:9094 --from-beginning --consumer-property group.id<span class=\"token operator\">=</span>testGroup1 --topic my-replicated-topic<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2）从集群中消费消息\"><a href=\"#2）从集群中消费消息\" class=\"headerlink\" title=\"2）从集群中消费消息\"></a>2）从集群中消费消息</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./kafka-console-producer.sh --broker-list <span class=\"token number\">172.16</span>.253.38:9092,172.16.253.38:9093,172.16.253.38:9094 --topic my-replicated-topic<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3）指定消费组来消费消息\"><a href=\"#3）指定消费组来消费消息\" class=\"headerlink\" title=\"3）指定消费组来消费消息\"></a>3）指定消费组来消费消息</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./kafka-console-consumer.sh --bootstrap-server <span class=\"token number\">172.16</span>.253.38:9092,172.16.253.38:9093,172.16.253.38:9094 --from-beginning --consumer-property group.id<span class=\"token operator\">=</span>testGroup1 --topic my-replicated-topic<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4）分区分消费组的集群消费中的细节\"><a href=\"#4）分区分消费组的集群消费中的细节\" class=\"headerlink\" title=\"4）分区分消费组的集群消费中的细节\"></a>4）分区分消费组的集群消费中的细节</h3><img src=\"../assets/img/kafka集群消费.jpg\" alt=\"kafka集群消费\" style=\"zoom:50%;\" />\n\n<ul>\n<li><p>一个partition只能被一个消费组中的一个消费者消费，目的是为了保证消费的顺序性，但是多个partion的多个消费者消费的总的顺序性是得不到保证的，那怎么做到消费的总顺序性呢？</p>\n</li>\n<li><p>partition的数量决定了消费组中消费者的数量，建议同一个消费组中消费者的数量不要超过partition的数量，否则多的消费者消费不到消息</p>\n</li>\n<li><p>如果消费者挂了，那么会触发rebalance机制（后面介绍），会让其他消费者来消费该分区</p>\n</li>\n</ul>\n<h1 id=\"六、kafka的java客户端-生产者的实现\"><a href=\"#六、kafka的java客户端-生产者的实现\" class=\"headerlink\" title=\"六、kafka的java客户端-生产者的实现\"></a>六、kafka的java客户端-生产者的实现</h1><h2 id=\"1-生产者的基本实现\"><a href=\"#1-生产者的基本实现\" class=\"headerlink\" title=\"1.生产者的基本实现\"></a>1.生产者的基本实现</h2><ul>\n<li>引入依赖</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>kafka-clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>具体实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qf<span class=\"token punctuation\">.</span>kafka</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>serialization<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringSerializer</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutionException</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySimpleProducer</span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> TOPIC_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"my-replicated-topic\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//1.设置参数</span>\n    <span class=\"token class-name\">Properties</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>BOOTSTRAP_SERVERS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"172.16.253.38:9092,172.16.253.38:9093,172.16.253.38:9094\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//把发送的key从字符串序列化为字节数组</span>\n    props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//把发送消息value从字符串序列化为字节数组</span>\n    props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//2.创建生产消息的客户端，传入参数</span>\n    <span class=\"token class-name\">Producer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//3.创建消息</span>\n    <span class=\"token comment\">//key：作用是决定了往哪个分区上发，value：具体要发送的消息内容</span>\n    <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> producerRecord <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>TOPIC_NAME<span class=\"token punctuation\">,</span><span class=\"token string\">\"mykeyvalue\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hellokafka\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//4.发送消息,得到消息发送的元数据并输出</span>\n    <span class=\"token class-name\">RecordMetadata</span> metadata <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>producerRecord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"同步方式发送消息结果：\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"topic-\"</span> <span class=\"token operator\">+</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">topic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"|partition-\"</span>\n      <span class=\"token operator\">+</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"|offset-\"</span> <span class=\"token operator\">+</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"2-生产者的同步发送消息\"><a href=\"#2-生产者的同步发送消息\" class=\"headerlink\" title=\"2.生产者的同步发送消息\"></a>2.生产者的同步发送消息</h2><img src=\"../assets/img/截屏2021-08-23 下午2.34.45.png\" alt=\"截屏2021-ss8-23 下午2.34.45\" style=\"zoom:30%;\" />\n\n<p>如果生产者发送消息没有收到ack，生产者会阻塞，阻塞到3s的时间，如果还没有收到消息，会进行重试。重试的次数3次。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">RecordMetadata</span> metadata <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>producerRecord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"同步方式发送消息结果：\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"topic-\"</span> <span class=\"token operator\">+</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">topic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"|partition-\"</span>\n  <span class=\"token operator\">+</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"|offset-\"</span> <span class=\"token operator\">+</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"3-生产者的异步发送消息\"><a href=\"#3-生产者的异步发送消息\" class=\"headerlink\" title=\"3.生产者的异步发送消息\"></a>3.生产者的异步发送消息</h2><img src=\"../assets/img/截屏2021-08-23 下午2.43.18.png\" alt=\"截屏2021s-0s8-sdf23 下午2.43.18\" style=\"zoom:30%;\" />\n\n<p>异步发送，生产者发送完消息后就可以执行之后的业务，broker在收到消息后异步调用生产者提供的callback回调方法。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//5.异步发送消息</span>\n    producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>producerRecord<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RecordMetadata</span> metadata<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exception <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息失败：\"</span> <span class=\"token operator\">+</span> exception<span class=\"token punctuation\">.</span><span class=\"token function\">getStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>metadata <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"异步方式发送消息结果：\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"topic-\"</span> <span class=\"token operator\">+</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">topic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"|partition-\"</span>\n            <span class=\"token operator\">+</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"|offset-\"</span> <span class=\"token operator\">+</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"4-生产者中的ack的配置\"><a href=\"#4-生产者中的ack的配置\" class=\"headerlink\" title=\"4.生产者中的ack的配置\"></a>4.生产者中的ack的配置</h2><p>在同步发送的前提下，生产者在获得集群返回的ack之前会一直阻塞。那么集群什么时候返回ack呢？此时ack有3个配置：</p>\n<ul>\n<li><p>ack &#x3D; 0   kafka-cluster不需要任何的broker收到消息，就立即返回ack给生产者，最容易丢消息的，效率是最高的</p>\n</li>\n<li><p>ack&#x3D;1（默认）： 多副本之间的leader已经收到消息，并把消息写入到本地的log中，才会返回ack给生产者，性能和安全性是最均衡的</p>\n</li>\n<li><p>ack&#x3D;-1&#x2F;all。里面有默认的配置min.insync.replicas&#x3D;2(默认为1，推荐配置大于等于2)，此时就需要leader和一个follower同步完后，才会返回ack给生产者（此时集群中有2个broker已完成数据的接收），这种方式最安全，但性能最差。</p>\n</li>\n</ul>\n<img src=\"../assets/img/截屏2021-08-23 下午3.09.01.png\" alt=\"截屏2021-08-23 下午3.09.01\" style=\"zoom:30%;\" />\n\n<p>下面是关于ack和重试（如果没有收到ack，就开启重试）的配置</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>ACKS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \t<span class=\"token comment\">/*\n      发送失败会重试，默认重试间隔100ms，重试能保证消息发送的可靠性，但是也可能造成消息重复发送，比如网络抖动，所以需要在\n      接收者那边做好消息接收的幂等性处理\n      */</span>\n      props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>RETRIES_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//重试间隔设置</span>\n      props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>RETRY_BACKOFF_MS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"5-关于消息发送的缓冲区\"><a href=\"#5-关于消息发送的缓冲区\" class=\"headerlink\" title=\"5.关于消息发送的缓冲区\"></a>5.关于消息发送的缓冲区</h2><img src=\"../assets/img/截屏2021-08-23 下午3.13.09.png\" alt=\"截屏2021-08-23 下午3.13.09\" style=\"zoom:33%;\" />\n\n<ul>\n<li>kafka默认会创建一个消息缓冲区，用来存放要发送的消息，缓冲区是32m</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>BUFFER_MEMORY_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">33554432</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>kafka本地线程会去缓冲区中一次拉16k的数据，发送到broker</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>BATCH_SIZE_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">16384</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>如果线程拉不到16k的数据，间隔10ms也会将已拉到的数据发到broker</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>LINGER_MS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"七、Java客户端消费者的实现细节\"><a href=\"#七、Java客户端消费者的实现细节\" class=\"headerlink\" title=\"七、Java客户端消费者的实现细节\"></a>七、Java客户端消费者的实现细节</h1><h2 id=\"1-消费者的基本实现\"><a href=\"#1-消费者的基本实现\" class=\"headerlink\" title=\"1.消费者的基本实现\"></a>1.消费者的基本实现</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qf<span class=\"token punctuation\">.</span>kafka</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConsumerConfig</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConsumerRecord</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConsumerRecords</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KafkaConsumer</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>serialization<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringDeserializer</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Duration</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySimpleConsumer</span> <span class=\"token punctuation\">&#123;</span>\n\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> TOPIC_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"my-replicated-topic\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> CONSUMER_GROUP_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"testGroup\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Properties</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>BOOTSTRAP_SERVERS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"172.16.253.38:9092,172.16.253.38:9093,172.16.253.38:9094\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 消费分组名</span>\n    props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>GROUP_ID_CONFIG<span class=\"token punctuation\">,</span> CONSUMER_GROUP_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>KEY_DESERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>VALUE_DESERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//1.创建一个消费者的客户端</span>\n    <span class=\"token class-name\">KafkaConsumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaConsumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//2. 消费者订阅主题列表</span>\n    consumer<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>TOPIC_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">/*\n       * 3.poll() API 是拉取消息的长轮询\n       */</span>\n      <span class=\"token class-name\">ConsumerRecords</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> records <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> record <span class=\"token operator\">:</span> records<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//4.打印消息</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到消息：partition = %d,offset = %d, key = %s, value = %s%n\"</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          record<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-关于消费者自动提交和手动提交offset\"><a href=\"#2-关于消费者自动提交和手动提交offset\" class=\"headerlink\" title=\"2.关于消费者自动提交和手动提交offset\"></a>2.关于消费者自动提交和手动提交offset</h2><h3 id=\"1）提交的内容\"><a href=\"#1）提交的内容\" class=\"headerlink\" title=\"1）提交的内容\"></a>1）提交的内容</h3><p>消费者无论是自动提交还是手动提交，都需要把所属的消费组+消费的某个主题+消费的某个分区及消费的偏移量，这样的信息提交到集群的_consumer_offsets主题里面。</p>\n<h3 id=\"2）自动提交\"><a href=\"#2）自动提交\" class=\"headerlink\" title=\"2）自动提交\"></a>2）自动提交</h3><p>消费者poll消息下来以后就会自动提交offset</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 是否自动提交offset，默认就是true</span>\nprops<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>ENABLE_AUTO_COMMIT_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 自动提交offset的间隔时间</span>\nprops<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>AUTO_COMMIT_INTERVAL_MS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：自动提交会丢消息。因为消费者在消费前提交offset，有可能提交完后还没消费时消费者挂了。</p>\n<h3 id=\"3）手动提交\"><a href=\"#3）手动提交\" class=\"headerlink\" title=\"3）手动提交\"></a>3）手动提交</h3><p>需要把自动提交的配置改成false</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>ENABLE_AUTO_COMMIT_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>手动提交又分成了两种：</p>\n<ul>\n<li><p>手动同步提交</p>\n<p>在消费完消息后调用同步提交的方法，当集群返回ack前一直阻塞，返回ack后表示提交成功，执行之后的逻辑</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token comment\">/*\n      * poll() API 是拉取消息的长轮询\n      */</span>\n     <span class=\"token class-name\">ConsumerRecords</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> records <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> record <span class=\"token operator\">:</span> records<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到消息：partition = %d,offset = %d, key = %s, value = %s%n\"</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         record<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token comment\">//所有的消息已消费完</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//有消息</span>\n       <span class=\"token comment\">// 手动同步提交offset，当前线程会阻塞直到offset提交成功</span>\n       <span class=\"token comment\">// 一般使用同步提交，因为提交之后一般也没有什么逻辑代码了</span>\n       consumer<span class=\"token punctuation\">.</span><span class=\"token function\">commitSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//=======阻塞=== 提交成功</span>\n     <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>手动异步提交</p>\n<p>在消息消费完后提交，不需要等到集群ack，直接执行之后的逻辑，可以设置一个回调方法，供集群调用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token comment\">/*\n      * poll() API 是拉取消息的长轮询\n      */</span>\n     <span class=\"token class-name\">ConsumerRecords</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> records <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> record <span class=\"token operator\">:</span> records<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到消息：partition = %d,offset = %d, key = %s, value = %s%n\"</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         record<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token comment\">//所有的消息已消费完</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  \n       <span class=\"token comment\">// 手动异步提交offset，当前线程提交offset不会阻塞，可以继续处理后面的程序逻辑</span>\n       consumer<span class=\"token punctuation\">.</span><span class=\"token function\">commitAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OffsetCommitCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token annotation punctuation\">@Override</span>\n         <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OffsetAndMetadata</span><span class=\"token punctuation\">></span></span> offsets<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exception <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Commit failed for \"</span> <span class=\"token operator\">+</span> offsets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Commit failed exception: \"</span> <span class=\"token operator\">+</span> exception<span class=\"token punctuation\">.</span><span class=\"token function\">getStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n     <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"3-长轮询poll消息\"><a href=\"#3-长轮询poll消息\" class=\"headerlink\" title=\"3.长轮询poll消息\"></a>3.长轮询poll消息</h2><ul>\n<li>默认情况下，消费者一次会poll500条消息。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//一次poll最大拉取消息的条数，可以根据消费速度的快慢来设置</span>\nprops<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>MAX_POLL_RECORDS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>代码中设置了长轮询的时间是1000毫秒</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token comment\">/*\n      * poll() API 是拉取消息的长轮询\n      */</span>\n     <span class=\"token class-name\">ConsumerRecords</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> records <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> record <span class=\"token operator\">:</span> records<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到消息：partition = %d,offset = %d, key = %s, value = %s%n\"</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n         record<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>意味着：</p>\n<ul>\n<li><ul>\n<li>如果一次poll到500条，就直接执行for循环</li>\n<li>如果这一次没有poll到500条。且时间在1秒内，那么长轮询继续poll，要么到500条，要么到1s</li>\n<li>如果多次poll都没达到500条，且1秒时间到了，那么直接执行for循环</li>\n</ul>\n</li>\n<li>如果两次poll的间隔超过30s，集群会认为该消费者的消费能力过弱，该消费者被踢出消费组，触发rebalance机制，rebalance机制会造成性能开销。可以通过设置这个参数，让一次poll的消息条数少一点</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//一次poll最大拉取消息的条数，可以根据消费速度的快慢来设置</span>\n  props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>MAX_POLL_RECORDS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//如果两次poll的时间如果超出了30s的时间间隔，kafka会认为其消费能力过弱，将其踢出消费组。将分区分配给其他消费者。-rebalance</span>\n  props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>MAX_POLL_INTERVAL_MS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"4-消费者的健康状态检查\"><a href=\"#4-消费者的健康状态检查\" class=\"headerlink\" title=\"4.消费者的健康状态检查\"></a>4.消费者的健康状态检查</h2><p>消费者每隔1s向kafka集群发送心跳，集群发现如果有超过10s没有续约的消费者，将被踢出消费组，触发该消费组的rebalance机制，将该分区交给消费组里的其他消费者进行消费。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//consumer给broker发送心跳的间隔时间</span>\n    props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>HEARTBEAT_INTERVAL_MS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//kafka如果超过10秒没有收到消费者的心跳，则会把消费者踢出消费组，进行rebalance，把分区分配给其他消费者。</span>\n    props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>SESSION_TIMEOUT_MS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"5-指定分区和偏移量、时间消费\"><a href=\"#5-指定分区和偏移量、时间消费\" class=\"headerlink\" title=\"5.指定分区和偏移量、时间消费\"></a>5.指定分区和偏移量、时间消费</h2><ul>\n<li>指定分区消费</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">consumer<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">(</span>TOPIC_NAME<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>从头消费</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">consumer<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">(</span>TOPIC_NAME<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsumer<span class=\"token punctuation\">.</span><span class=\"token function\">seekToBeginning</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">(</span>TOPIC_NAME<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>指定offset消费</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">consumer<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">(</span>TOPIC_NAME<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsumer<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">(</span>TOPIC_NAME<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>指定时间消费</li>\n</ul>\n<p>根据时间，去所有的partition中确定该时间对应的offset，然后去所有的partition中找到该offset之后的消息开始消费。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PartitionInfo</span><span class=\"token punctuation\">></span></span> topicPartitions <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">partitionsFor</span><span class=\"token punctuation\">(</span>TOPIC_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//从1小时前开始消费</span>\n        <span class=\"token keyword\">long</span> fetchDataTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PartitionInfo</span> par <span class=\"token operator\">:</span> topicPartitions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">(</span>TOPIC_NAME<span class=\"token punctuation\">,</span> par<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fetchDataTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OffsetAndTimestamp</span><span class=\"token punctuation\">></span></span> parMap <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">offsetsForTimes</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TopicPartition</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OffsetAndTimestamp</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> parMap<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">TopicPartition</span> key <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">OffsetAndTimestamp</span> value <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Long</span> offset <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"partition-\"</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"|offset-\"</span> <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//根据消费里的timestamp确定offset</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                consumer<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                consumer<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-新消费组的消费offset规则\"><a href=\"#6-新消费组的消费offset规则\" class=\"headerlink\" title=\"6.新消费组的消费offset规则\"></a>6.新消费组的消费offset规则</h2><p>新消费组中的消费者在启动以后，默认会从当前分区的最后一条消息的offset+1开始消费（消费新消息）。可以通过以下的设置，让新的消费者第一次从头开始消费。之后开始消费新消息（最后消费的位置的偏移量+1）</p>\n<ul>\n<li>Latest:默认的，消费新消息</li>\n<li>earliest：第一次从头开始消费。之后开始消费新消息（最后消费的位置的偏移量+1）</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">props<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerConfig</span><span class=\"token punctuation\">.</span>AUTO_OFFSET_RESET_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"earliest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h1 id=\"八、Springboot中使用Kafka\"><a href=\"#八、Springboot中使用Kafka\" class=\"headerlink\" title=\"八、Springboot中使用Kafka\"></a>八、Springboot中使用Kafka</h1><h2 id=\"1-引入依赖\"><a href=\"#1-引入依赖\" class=\"headerlink\" title=\"1.引入依赖\"></a>1.引入依赖</h2><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-编写配置文件\"><a href=\"#2-编写配置文件\" class=\"headerlink\" title=\"2.编写配置文件\"></a>2.编写配置文件</h2><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9999</span>\n\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">kafka</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">bootstrap-servers</span><span class=\"token punctuation\">:</span> 192.168.111.129<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span>  <span class=\"token comment\">#,172.16.253.38:9093,172.16.253.38:9094  集群</span>\n    <span class=\"token key atrule\">producer</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#生产者配置</span>\n      <span class=\"token key atrule\">retries</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 设置大于0的值，没有收到ack会重复发送三次</span>\n      <span class=\"token key atrule\">batch-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16384</span>  <span class=\"token comment\">#16kb 每次拉取16kb(缓冲区中数据大于16kb)</span>\n      <span class=\"token key atrule\">buffer-memory</span><span class=\"token punctuation\">:</span> <span class=\"token number\">33554432</span> <span class=\"token comment\">#32mb 消息缓冲区</span>\n      <span class=\"token key atrule\">acks</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\">#一个leader拿到消息才返回ack  （0，1，-1三种）</span>\n      <span class=\"token comment\"># 指定消息key和消息体的编解码方式</span>\n      <span class=\"token key atrule\">key-serializer</span><span class=\"token punctuation\">:</span> org.apache.kafka.common.serialization.StringSerializer\n      <span class=\"token key atrule\">value-serializer</span><span class=\"token punctuation\">:</span> org.apache.kafka.common.serialization.StringSerializer\n    <span class=\"token key atrule\">consumer</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#消费者配置</span>\n      <span class=\"token key atrule\">group-id</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>group <span class=\"token comment\">#消费组</span>\n      <span class=\"token key atrule\">enable-auto-commit</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>  <span class=\"token comment\">#手动提交</span>\n      <span class=\"token key atrule\">auto-offset-reset</span><span class=\"token punctuation\">:</span> earliest <span class=\"token comment\">#一个新消费组默认从头开始消费</span>\n      <span class=\"token comment\"># 指定消息key和消息体的编解码方式</span>\n      <span class=\"token key atrule\">key-deserializer</span><span class=\"token punctuation\">:</span> org.apache.kafka.common.serialization.StringDeserializer\n      <span class=\"token key atrule\">value-deserializer</span><span class=\"token punctuation\">:</span> org.apache.kafka.common.serialization.StringDeserializer\n      <span class=\"token key atrule\">max-poll-records</span><span class=\"token punctuation\">:</span> <span class=\"token number\">500</span> <span class=\"token comment\">#一次最多拉去500条消息</span>\n    <span class=\"token key atrule\">listener</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 当每一条记录被消费者监听器（ListenerConsumer）处理之后提交</span>\n      <span class=\"token comment\"># RECORD</span>\n      <span class=\"token comment\"># 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后提交</span>\n      <span class=\"token comment\"># BATCH</span>\n      <span class=\"token comment\"># 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间大于TIME时提交</span>\n      <span class=\"token comment\"># TIME</span>\n      <span class=\"token comment\"># 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理record数量大于等于COUNT时提交</span>\n      <span class=\"token comment\"># COUNT</span>\n      <span class=\"token comment\"># TIME |　COUNT　有一个条件满足时提交</span>\n      <span class=\"token comment\"># COUNT_TIME</span>\n      <span class=\"token comment\"># 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后, 手动调用Acknowledgment.acknowledge()后提交</span>\n      <span class=\"token comment\"># MANUAL</span>\n      <span class=\"token comment\"># 手动调用Acknowledgment.acknowledge()后立即提交，一般使用这种</span>\n      <span class=\"token comment\"># MANUAL_IMMEDIATE</span>\n      <span class=\"token key atrule\">ack-mode</span><span class=\"token punctuation\">:</span> MANUAL_IMMEDIATE\n<span class=\"token comment\">#  redis:</span>\n<span class=\"token comment\">#    host: 172.16.253.21</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"3-编写消息生产者\"><a href=\"#3-编写消息生产者\" class=\"headerlink\" title=\"3.编写消息生产者\"></a>3.编写消息生产者</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qf<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KafkaTemplate</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/msg\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyKafkaController</span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> TOPIC_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"my-replicated-topic\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">KafkaTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> kafkaTemplate<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/send\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    kafkaTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>TOPIC_NAME<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"this is a message!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"send success!\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">&#125;</span>\n\n\n\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"4-编写消费者\"><a href=\"#4-编写消费者\" class=\"headerlink\" title=\"4.编写消费者\"></a>4.编写消费者</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>qf<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>consumer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConsumerRecord</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConsumerRecords</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KafkaListener</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Acknowledgment</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyConsumer</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>topics <span class=\"token operator\">=</span> <span class=\"token string\">\"my-replicated-topic\"</span><span class=\"token punctuation\">,</span> groupId <span class=\"token operator\">=</span> <span class=\"token string\">\"MyGroup1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenGroup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> record<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Acknowledgment</span> ack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//手动提交offset</span>\n        ack<span class=\"token punctuation\">.</span><span class=\"token function\">acknowledge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-消费者中配置消费主题、分区和偏移量\"><a href=\"#5-消费者中配置消费主题、分区和偏移量\" class=\"headerlink\" title=\"5.消费者中配置消费主题、分区和偏移量\"></a>5.消费者中配置消费主题、分区和偏移量</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@KafkaListener</span><span class=\"token punctuation\">(</span>groupId <span class=\"token operator\">=</span> <span class=\"token string\">\"testGroup\"</span><span class=\"token punctuation\">,</span> topicPartitions <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//主题，分区</span>\n        <span class=\"token comment\">//可以消费多个主题，分区</span>\n        <span class=\"token annotation punctuation\">@TopicPartition</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"topic1\"</span><span class=\"token punctuation\">,</span> partitions <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">//可以设置偏移量,0号分区正常消费，1号分区从偏移量100开始消费</span>\n        <span class=\"token annotation punctuation\">@TopicPartition</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"topic2\"</span><span class=\"token punctuation\">,</span> partitions <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> partitionOffsets <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@PartitionOffset</span><span class=\"token punctuation\">(</span>partition <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> initialOffset <span class=\"token operator\">=</span> <span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> concurrency <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//concurrency就是同消费组下的消费者个数，就是并发消费数，建议小于等于分区总数</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenGroupPro</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> record<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Acknowledgment</span> ack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//手动提交offset</span>\n    ack<span class=\"token punctuation\">.</span><span class=\"token function\">acknowledge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"九、kafka集群中的controller、rebalance、HW\"><a href=\"#九、kafka集群中的controller、rebalance、HW\" class=\"headerlink\" title=\"九、kafka集群中的controller、rebalance、HW\"></a>九、kafka集群中的controller、rebalance、HW</h1><h2 id=\"1-controller\"><a href=\"#1-controller\" class=\"headerlink\" title=\"1.controller\"></a>1.controller</h2><ul>\n<li>集群中谁来充当controller</li>\n</ul>\n<p>每个broker启动时会向zk创建一个临时序号节点，获得的序号最小的那个broker将会作为集群中的controller，负责这么几件事：</p>\n<ul>\n<li>当集群中有一个副本的leader挂掉，需要在集群中选举出一个新的leader，选举的规则是从isr集合中最左边获得。</li>\n<li>当集群中有broker新增或减少，controller会同步信息给其他broker</li>\n<li>当集群中有分区新增或减少，controller会同步信息给其他broker</li>\n</ul>\n<h2 id=\"2-rebalance机制\"><a href=\"#2-rebalance机制\" class=\"headerlink\" title=\"2.rebalance机制\"></a>2.rebalance机制</h2><ul>\n<li><p>前提：消费组中的消费者没有指明分区来消费</p>\n</li>\n<li><p>触发的条件：当消费组中的消费者和分区的关系发生变化的时候</p>\n</li>\n<li><p>分区分配的策略：在rebalance之前，分区怎么分配会有这么三种策略</p>\n<ul>\n<li>range：根据公示计算得到每个消费消费哪几个分区：前面的消费者是分区总数&#x2F;消费者数量+1,之后的消费者是分区总数&#x2F;消费者数量</li>\n<li>轮询：大家轮着来</li>\n<li>sticky：粘合策略，如果需要rebalance，会在之前已分配的基础上调整，不会改变之前的分配情况。如果这个策略没有开，那么就要进行全部的重新分配。建议开启。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-HW和LEO\"><a href=\"#3-HW和LEO\" class=\"headerlink\" title=\"3.HW和LEO\"></a>3.HW和LEO</h2><p>LEO是某个副本最后消息的消息位置（log-end-offset）</p>\n<p>HW是已完成同步的位置。消息在写入broker时，且每个broker完成这条消息的同步后，hw才会变化。在这之前消费者是消费不到这条消息的。在同步完成之后，HW更新之后，消费者才能消费到这条消息，这样的目的是防止消息的丢失。</p>\n<p><img src=\"/../assets/img/%E6%88%AA%E5%B1%8F2021-08-24%20%E4%B8%8A%E5%8D%8811.33.41.png\"></p>\n<h1 id=\"十、Kafka中的优化问题\"><a href=\"#十、Kafka中的优化问题\" class=\"headerlink\" title=\"十、Kafka中的优化问题\"></a>十、Kafka中的优化问题</h1><h2 id=\"1-如何防止消息丢失\"><a href=\"#1-如何防止消息丢失\" class=\"headerlink\" title=\"1.如何防止消息丢失\"></a>1.如何防止消息丢失</h2><ul>\n<li>生产者：1）使用同步发送 2）把ack设成1或者all，并且设置同步的分区数&gt;&#x3D;2</li>\n<li>消费者：把自动提交改成手动提交</li>\n</ul>\n<h2 id=\"2-如何防止重复消费\"><a href=\"#2-如何防止重复消费\" class=\"headerlink\" title=\"2.如何防止重复消费\"></a>2.如何防止重复消费</h2><p>在防止消息丢失的方案中，如果生产者发送完消息后，因为网络抖动，没有收到ack，但实际上broker已经收到了。</p>\n<p>此时生产者会进行重试，于是broker就会收到多条相同的消息，而造成消费者的重复消费。</p>\n<p>怎么解决：</p>\n<ul>\n<li><p>生产者关闭重试：会造成丢消息（不建议）</p>\n</li>\n<li><p>消费者解决非幂等性消费问题：</p>\n<p>所谓的幂等性：多次访问的结果是一样的。对于rest的请求（get（幂等）、post（非幂等）、put（幂等）、delete（幂等））</p>\n<p>解决方案：</p>\n<ul>\n<li>在数据库中创建联合主键，防止相同的主键 创建出多条记录</li>\n<li>使用分布式锁，以业务id为锁。保证只有一条记录能够创建成功</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../assets/img/%E6%88%AA%E5%B1%8F2021-08-24%20%E4%B8%8A%E5%8D%8811.48.06.png\"></p>\n<h2 id=\"3-如何做到消息的顺序消费\"><a href=\"#3-如何做到消息的顺序消费\" class=\"headerlink\" title=\"3.如何做到消息的顺序消费\"></a>3.如何做到消息的顺序消费</h2><ul>\n<li>生产者：保证消息按顺序消费，且消息不丢失——使用同步的发送，ack设置成非0的值。</li>\n<li>消费者：主题只能设置一个分区，消费组中只能有一个消费者</li>\n</ul>\n<p>kafka的顺序消费使用场景不多，因为牺牲掉了性能，但是比如rocketmq在这一块有专门的功能已设计好。</p>\n<h2 id=\"4-如何解决消息积压问题\"><a href=\"#4-如何解决消息积压问题\" class=\"headerlink\" title=\"4.如何解决消息积压问题\"></a>4.如何解决消息积压问题</h2><p><img src=\"/../assets/img/%E6%88%AA%E5%B1%8F2021-08-24%20%E4%B8%8B%E5%8D%882.30.44.png\"></p>\n<h3 id=\"1）消息积压问题的出现\"><a href=\"#1）消息积压问题的出现\" class=\"headerlink\" title=\"1）消息积压问题的出现\"></a>1）消息积压问题的出现</h3><p>消息的消费者的消费速度远赶不上生产者的生产消息的速度，导致kafka中有大量的数据没有被消费。随着没有被消费的数据堆积越多，消费者寻址的性能会越来越差，最后导致整个kafka对外提供的服务的性能很差，从而造成其他服务也访问速度变慢，造成服务雪崩。</p>\n<h3 id=\"2）消息积压的解决方案\"><a href=\"#2）消息积压的解决方案\" class=\"headerlink\" title=\"2）消息积压的解决方案\"></a>2）消息积压的解决方案</h3><ul>\n<li>在这个消费者中，使用多线程，充分利用机器的性能进行消费消息。</li>\n<li>通过业务的架构设计，提升业务层面消费的性能。</li>\n<li>创建多个消费组，多个消费者，部署到其他机器上，一起消费，提高消费者的消费速度</li>\n<li>创建一个消费者，该消费者在kafka另建一个主题，配上多个分区，多个分区再配上多个消费者。该消费者将poll下来的消息，不进行消费，直接转发到新建的主题上。此时，新的主题的多个分区的多个消费者就开始一起消费了。——不常用</li>\n</ul>\n<p><img src=\"/../assets/img/%E6%88%AA%E5%B1%8F2021-08-24%20%E4%B8%8B%E5%8D%882.43.04.png\"></p>\n<h2 id=\"5-实现延时队列的效果\"><a href=\"#5-实现延时队列的效果\" class=\"headerlink\" title=\"5.实现延时队列的效果\"></a>5.实现延时队列的效果</h2><h3 id=\"1）应用场景\"><a href=\"#1）应用场景\" class=\"headerlink\" title=\"1）应用场景\"></a>1）应用场景</h3><p>订单创建后，超过30分钟没有支付，则需要取消订单，这种场景可以通过延时队列来实现</p>\n<h3 id=\"2）具体方案\"><a href=\"#2）具体方案\" class=\"headerlink\" title=\"2）具体方案\"></a>2）具体方案</h3><p><img src=\"/../assets/img/%E6%88%AA%E5%B1%8F2021-08-24%20%E4%B8%8B%E5%8D%882.58.19.png\"></p>\n<ul>\n<li>kafka中创建创建相应的主题</li>\n<li>消费者消费该主题的消息（轮询）</li>\n<li>消费者消费消息时判断消息的创建时间和当前时间是否超过30分钟（前提是订单没支付）<ul>\n<li>如果是：去数据库中修改订单状态为已取消</li>\n<li>如果否：记录当前消息的offset，并不再继续消费之后的消息。等待1分钟后，再次向kafka拉取该offset及之后的消息，继续进行判断，以此反复。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/../assets/img/kafka-queue.jpg\"></p>\n<h1 id=\"十一、Kafka-eagle监控平台\"><a href=\"#十一、Kafka-eagle监控平台\" class=\"headerlink\" title=\"十一、Kafka-eagle监控平台\"></a>十一、Kafka-eagle监控平台</h1><h2 id=\"1-搭建\"><a href=\"#1-搭建\" class=\"headerlink\" title=\"1.搭建\"></a>1.搭建</h2><ul>\n<li>去kafka-eagle官网下载压缩包</li>\n</ul>\n<p><a href=\"http://download.kafka-eagle.org/\">http://download.kafka-eagle.org/</a></p>\n<ul>\n<li>分配一台虚拟机</li>\n<li>虚拟机中安装jdk</li>\n<li>解压缩kafka-eagle的压缩包</li>\n<li>给kafka-eagle配置环境变量</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">KE_HOME</span><span class=\"token operator\">=</span>/usr/local/kafka-eagle\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$KE_HOME</span>/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>需要修改kafka-eagle内部的配置文件：<code>vim system-config.properties</code> </p>\n<p>修改里面的zk的地址和mysql的地址</p>\n</li>\n<li><p>进入到bin中，通过命令来启动</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./ke.sh start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"2-平台的使用\"><a href=\"#2-平台的使用\" class=\"headerlink\" title=\"2.平台的使用\"></a>2.平台的使用</h2><p><img src=\"/../assets/img/%E6%88%AA%E5%B1%8F2021-08-24%20%E4%B8%8B%E5%8D%883.51.40.png\"></p>\n","text":"一、为什么使用消息队列1.使用同步的通信方式来解决多个服务之间的通信同步的通信方式会存在性能和稳定性的问题。 2.使用异步的通信方式 针对于同步的通信方式来说，异步的方式，可以让上游快速成功，极大提高了系统的吞吐量。而且在分布式系统中，通过下游多个服务的分布式事务的保障，也能保障...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[{"name":"Kafka","slug":"Kafka","count":1,"path":"api/categories/Kafka.json"}],"tags":[{"name":"Kafka","slug":"Kafka","count":1,"path":"api/tags/Kafka.json"},{"name":"消息中间件","slug":"消息中间件","count":1,"path":"api/tags/消息中间件.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97\"><span class=\"toc-text\">一、为什么使用消息队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8%E5%90%8C%E6%AD%A5%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%A7%A3%E5%86%B3%E5%A4%9A%E4%B8%AA%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">1.使用同步的通信方式来解决多个服务之间的通信</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2.使用异步的通信方式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E6%B5%81%E6%B4%BE\"><span class=\"toc-text\">二、消息队列的流派</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%9C%89broker\"><span class=\"toc-text\">1. 有broker</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E6%97%A0broker\"><span class=\"toc-text\">2.无broker</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81Kafka%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">三、Kafka的基本知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Kafka%E7%9A%84%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">1.Kafka的安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#server-properties%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">server.properties核心配置详解</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-kafka%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">2.kafka中的一些基本概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%88%9B%E5%BB%BAtopic\"><span class=\"toc-text\">3.创建topic</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">4.发送消息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">5.消费消息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E7%9A%84%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">6.关于消息的细节</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E5%8D%95%E6%92%AD%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">7.单播消息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E5%A4%9A%E6%92%AD%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">8.多播消息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E6%9F%A5%E7%9C%8B%E6%B6%88%E8%B4%B9%E7%BB%84%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">9. 查看消费组的详细信息</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81Kafka%E4%B8%AD%E4%B8%BB%E9%A2%98%E5%92%8C%E5%88%86%E5%8C%BA%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">四、Kafka中主题和分区的概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%B8%BB%E9%A2%98Topic\"><span class=\"toc-text\">1.主题Topic</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%88%86%E5%8C%BAPartition\"><span class=\"toc-text\">2.分区Partition</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E5%88%86%E5%8C%BA%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1）分区的概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%88%86%E5%8C%BA%E7%9A%84%E4%B8%BB%E9%A2%98\"><span class=\"toc-text\">2）创建多分区的主题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-kafka%E4%B8%AD%E6%B6%88%E6%81%AF%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">3.kafka中消息日志文件中保存的内容</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81Kafka%E9%9B%86%E7%BE%A4%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">五、Kafka集群操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%90%AD%E5%BB%BAkafka%E9%9B%86%E7%BE%A4%EF%BC%88%E4%B8%89%E4%B8%AAbroker%EF%BC%89\"><span class=\"toc-text\">1.搭建kafka集群（三个broker）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%89%AF%E6%9C%AC%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">2.副本的概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%85%B3%E4%BA%8E%E9%9B%86%E7%BE%A4%E6%B6%88%E8%B4%B9\"><span class=\"toc-text\">3.关于集群消费</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E5%90%91%E9%9B%86%E7%BE%A4%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%EF%BC%9A\"><span class=\"toc-text\">1）向集群发送消息：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E4%BB%8E%E9%9B%86%E7%BE%A4%E4%B8%AD%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">2）从集群中消费消息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%EF%BC%89%E6%8C%87%E5%AE%9A%E6%B6%88%E8%B4%B9%E7%BB%84%E6%9D%A5%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">3）指定消费组来消费消息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%EF%BC%89%E5%88%86%E5%8C%BA%E5%88%86%E6%B6%88%E8%B4%B9%E7%BB%84%E7%9A%84%E9%9B%86%E7%BE%A4%E6%B6%88%E8%B4%B9%E4%B8%AD%E7%9A%84%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">4）分区分消费组的集群消费中的细节</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81kafka%E7%9A%84java%E5%AE%A2%E6%88%B7%E7%AB%AF-%E7%94%9F%E4%BA%A7%E8%80%85%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">六、kafka的java客户端-生产者的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%94%9F%E4%BA%A7%E8%80%85%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">1.生产者的基本实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E7%94%9F%E4%BA%A7%E8%80%85%E7%9A%84%E5%90%8C%E6%AD%A5%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">2.生产者的同步发送消息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E7%94%9F%E4%BA%A7%E8%80%85%E7%9A%84%E5%BC%82%E6%AD%A5%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">3.生产者的异步发送消息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%AD%E7%9A%84ack%E7%9A%84%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">4.生产者中的ack的配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA\"><span class=\"toc-text\">5.关于消息发送的缓冲区</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81Java%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">七、Java客户端消费者的实现细节</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">1.消费者的基本实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%85%B3%E4%BA%8E%E6%B6%88%E8%B4%B9%E8%80%85%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E5%92%8C%E6%89%8B%E5%8A%A8%E6%8F%90%E4%BA%A4offset\"><span class=\"toc-text\">2.关于消费者自动提交和手动提交offset</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E6%8F%90%E4%BA%A4%E7%9A%84%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">1）提交的内容</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4\"><span class=\"toc-text\">2）自动提交</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%EF%BC%89%E6%89%8B%E5%8A%A8%E6%8F%90%E4%BA%A4\"><span class=\"toc-text\">3）手动提交</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E9%95%BF%E8%BD%AE%E8%AF%A2poll%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">3.长轮询poll消息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E5%81%A5%E5%BA%B7%E7%8A%B6%E6%80%81%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">4.消费者的健康状态检查</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E6%8C%87%E5%AE%9A%E5%88%86%E5%8C%BA%E5%92%8C%E5%81%8F%E7%A7%BB%E9%87%8F%E3%80%81%E6%97%B6%E9%97%B4%E6%B6%88%E8%B4%B9\"><span class=\"toc-text\">5.指定分区和偏移量、时间消费</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E6%96%B0%E6%B6%88%E8%B4%B9%E7%BB%84%E7%9A%84%E6%B6%88%E8%B4%B9offset%E8%A7%84%E5%88%99\"><span class=\"toc-text\">6.新消费组的消费offset规则</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AB%E3%80%81Springboot%E4%B8%AD%E4%BD%BF%E7%94%A8Kafka\"><span class=\"toc-text\">八、Springboot中使用Kafka</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">1.引入依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E7%BC%96%E5%86%99%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2.编写配置文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E7%BC%96%E5%86%99%E6%B6%88%E6%81%AF%E7%94%9F%E4%BA%A7%E8%80%85\"><span class=\"toc-text\">3.编写消息生产者</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E7%BC%96%E5%86%99%E6%B6%88%E8%B4%B9%E8%80%85\"><span class=\"toc-text\">4.编写消费者</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%AD%E9%85%8D%E7%BD%AE%E6%B6%88%E8%B4%B9%E4%B8%BB%E9%A2%98%E3%80%81%E5%88%86%E5%8C%BA%E5%92%8C%E5%81%8F%E7%A7%BB%E9%87%8F\"><span class=\"toc-text\">5.消费者中配置消费主题、分区和偏移量</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B9%9D%E3%80%81kafka%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84controller%E3%80%81rebalance%E3%80%81HW\"><span class=\"toc-text\">九、kafka集群中的controller、rebalance、HW</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-controller\"><span class=\"toc-text\">1.controller</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-rebalance%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">2.rebalance机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-HW%E5%92%8CLEO\"><span class=\"toc-text\">3.HW和LEO</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8D%81%E3%80%81Kafka%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">十、Kafka中的优化问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1\"><span class=\"toc-text\">1.如何防止消息丢失</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9\"><span class=\"toc-text\">2.如何防止重复消费</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E6%B6%88%E6%81%AF%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9\"><span class=\"toc-text\">3.如何做到消息的顺序消费</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E6%B6%88%E6%81%AF%E7%A7%AF%E5%8E%8B%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">4.如何解决消息积压问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E6%B6%88%E6%81%AF%E7%A7%AF%E5%8E%8B%E9%97%AE%E9%A2%98%E7%9A%84%E5%87%BA%E7%8E%B0\"><span class=\"toc-text\">1）消息积压问题的出现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E6%B6%88%E6%81%AF%E7%A7%AF%E5%8E%8B%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">2）消息积压的解决方案</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E7%9A%84%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">5.实现延时队列的效果</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">1）应用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E5%85%B7%E4%BD%93%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">2）具体方案</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8D%81%E4%B8%80%E3%80%81Kafka-eagle%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0\"><span class=\"toc-text\">十一、Kafka-eagle监控平台</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">1.搭建</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2.平台的使用</span></a></li></ol></li></ol>","author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"SpringSecurity","uid":"fceed54d2b78e915f81cbddb878dcc7f","slug":"SpringSecurity","date":"2022-06-09T08:30:49.418Z","updated":"2022-06-11T08:30:07.290Z","comments":true,"path":"api/articles/SpringSecurity.json","keywords":null,"cover":[],"text":" 0. 简介Spring Security 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架Shiro，它提供了更丰富的功能，社区资源也比Shiro丰富。 一般来说中大型的项目都是使用SpringSecurity 来做安全框架。小项目有Shiro的比较多，因为相...","link":"","photos":[],"count_time":{"symbolsCount":"53k","symbolsTime":"48 mins."},"categories":[{"name":"SpringSecurity","slug":"SpringSecurity","count":1,"path":"api/categories/SpringSecurity.json"}],"tags":[{"name":"java","slug":"java","count":11,"path":"api/tags/java.json"},{"name":"SpringSecurity","slug":"SpringSecurity","count":1,"path":"api/tags/SpringSecurity.json"},{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Stream流","uid":"090d1240eb81aec2da7fdd1a11b68406","slug":"Java8 Stream详解","date":"2022-07-09T07:49:18.688Z","updated":"2022-07-09T07:50:22.787Z","comments":true,"path":"api/articles/Java8 Stream详解.json","keywords":null,"cover":null,"text":"JDK8 Stream概念 Stream是Java8 API的新成员，它允许以声明性方式处理数据集合 。 特点 （1）代码简洁：函数式编程写出的代码简洁且意图明确，使用stream接口让你从此告别for循环。 （2）多核友好：Java函数式编程使得编写并行程序从未如此简单，你需要...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"java","slug":"java","count":1,"path":"api/categories/java.json"}],"tags":[{"name":"java","slug":"java","count":11,"path":"api/tags/java.json"},{"name":"Stream","slug":"Stream","count":1,"path":"api/tags/Stream.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}