{"title":"SpringBoot源码分析","uid":"a26dba1745837d214d39192aa8ca3207","slug":"SpringBoot源码分析","date":"2022-06-11T09:02:18.830Z","updated":"2022-07-09T07:50:22.819Z","comments":true,"path":"api/articles/SpringBoot源码分析.json","keywords":null,"cover":[],"content":"<h1 id=\"1-如何搭建SpringBoot源码调试环境\"><a href=\"#1-如何搭建SpringBoot源码调试环境\" class=\"headerlink\" title=\"1 如何搭建SpringBoot源码调试环境\"></a>1 如何搭建SpringBoot源码调试环境</h1><h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h2><p>这是 SpringBoot2.1 源码分析专题的第一篇文章，主要讲如何来搭建我们的源码阅读调试环境。如果有经验的小伙伴们可以略过此篇文章。</p>\n<p><a name=\"CZOsT\"></a></p>\n<h2 id=\"2-环境安装要求\"><a href=\"#2-环境安装要求\" class=\"headerlink\" title=\"2 环境安装要求\"></a>2 环境安装要求</h2><ul>\n<li>IntelliJ IDEA</li>\n<li>JDK1.8</li>\n<li>Maven3.5 以上</li>\n</ul>\n<p><a name=\"Fjbhk\"></a></p>\n<h2 id=\"3-从-Github-上将-SpringBoot-源码项目下载下来\"><a href=\"#3-从-Github-上将-SpringBoot-源码项目下载下来\" class=\"headerlink\" title=\"3 从 Github 上将 SpringBoot 源码项目下载下来\"></a>3 从 Github 上将 SpringBoot 源码项目下载下来</h2><p>首先提供<strong>SpringBoot2.1.0</strong>的 github 地址： <a href=\"https://link.juejin.cn/?target=https://github.com/spring-projects/spring-boot/tree/v2.1.0.RELEASE\">github.com&#x2F;spring-proj…</a></p>\n<p>因为要进行阅读源码和分析源码项目，我们是不是要在里面写一些注释帮助我们阅读理解源码，因此需要将 SpringBoot 源码项目 fork 到自己的 github 仓库中，然后再利用<strong>git clone url</strong>命令将已经 fork 到自己 github 仓库的 SpringBoot 源码拉取下来即可。 但由于以上方式往往很慢，通常会超时，所以笔者直接将 SpringBoot 项目直接下载下来，然后再导入 IDEA 中。</p>\n<p><img src=\"/../assets/1648015534073-21b086f5-85a7-410f-b61b-1a234700fae6.png\"></p>\n<p><a name=\"NpS8q\"></a></p>\n<h2 id=\"4-将-SpringBoot-源码项目导入到-IDEA-中\"><a href=\"#4-将-SpringBoot-源码项目导入到-IDEA-中\" class=\"headerlink\" title=\"4 将 SpringBoot 源码项目导入到 IDEA 中\"></a>4 将 SpringBoot 源码项目导入到 IDEA 中</h2><p>将刚才下载的 <code>spring-boot2.1.0.RELEASE</code> 项目选择 maven 方式导入到 IDEA 中，然后一直 next 即可导入完成，注意选择 JDK 版本是 1.8，maven 版本是 3.5+。</p>\n<p><img src=\"/../assets/1648015534142-f80fd0f3-b385-463c-9199-156bc534e516.png\"></p>\n<p>此时下载 maven 依赖是一个漫长的等待过程，建议 maven 没有配置（阿-里-云）仓库的小伙伴们配置一下，这样下载速度会快很多。参考<a href=\"https://link.juejin.cn/?target=https://blog.csdn.net/zhuzj12345/article/details/93200211\">配置 maven 使用（阿-里-云）仓库</a>进行配置即可。</p>\n<p><a name=\"gOk6Y\"></a></p>\n<h2 id=\"5-编译构建-SpringBoot-源码项目\"><a href=\"#5-编译构建-SpringBoot-源码项目\" class=\"headerlink\" title=\"5 编译构建 SpringBoot 源码项目\"></a>5 编译构建 SpringBoot 源码项目</h2><p>此时导入项目后，我们进行编译构建 SpringBoot 源码项目了，在构建之前做两个配置：</p>\n<p>1、我们要禁用 maven 的代码检查，在根 <code>pom.xml</code> 中增加一下配置即可，如下图：</p>\n<p><img src=\"/../assets/1648015534019-1fb13740-9c32-4f20-b743-2887504aaa83.png\"></p>\n<p>2、可能有的小伙伴们的 <code>pom.xml</code> 文件的 project 标签上显示<code>java.lang.OutOfMemoryError</code>错误，这是因为 IDEA 里的 Maven 的 importer 设置的 JVM 最大堆内存过小而导致的，如下图,此时可参考<a href=\"https://blog.csdn.net/w605283073/article/details/85107497\">Maven 依赖包导入错误（IntelliJ IDEA）</a>解决即可。</p>\n<p><img src=\"/../assets/1648015534093-a1879ed9-dece-4aa4-bc3c-156b056bc945.png\"></p>\n<p>进行了上面的两点配置后，此时我们就可以直接执行以下 maven 命令来编译构建源码项目了。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mvn clean <span class=\"token function\">install</span> -DskipTests -Pfast<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/../assets/1648015534027-4d50f201-23e0-4be7-b2e7-9e3b58beed52.png\"> 此时又是漫长的等待，我这里等待 5 分钟左右就显示构建成功了，如下图：</p>\n<p><img src=\"/../assets/1648015535064-26985048-c8fa-4ce9-a572-6537568c9a3e.png\"></p>\n<p><a name=\"dEkL6\"></a></p>\n<h2 id=\"6-运行-SpringBoot-自带的-sample\"><a href=\"#6-运行-SpringBoot-自带的-sample\" class=\"headerlink\" title=\"6 运行 SpringBoot 自带的 sample\"></a>6 运行 SpringBoot 自带的 sample</h2><p>因为 SpringBoot 源码中的 <code>spring-boot-samples</code> 模块自带了很多 DEMO 样例，我们可以利用其中的一个 sample 来测试运行刚刚构建的 springboot 源码项目即可。但此时发现 <code>spring-boot-samples</code> 模块是灰色的，如下图：</p>\n<p><img src=\"/../assets/1648015535132-9eb1fd0e-ffc6-4460-bf10-49b5e1ea96d3.png\"></p>\n<p>这是因为 <code>spring-boot-samples</code> 模块没有被添加到根 <code>pom.xml</code> 中，此时将其添加到根 <code>pom.xml</code> 中即可，增加如下配置，如下图：</p>\n<p><img src=\"/../assets/1648015535294-8017dfaa-bc69-4e85-9967-2647c5870496.png\"> 此时我们挑选 <code>spring-boot-samples</code> 模块下的 <code>spring-boot-sample-tomcat</code> 样例项目来测试好了，此时启动<code>SampleTomcatApplication</code>的<code>main</code>函数，启动成功界面如下：</p>\n<p><img src=\"/../assets/1648015535281-9c809dce-0845-4950-a412-bc1f8bd0eef5.png\"> 然后我们再在浏览器发送一个 HTTP 请求，此时可以看到服务端成功返回响应，说明此时 SpringBoot 源码环境就已经构建成功了，接下来我们就可以进行调试了，如下图：</p>\n<p><img src=\"/../assets/1648015535893-204a6d87-875c-4ea3-b1a2-1ec7020768ba.png\"></p>\n<p><a name=\"o43vH\"></a></p>\n<h2 id=\"7-动手实践环节\"><a href=\"#7-动手实践环节\" class=\"headerlink\" title=\"7 动手实践环节\"></a>7 动手实践环节</h2><p>前面已经成功构建了 SpringBoot 的源码阅读环境，小伙伴们记得自己动手搭建一套属于自己的 SpringBoot 源码调试环境哦，阅读源码动手调试很重要，嘿嘿。</p>\n<h1 id=\"2-如何分析SpringBoot源码模块及结构\"><a href=\"#2-如何分析SpringBoot源码模块及结构\" class=\"headerlink\" title=\"2 如何分析SpringBoot源码模块及结构\"></a>2 如何分析SpringBoot源码模块及结构</h1><p>注：该源码分析对应SpringBoot版本为<strong>2.1.0.RELEASE</strong></p>\n<p><a name=\"asSrL\"></a></p>\n<h2 id=\"1-前言-1\"><a href=\"#1-前言-1\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h2><p>前面搭建好了自己本地的SpringBoot源码调试环境后，此时我们不要急着下手进入到具体的源码调试细节中，<strong>刚开始阅读源码，此时我们一定要对项目结构等有一个整体的认识，然后再进行源码分析调试</strong>。推荐阅读下笔者之前写的的<a href=\"https://juejin.cn/post/6844904067936813063\">分析开源项目源码，我们该如何入手分析？</a>一文，干货满满哦。</p>\n<p><a name=\"ByqHX\"></a></p>\n<h2 id=\"2-SpringBoot源码模块一览\"><a href=\"#2-SpringBoot源码模块一览\" class=\"headerlink\" title=\"2 SpringBoot源码模块一览\"></a>2 SpringBoot源码模块一览</h2><p>我们先来对SpringBoot的源码模块来一个大致的了解，如下图：</p>\n<p><img src=\"/../assets/1648015560962-6ef3dbde-9bbe-4ce8-9de7-3b9d19e1d43e.png\"></p>\n<p>从上图可以看到，主要有以下四个模块：</p>\n<ul>\n<li><code>**spring-boot-project**</code>：整个SpringBoot框架全部功能在这个模块实现，SpringBoot项目95%的代码都在这里实现，源码总共有25万行左右。</li>\n<li><code>**spring-boot-samples**</code>：这个是SpringBoot给小伙伴们赠送的福利，里面包含了各种各样使用SpringBoot的简单demo，我们调试阅读源码的时候可以充分利用该模块。</li>\n<li><code>**spring-boot-sample-invoker**</code>：这个模块应该是跟sample模块有关，注意根pom.xml中有这么一句话：<code>Samples are built via the invoker plugin</code>，该模块无代码。</li>\n<li><code>**spring-boot-tests**</code>：这个模块SpringBoot的测试模块，跟部署测试和集成测试有关。</li>\n</ul>\n<p>因为SpringBoot的全部功能在spring-boot-project模块实现，因此下面重点来介绍下 spring-boot-project 模块。</p>\n<p><a name=\"sLflZ\"></a></p>\n<h2 id=\"3-spring-boot-project源码模块详解\"><a href=\"#3-spring-boot-project源码模块详解\" class=\"headerlink\" title=\"3 spring-boot-project源码模块详解\"></a>3 spring-boot-project源码模块详解</h2><p>先来看下 <code>spring-boot-project</code> 整体模块结构，如下图，然后我们再逐个来介绍：</p>\n<p><img src=\"/../assets/1648015561011-039fdcf7-736b-4e6b-a135-8faf5f0db17a.png\"></p>\n<p><a name=\"TEH0D\"></a></p>\n<p><strong>1) spring-boot-parent</strong></p>\n<p>这个模块没有代码，是spring-boot模块的父项目，被其他子模块继承。</p>\n<p><a name=\"YL2rP\"></a></p>\n<p><strong>2) spring-boot</strong></p>\n<p>这个模块是SpringBoot项目的核心，可以说一些基础核心的功能都在这里实现，为SpringBoot的其他模块组件功能提供了支持，主要包括以下核心功能：</p>\n<ul>\n<li><code>SpringApplication</code>类，这个是SpringBoot的启动类，提供了一个静态的<code>run</code>方法来启动程序，该类主要用来创建并且刷新Spring容器<code>ApplicationContext</code>.</li>\n<li>支持选择不同的容器比如Tomcat,Jetty等来作为应用的嵌入容器，这个是SpringBoot的新特性之一。</li>\n<li>外部配置支持，这个指的是我们执行<code>java -jar xxx.jar</code>命令时可以带一些参数，比如执行<code>java -jar demo.jar --server.port=8888</code>来将应用端口修改为8888.</li>\n<li>该模块内置了一些SpringBoot启动时的生命周期事件和一些容器初始化器(<code>ApplicationContext</code> initializers)，来执行一些SpringBoot启动时的初始化逻辑。</li>\n</ul>\n<p><a name=\"cxEyR\"></a></p>\n<p><strong>3) spring-boot-autoconfigure</strong></p>\n<p>这个模块跟SpringBoot的自动配置有关，也是SpringBoot的新特性之一。比如SpringBoot能基于类路径来自动配置某个项目模块，自动配置最为关键的注解是<code>@EnableAutoConfiguration</code>,这个注解能触发Spring上下文的自动配置。另外一个重要的注解是<code>@Conditional</code>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>举个栗子，若<code>HSQLDB</code>在项目的类路径中，且我们没有配置任何其他数据库的连接，此时自动配置就会自动根据类路径来创建相应的<code>bean</code>。</p></blockquote>\n<p>除了根据类路径来进行自动配置外，还有根据容器中是否存在某个bean等方式来进行自动配置，这里不会进入到具体细节中。</p>\n<p><strong>4) spring-boot-starters</strong></p>\n<p>这个模块是跟SpringBoot的起步依赖有关，也是SpringBoot的新特性之一。SpringBoot通过提供众多起步依赖降低项目依赖的复杂度。起步依赖其实就是利用maven项目模型将其他相关的依赖给聚合起来，里面各种依赖的版本号都给定义好，避免用户在引入依赖时出现各种版本冲突，方便了我们的使用。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>举个栗子，我们要用到activemq时，此时可以直接引入<code>spring-boot-starter-activemq</code>起步依赖即可，若SpringBoot官网或第三方组织没有提供相应的SpringBoot起步依赖时，此时我们可以进行定制自己的起步依赖。</p></blockquote>\n<p>注意，该模块没有代码，主要是通过maven的pom.xml来组织各种依赖。</p>\n<p><strong>5) spring-boot-cli</strong></p>\n<p>Spring Boot CLI是一个命令行工具，如果您想使用Spring快速开发，可以使用它。它允许您运行Groovy脚本，这意味着您有一个熟悉的类似Java的语法，而没有那么多样板代码。您还可以引导一个新项目或编写自己的命令。</p>\n<p><a name=\"ALcUL\"></a></p>\n<p><strong>6) spring-boot-actuator</strong></p>\n<p>这个跟SpringBoot的监控有关，也是SpringBoot的新特性之一。可以通过HTTP端点或JMX等来管理和监控应用。审计、运行状况和度量收集可以自动应用到应用程序。这个监控模块是开箱即用的，提供了一系列端点包括<code>HealthEndpoint</code>, <code>EnvironmentEndpoint</code>和<code>BeansEndpoint</code>等端点。</p>\n<p><a name=\"VpGK4\"></a></p>\n<p><strong>7) spring-boot-actuator-autoconfigure</strong></p>\n<p>这个模块为监控模块提供自动配置的功能，通常也是根据类路径来进行配置。比如<code>Micrometer</code>存在于类路径中，那么将会自动配置<code>MetricsEndpoint</code>。</p>\n<p><strong><a name=\"psqIr\"></a></strong></p>\n<p><strong>8) spring-boot-test</strong></p>\n<p>这个模式是spring-boot的跟测试有关的模块，包含了一些帮助我们测试的核心类和注解（比如<code>@SpringBootTest</code>）。</p>\n<p><a name=\"llA6Y\"></a></p>\n<p><strong>9) spring-boot-dependencies</strong></p>\n<p>这个模块也没有代码，主要是定义了一些SpringBoot的maven相关的一些依赖及其版本。</p>\n<p><a name=\"fZrek\"></a></p>\n<p><strong>10) spring-boot-devtools</strong></p>\n<p>这个模块跟SpringBoot的热部署有关，即修改代码后无需重启应用即生效。</p>\n<p><a name=\"bOmQm\"></a></p>\n<p><strong>11) spring-boot-docs</strong></p>\n<p>这个模块应该是跟文档相关的模块。</p>\n<p><a name=\"FB0HM\"></a></p>\n<p><strong>12) spring-boot-properties-migrator</strong></p>\n<p>看到 migrator 这个单词，估计就是跟项目迁移有关，没有去细 究。</p>\n<p><a name=\"U9DBo\"></a></p>\n<p><strong>13) spring-boot-test-autoconfigure</strong></p>\n<p>这个模块一看就是跟SpringBoot的测试的自动配置有关。</p>\n<p><a name=\"aXAI0\"></a></p>\n<p><strong>14) spring-boot-tools</strong></p>\n<p>这个模块一看就是SpringBoot的工具相关的模块，提供了加载，maven插件,metadata和后置处理相关的支持。</p>\n<p>上面介绍了这么多spring-boot模块下的子模块，不用慌，我们要进行解读的模块不多，我们真正要看的模块有<code>spring-boot</code>，<code>spring-boot-autoconfigure</code>，<code>spring-boot-starters</code>和<code>spring-boot-actuator</code>模块。</p>\n<p><a name=\"EEVLH\"></a></p>\n<h2 id=\"4-用一个思维导图来总结下SpringBoot源码项目的脉络\"><a href=\"#4-用一个思维导图来总结下SpringBoot源码项目的脉络\" class=\"headerlink\" title=\"4 用一个思维导图来总结下SpringBoot源码项目的脉络\"></a>4 用一个思维导图来总结下SpringBoot源码项目的脉络</h2><p><img src=\"/../assets/1648015561256-24cae478-49d6-4dbd-85d1-7e8c68cf4e8f.png\"></p>\n<p><a name=\"JYdH3\"></a></p>\n<h2 id=\"5-SpringBoot模块之间的pom关系详解\"><a href=\"#5-SpringBoot模块之间的pom关系详解\" class=\"headerlink\" title=\"5 SpringBoot模块之间的pom关系详解\"></a>5 SpringBoot模块之间的pom关系详解</h2><p>前面弄清楚了SpringBoot的各个模块的具体功能，此时我们来看下SpringBoot模块的pom之间的关系是怎样的，因为项目是通过maven构建的，因此还是有必要去研究下这块关系滴。</p>\n<p>先看SpringBoot源码项目的pom关系，如下图：</p>\n<p><img src=\"/../assets/1648015561039-3be1a0df-b88c-4321-ac14-db1d8ba5fc07.png\"> 根据上图可得出以下结论：</p>\n<ul>\n<li><code>spring-boot-build(pom.xml)</code>是项目的根pom，其子pom有<code>spring-boot-project(pom.xml)</code>和<code>spring-boot-dependencies(pom.xml)</code>；</li>\n<li><code>spring-boot-dependencies(pom.xml)</code>主要定义了SpringBoot项目的各种依赖及其版本，其子pom有<code>spring-boot-parent(pom.xml)</code>和<code>spring-boot-starter-parent(pom.xml)</code>；</li>\n<li><code>spring-boot-project(pom.xml)</code>起到聚合module的作用，其子模块并不继承于它，而是继承于<code>spring-boot-parent(pom.xml)</code>；</li>\n<li><code>spring-boot-parent(pom.xml)</code>是<code>spring-boot-project(pom.xml)</code>的子module，但继承的父pom为<code>spring-boot-dependencies(pom.xml)</code>，其定义了一些properties等相关的东西。其子pom为<code>spring-boot-project(pom.xml)</code>的子module（注意除去<code>spring-boot-dependencies(pom.xml)</code>），比如有<code>spring-boot(pom.xml)</code>,<code>spring-boot-starters(pom.xml)</code>和<code>spring-boot-actuator(pom.xml)</code>等；</li>\n<li><code>spring-boot-starters(pom.xml)</code>是所有具体起步依赖的父pom，其子pom有<code>spring-boot-starter-data-jdbc(pom.xml)</code>和<code>spring-boot-starter-data-redis(pom.xml)</code>等。</li>\n<li><code>spring-boot-starter-parent(pom.xml)</code>，是我们的所有具体SpringBoot项目的父pom，比如SpringBoot自带的样例的<code>spring-boot-samples(pom.xml)</code>是继承于它的。</li>\n</ul>\n<p>SpringBoot的各模块之间的pom关系有点复杂，确实有点绕，如果看完上面的图片和解释还是不太清楚的话，建议小伙伴们自己打开idea的项目，逐个去捋一下。总之记得SpringBoot的一些父pom无非是做了一些版本管理，聚合模块之间的事情。<br><a name=\"qq7cx\"></a></p>\n<h2 id=\"6-小结\"><a href=\"#6-小结\" class=\"headerlink\" title=\"6 小结\"></a>6 小结</h2><p>好了，前面已经把SpringBoot源码项目的各个模块的功能和模块pom之间的关系给捋清楚了，总之刚开始分析项目源码，有一个整体的大局观很重要。</p>\n<p>本来下节想先写SpringBoot的启动流程分析的，但由于之前研究过启动流程，所以就把启动流程分析放后点写了。下一节先对SpringBoot的新特性–自动配置的源码撸起来，因此下一节让我们先来揭开SpringBoot自动配置背后神秘的面纱吧，嘿嘿🤭。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://github.com/spring-projects/spring-boot/tree/v2.1.0.RELEASE\">https://github.com/spring-projects/spring-boot/tree/v2.1.0.RELEASE</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#cli\">https://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#cli</a></li>\n</ul>\n<h1 id=\"3-SpringBoot自动配置的条件注解原理\"><a href=\"#3-SpringBoot自动配置的条件注解原理\" class=\"headerlink\" title=\"3 SpringBoot自动配置的条件注解原理\"></a>3 SpringBoot自动配置的条件注解原理</h1><p><a name=\"uKI0p\"></a></p>\n<h2 id=\"1-前言-2\"><a href=\"#1-前言-2\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h2><p>上一篇，我们分析了 SpringBoot 源码结构及各个模块 pom 之间的关系后，那么此篇开始就开始解开 SpringBoot 新特性之一–自动配置的神秘面纱了。因为 SpringBoot 自动配置原理是基于其大量的条件注解<code>ConditionalOnXXX</code>，因此，本节我们先来撸下 Spring 的条件注解的相关源码。</p>\n<p><a name=\"kWh9E\"></a></p>\n<h2 id=\"2-SpringBoot-的派生条件注解\"><a href=\"#2-SpringBoot-的派生条件注解\" class=\"headerlink\" title=\"2 SpringBoot 的派生条件注解\"></a>2 SpringBoot 的派生条件注解</h2><p>我们都知道，SpringBoot 自动配置是需要满足相应的条件才会自动配置,因此 SpringBoot 的自动配置大量应用了条件注解<code>ConditionalOnXXX</code>。如下图：</p>\n<p><img src=\"/../assets/1648015631103-b3be6d33-a2dd-427a-a7af-b1342193ab87.png\"></p>\n<p>那么上图的条件注解如何使用呢？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>举个栗子，我们来看下如何使用<code>@ConditionalOnClass</code>和<code>@ConditionalOnProperty</code>这两个注解，先看下图代码：</p></blockquote>\n<p><img src=\"/../assets/1648015631024-595bfbcc-6056-4c35-bd6a-7f69f9420734.png\"> <code>HelloWorldEnableAutoConfiguration</code>这个自动配置类应用了<code>@ConditionalOnClass</code>和<code>ConditionalOnProperty</code>两个条件注解，那么只有在满足:<code>classpath</code>中存在<code>HelloWorldComponent.class</code>和配置了<code>hello.world.name</code>和<code>hello.world.age</code>属性<strong>这两个条件</strong>的情况下才会创建<code>HelloWorldComponent</code>这个<code>bean</code>。</p>\n<p>其实 SpringBoot 的<code>@ConditionalOnXXX</code>等条件注解都是派生注解，那么什么是派生注解呢？ 就拿上面的栗子来说，以<code>@ConditionalOnClass(HelloWorldComponent.class)</code>为例，我们打开<code>ConditionalOnClass</code>注解源码，如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Conditional</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OnClassCondition</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">ConditionalOnClass</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Class</span> <span class=\"token operator\">&lt;</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>@ConditionalOnClass</code>注解上面又标注了<code>@Conditional(OnClassCondition.class)</code>注解，因此<code>@ConditionalOnClass</code>是<code>@Conditional</code>的派生注解，<code>@Conditional(OnClassCondition.class)</code>和<code>@ConditionalOnClass</code>注解是等价的，即这两个注解标注在某个配置类上的效果是等价的。</p>\n<p>而 SpringBoot 的自动配置原理正是建立在这些大量的派生条件注解<code>@ConditionalOnXXX</code>之上，而这些条件注解的原理跟 Spring 的 <code>Condition</code> 接口有关。因此我们先来研究下 <code>Condition</code> 接口的相关源码。</p>\n<p><a name=\"pJ72D\"></a></p>\n<h2 id=\"3-Condition-接口\"><a href=\"#3-Condition-接口\" class=\"headerlink\" title=\"3 Condition 接口\"></a>3 Condition 接口</h2><p><a name=\"faF37\"></a></p>\n<h3 id=\"3-1-Condition-接口源码分析\"><a href=\"#3-1-Condition-接口源码分析\" class=\"headerlink\" title=\"3.1 Condition 接口源码分析\"></a>3.1 Condition 接口源码分析</h3><p>分析 <code>Condition</code> 接口源码前先看下如何自定义<code>ConditionalOnXXX</code>注解,举个栗子，比如自定义一个<code>@ConditionalOnLinux</code>注解，该注解只有在其属性<code>environment</code>是”linux”才会创建相关的 bean。定义了以下代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 实现spring 的Condition接口，并且重写matches()方法，如果@ConditionalOnLinux的注解属性environment是linux就返回true\n *\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LinuxCondition</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Condition</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AnnotatedTypeMetadata</span> metadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 获得注解@ConditionalOnLinux的所有属性</span>\n        <span class=\"token class-name\">List</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span> <span class=\"token class-name\">AnnotationAttributes</span> <span class=\"token punctuation\">></span></span> allAnnotationAttributes <span class=\"token operator\">=</span> <span class=\"token function\">annotationAttributesFromMultiValueMap</span><span class=\"token punctuation\">(</span>\n            metadata<span class=\"token punctuation\">.</span><span class=\"token function\">getAllAnnotationAttributes</span><span class=\"token punctuation\">(</span>\n                <span class=\"token class-name\">ConditionalOnLinux</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationAttributes</span> annotationAttributes<span class=\"token operator\">:</span> allAnnotationAttributes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 获得注解@ConditionalOnLinux的environment属性</span>\n            <span class=\"token class-name\">String</span> environment <span class=\"token operator\">=</span> annotationAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"environment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 若environment等于linux，则返回true</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"linux\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Conditional</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LinuxCondition</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">ConditionalOnLinux</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 标注是哪个环境</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">environment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConditionConfig</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 只有`@ConditionalOnLinux`的注解属性`environment`是\"linux\"时才会创建bean</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@ConditionalOnLinux</span><span class=\"token punctuation\">(</span>environment <span class=\"token operator\">=</span> <span class=\"token string\">\"linux\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Environment</span> <span class=\"token function\">linuxEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinuxEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的代码我们捋一下：</p>\n<ol>\n<li><code>LinuxCondition</code>实现了<code>Condition</code>接口并实现了<code>matches</code>方法，而<code>matches</code>方法则判断<code>@ConditionalOnLinux</code>的注解属性<code>environment</code>是否”linux”，是则返回 true，否则 false。</li>\n<li>然后我们再定义了一个注解<code>@ConditionalOnLinux</code>，这个注解是<code>@Conditional</code>的派生注解，与<code>@Conditional(LinuxCondition.class)</code>等价，注意<code>@ConditionalOnLinux</code>注解定义了一个属性<code>environment</code>。而我们最终可以利用<code>LinuxCondition</code>的<code>matches</code>方法中的参数<code>AnnotatedTypeMetadata</code>来获取<code>@ConditionalOnLinux</code>的注解属性<code>environment</code>的值，从而用来判断值是否为 linux”。</li>\n<li>最后我们又定义了一个配置类<code>ConditionConfig</code>，在<code>linuxEnvironment</code>方法上标注了<code>@ConditionalOnLinux(environment = &quot;linux&quot;)</code>。因此，这里只有 <code>LinuxCondition</code>的<code>matches</code>方法返回 true 才会创建<code>bean</code>。</li>\n</ol>\n<p>学会了如何自定义<code>@ConditionalOnXXX</code>注解后，我们现在再来看下<code>Condition</code>接口的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Condition</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AnnotatedTypeMetadata</span> metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>Condition</code> 接口主要有一个<code>matches</code>方法，该方法决定了是否要注册相应的<code>bean</code>对象。其中<code>matches</code>方法中有两个参数，参数类型分别是<code>ConditionContext</code>和<code>AnnotatedTypeMetadata</code>，这两个参数非常重要。它们分别用来获取一些环境信息和注解元数据从而用在<code>matches</code>方法中判断是否符合条件。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>ConditionContext</code>，顾名思义，主要是跟<code>Condition</code>的上下文有关，主要用来获取<code>Registry</code>,<code>BeanFactory</code>,<code>Environment</code>,<code>ResourceLoader</code>和<code>ClassLoader</code>等。那么获取这些用来干什么呢？举个栗子，比如<code>OnResourceCondition</code>需要靠<code>ConditionContext</code>来获取<code>ResourceLoader</code>来加载指定资源，<code>OnClassCondition</code>需要靠<code>ConditionContext</code>来获取<code>ClassLoader</code>来加载指定类等，下面看下其源码：</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ConditionContext</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">BeanDefinitionRegistry</span> <span class=\"token function\">getRegistry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Nullable</span>\n    <span class=\"token class-name\">ConfigurableListableBeanFactory</span> <span class=\"token function\">getBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Environment</span> <span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ResourceLoader</span> <span class=\"token function\">getResourceLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Nullable</span>\n    <span class=\"token class-name\">ClassLoader</span> <span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>AnnotatedTypeMetadata</code>，这个跟注解元数据有关，利用<code>AnnotatedTypeMetadata</code>可以拿到某个注解的一些元数据，而这些元数据就包含了某个注解里面的属性，比如前面的栗子，利用<code>AnnotatedTypeMetadata</code>可以拿到<code>@ConditionalOnLinux</code>的注解属性<code>environment</code>的值。下面看下其源码：</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AnnotatedTypeMetadata</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">isAnnotated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> annotationName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAnnotationAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> annotationName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAnnotationAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> annotationName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> classValuesAsString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">MultiValueMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAllAnnotationAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> annotationName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">MultiValueMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAllAnnotationAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> annotationName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> classValuesAsString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>回到刚才的栗子，我们知道<code>@ConditionalOnLinux</code>注解真正起作用的是<code>Condition</code>接口的具体实现类<code>LinuxCondition</code>的<code>matches</code>方法，那么这个<code>matches</code>方法是在何时被调用的呢？</p>\n<p>通过 idea 调试看调用的栈帧，如下图：</p>\n<p><img src=\"/../assets/1648015631043-16dd15e8-bab8-4f0a-afbd-d7aa70727164.png\"></p>\n<p>发现是在<code>ConditionEvaluator</code>的<code>shouldSkip</code>方法中调用了<code>LinuxCondition</code>的<code>matches</code>方法，自然我们再去看看<code>ConditionEvaluator</code>的<code>shouldSkip</code>的方法执行了什么逻辑。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 这个方法主要是如果是解析阶段则跳过，如果是注册阶段则不跳过</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">shouldSkip</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">AnnotatedTypeMetadata</span> metadata<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">ConfigurationPhase</span> phase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 若没有被@Conditional或其派生注解所标注，则不会跳过</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>metadata <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>metadata<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Conditional</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 没有指定phase，注意phase可以分为PARSE_CONFIGURATION或REGISTER_BEAN类型</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>phase <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 若标有@Component，@Import，@Bean或@Configuration等注解的话，则说明是PARSE_CONFIGURATION类型</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>metadata <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AnnotationMetadata</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t\t\t<span class=\"token class-name\">ConfigurationClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isConfigurationCandidate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span><span class=\"token punctuation\">)</span> metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">shouldSkip</span><span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConfigurationPhase</span><span class=\"token punctuation\">.</span>PARSE_CONFIGURATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 否则是REGISTER_BEAN类型</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">shouldSkip</span><span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConfigurationPhase</span><span class=\"token punctuation\">.</span>REGISTER_BEAN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Condition</span><span class=\"token punctuation\">></span></span> conditions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// TODO 获得所有标有@Conditional注解或其派生注解里面的Condition接口实现类并实例化成对象。</span>\n\t<span class=\"token comment\">// 比如@Conditional(OnBeanCondition.class)则获得OnBeanCondition.class，OnBeanCondition.class往往实现了Condition接口</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> conditionClasses <span class=\"token operator\">:</span> <span class=\"token function\">getConditionClasses</span><span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 将类实例化成对象</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> conditionClass <span class=\"token operator\">:</span> conditionClasses<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">Condition</span> condition <span class=\"token operator\">=</span> <span class=\"token function\">getCondition</span><span class=\"token punctuation\">(</span>conditionClass<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tconditions<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 排序，即按照Condition的优先级进行排序</span>\n\t<span class=\"token class-name\">AnnotationAwareOrderComparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>conditions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Condition</span> condition <span class=\"token operator\">:</span> conditions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">ConfigurationPhase</span> requiredPhase <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ConfigurationCondition</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 从condition中获得对bean是解析还是注册</span>\n\t\t\trequiredPhase <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationCondition</span><span class=\"token punctuation\">)</span> condition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConfigurationPhase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 若requiredPhase为null或获取的阶段类型正是当前阶段类型且不符合condition的matches条件，则跳过</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>requiredPhase <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> requiredPhase <span class=\"token operator\">==</span> phase<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>condition<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">,</span> metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>shouldSkip</code>这个方法执行的逻辑主要是如果是解析阶段则跳过，如果是注册阶段则不跳过；如果是在注册阶段即<code>REGISTER_BEAN</code>阶段的话，此时会得到所有的<code>Condition</code>接口的具体实现类并实例化这些实现类，然后再执行下面关键的代码进行判断是否需要跳过。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>requiredPhase <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> requiredPhase <span class=\"token operator\">==</span> phase<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>condition<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">,</span> metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码最重要的逻辑是调用了<code>Condition</code>接口的具体实现类的<code>matches</code>方法，若<code>matches</code>返回<code>false</code>，则跳过，不进行注册<code>bean</code>的操作；若<code>matches</code>返回<code>true</code>，则不跳过，进行注册<code>bean</code>的操作；</p>\n<p>好了，<code>Condition</code>的源码分析就到此为止，再往上翻调用方法的话应该就是 Spring 加载<code>bean</code>定义的相关源码了，不属于这里的分析范围。</p>\n<p><a name=\"QTGWR\"></a></p>\n<h3 id=\"3-2-Spring-的内置-Condition-接口实现类\"><a href=\"#3-2-Spring-的内置-Condition-接口实现类\" class=\"headerlink\" title=\"3.2 Spring 的内置 Condition 接口实现类\"></a>3.2 Spring 的内置 Condition 接口实现类</h3><p>前面我们学会了如何自定义条件注解及<code>Condition</code>的源码分析，那么我们不禁好奇，Spring 究竟内置了哪些<code>Condition</code>接口的实现类呢？</p>\n<p>那么看下 Spring 的<code>Condition</code>接口的具体实现类的类图：</p>\n<p><img src=\"/../assets/1648015631173-9c9d1f66-6a29-4682-84de-42febc33e519.png\"></p>\n<p>发现 Spring 内置的<code>Condition</code>接口的具体实现类虽然有多个，但只有<code>ProfileCondition</code>不是测试相关的，因此可以说真正的内置的<code>Condition</code>接口的具体实现类只有<code>ProfileCondition</code>一个，非常非常少,这跟 SpringBoot 的大量派生条件注解形成了鲜明的对比。<code>ProfileCondition</code>大家都知道，是跟环境有关，比如我们平时一般有<code>dev</code>,<code>test</code>和<code>prod</code>环境，而<code>ProfileCondition</code>就是判断我们项目配置了哪个环境的。下面是<code>ProfileCondition</code>的源码，很简单，这里就不分析了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfileCondition</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Condition</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AnnotatedTypeMetadata</span> metadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">MultiValueMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> attrs <span class=\"token operator\">=</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">getAllAnnotationAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Profile</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attrs <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value <span class=\"token operator\">:</span> attrs<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">acceptsProfiles</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Profiles</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a name=\"QEW7p\"></a></p>\n<h2 id=\"4-SpringBootCondition-源码解析\"><a href=\"#4-SpringBootCondition-源码解析\" class=\"headerlink\" title=\"4 SpringBootCondition 源码解析\"></a>4 SpringBootCondition 源码解析</h2><p>前面看到 Spring 对<code>Condition</code>的内置注解可以说只有<code>ProfileCondition</code>一个，但是我们都知道，SpringBoot 则内置了大量的条件注解<code>ConditionalOnXXX</code>。在分析前，我们先来看一下<code>SpringBootCondition</code>的整体类图来个整体的理解，如下图：</p>\n<p><img src=\"/../assets/1648015631259-58884987-d1ae-42f7-80c7-d809d3ef4d25.png\"></p>\n<p>可以看到<code>SpringBootCondition</code>作为 SpringBoot 条件注解的基类，处于整个类图的中心，它实现了<code>Condition</code>接口，然后又有很多具体的子类<code>OnXXXCondition</code>,这些<code>OnXXXCondition</code>其实就是<code>@ConditionalOnXXX</code>的条件类。</p>\n<p>我们先来看下<code>SpringBootCondition</code>这个父类是主要做了哪些事情，抽象了哪些共有的逻辑？</p>\n<p><code>SpringBootConditon</code>实现了<code>Condition</code>接口，作为 SpringBoot 众多条件注解<code>OnXXXCondtion</code>的父类，它的作用主要就是打印一些条件注解评估报告的日志，比如打印哪些配置类是符合条件注解的，哪些是不符合的。打印的日志形式如下图：</p>\n<p><img src=\"/../assets/1648015632805-1945821e-2ed6-43ca-9964-cdea71f75791.png\"></p>\n<p><img src=\"/../assets/1648015633999-75519e46-a042-4d89-835a-7929f3b0afbc.png\"> 因为<code>SpringBootConditon</code>实现了<code>Condition</code>接口，也实现了<code>matches</code>方法，因此该方法同样也是被<code>ConditionEvaluator</code>的<code>shouldSkip</code>方法中调用，因此我们就以<code>SpringBootConditon</code>的<code>matches</code>方法为入口去进行分析。直接上代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringBootCondition.java</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionContext</span> context<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">AnnotatedTypeMetadata</span> metadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 得到metadata的类名或方法名</span>\n\t\t<span class=\"token class-name\">String</span> classOrMethodName <span class=\"token operator\">=</span> <span class=\"token function\">getClassOrMethodName</span><span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 判断每个配置类的每个条件注解@ConditionalOnXXX是否满足条件，然后记录到ConditionOutcome结果中</span>\n\t\t\t<span class=\"token comment\">// 注意getMatchOutcome是一个抽象模板方法，交给OnXXXCondition子类去实现</span>\n\t\t\t<span class=\"token class-name\">ConditionOutcome</span> outcome <span class=\"token operator\">=</span> <span class=\"token function\">getMatchOutcome</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 打印condition评估的日志，哪些条件注解@ConditionalOnXXX是满足条件的，哪些是不满足条件的，这些日志都打印出来</span>\n\t\t\t<span class=\"token function\">logOutcome</span><span class=\"token punctuation\">(</span>classOrMethodName<span class=\"token punctuation\">,</span> outcome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 除了打印日志外，这些是否匹配的信息还要记录到ConditionEvaluationReport中</span>\n\t\t\t<span class=\"token function\">recordEvaluation</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> classOrMethodName<span class=\"token punctuation\">,</span> outcome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 最后返回@ConditionalOnXXX是否满足条件</span>\n\t\t\t<span class=\"token keyword\">return</span> outcome<span class=\"token punctuation\">.</span><span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoClassDefFoundError</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token string\">\"Could not evaluate condition on \"</span> <span class=\"token operator\">+</span> classOrMethodName <span class=\"token operator\">+</span> <span class=\"token string\">\" due to \"</span>\n\t\t\t\t\t\t\t<span class=\"token operator\">+</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" not \"</span>\n\t\t\t\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\"found. Make sure your own configuration does not rely on \"</span>\n\t\t\t\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\"that class. This can also happen if you are \"</span>\n\t\t\t\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\"@ComponentScanning a springframework package (e.g. if you \"</span>\n\t\t\t\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\"put a @ComponentScan in the default package by mistake)\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token string\">\"Error processing condition on \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码的注释已经非常详细，我们知道了<code>SpringBootCondition</code>抽象了所有其具体实现类<code>OnXXXCondition</code>的共有逻辑–<code>condition</code>评估信息打印，最重要的是封装了一个模板方法<code>getMatchOutcome(context, metadata)</code>，留给各个<code>OnXXXCondition</code>具体子类去覆盖实现属于自己的判断逻辑，然后再返回相应的匹配结果给<code>SpringBootCondition</code>用于日志打印。</p>\n<p>因此我们知道了<code>SpringBootCondition</code>其实就是用来打印<code>condition</code>评估信息的，对于其他枝节方法我们不必追究过深，免得丢了主线。我们现在的重点是放在交给<code>OnXXXCondition</code>子类实现的模板方法上<code>getMatchOutcome(context, metadata);</code>，因为这个方法将会由很多<code>OnXXXCondition</code>覆盖重写判断逻辑，这里是我们接下来分析的重点。</p>\n<p>因为<code>SpringBootCondition</code>有众多具体实现类，下面只挑<code>OnResourceCondition</code>，<code>OnBeanCondition</code>和<code>OnWebApplicationCondition</code>进行讲解，而<code>AutoConfigurationImportFilter</code>跟自动配置有关，则留到自动配置源码解析的时候再进行分析。</p>\n<p><a name=\"ZRqUy\"></a></p>\n<h3 id=\"4-1-OnResourceCondition-源码分析\"><a href=\"#4-1-OnResourceCondition-源码分析\" class=\"headerlink\" title=\"4.1 OnResourceCondition 源码分析\"></a>4.1 OnResourceCondition 源码分析</h3><p>现在先来看下一个逻辑及其简单的注解条件类<code>OnResourceCondition</code>，<code>OnResourceCondition</code>继承了<code>SpringBootCondition</code>父类，覆盖了其<code>getMatchOutcome</code>方法，用于<code>@ConditionalOnResource</code>注解指定的资源存在与否。<code>OnResourceCondition</code>的判断逻辑非常简单，主要拿到<code>@ConditionalOnResource</code>注解指定的资源路径后，然后用<code>ResourceLoader</code>根据指定路径去加载看资源存不存在。下面直接看代码:</p>\n<p>先来看下<code>@ConditionalOnResource</code>的代码，</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Conditional</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OnResourceCondition</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">ConditionalOnResource</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">/**\n\t * The resources that must be present.\n\t * @return the resource paths that must be present.\n\t */</span>\n\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">resources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>再来看<code>OnResourceCondition</code>的代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Order</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">.</span>HIGHEST_PRECEDENCE <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OnResourceCondition</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SpringBootCondition</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ResourceLoader</span> defaultResourceLoader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultResourceLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConditionOutcome</span> <span class=\"token function\">getMatchOutcome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionContext</span> context<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">AnnotatedTypeMetadata</span> metadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 获得@ConditionalOnResource注解的属性元数据</span>\n\t\t<span class=\"token class-name\">MultiValueMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> attributes <span class=\"token operator\">=</span> metadata\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">getAllAnnotationAttributes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnResource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 获得资源加载器，若ConditionContext中有ResourceLoader则用ConditionContext中的，没有则用默认的</span>\n\t\t<span class=\"token class-name\">ResourceLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">?</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultResourceLoader<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> locations <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 将@ConditionalOnResource中定义的resources属性值取出来装进locations集合</span>\n\t\t<span class=\"token function\">collectValues</span><span class=\"token punctuation\">(</span>locations<span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resources\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>locations<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"@ConditionalOnResource annotations must specify at \"</span>\n\t\t\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\"least one resource location\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// missing集合是装不存在指定资源的资源路径的</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> missing <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 遍历所有的资源路径，若指定的路径的资源不存在则将其资源路径存进missing集合中</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> location <span class=\"token operator\">:</span> locations<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 这里针对有些资源路径是Placeholders的情况，即处理 $&#123;&#125;</span>\n\t\t\t<span class=\"token class-name\">String</span> resource <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolvePlaceholders</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>loader<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmissing<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 如果存在某个资源不存在，那么则报错</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>missing<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">noMatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionMessage</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">forCondition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnResource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">didNotFind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resource\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"resources\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">items</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Style</span><span class=\"token punctuation\">.</span>QUOTE<span class=\"token punctuation\">,</span> missing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 所有资源都存在，那么则返回能找到就提的资源</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span>\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionMessage</span><span class=\"token punctuation\">.</span><span class=\"token function\">forCondition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnResource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">found</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"location\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"locations\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">items</span><span class=\"token punctuation\">(</span>locations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 将@ConditionalOnResource中定义的resources属性值取出来装进locations集合</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">collectValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> names<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> item <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tnames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>OnResourceCondition</code>的<code>getMatchOutcome</code>方法非常简单，这里不再详述。</p>\n<p><a name=\"SWxtG\"></a></p>\n<h3 id=\"4-2-OnBeanCondition-源码分析\"><a href=\"#4-2-OnBeanCondition-源码分析\" class=\"headerlink\" title=\"4.2 OnBeanCondition 源码分析\"></a>4.2 OnBeanCondition 源码分析</h3><p><code>OnBeanCondition</code>同样继承了<code>FilteringSpringBootCondition</code>父类，覆盖了父类<code>FilteringSpringBootCondition</code>的<code>getOutcomes</code>方法。而<code>FilteringSpringBootCondition</code>又是<code>SpringBootCondition</code>的子类，<code>FilteringSpringBootCondition</code>跟自动配置类过滤有关，这里先不分析。<strong>值得注意的是</strong><code>**OnBeanCondition**</code><strong>同样重写了</strong><code>**SpringBootCondition**</code><strong>的</strong><code>**getMatchOutcome**</code><strong>方法</strong>，用来判断 Spring 容器中是否存在指定条件的<code>bean</code>。同时是<code>OnBeanCondition</code>是<code>@ConditionalOnBean</code>,<code>@ConditionalOnSingleCandidate</code>和<code>ConditionalOnMissingBean</code>的条件类。</p>\n<p>同样，先来看<code>OnBeanCondition</code>复写父类<code>SpringBootCondition</code>的<code>getMatchOutcome</code>方法的代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConditionOutcome</span> <span class=\"token function\">getMatchOutcome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionContext</span> context<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">AnnotatedTypeMetadata</span> metadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">ConditionMessage</span> matchMessage <span class=\"token operator\">=</span> <span class=\"token class-name\">ConditionMessage</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// (1)，配置类（metadata）标注@ConditionalOnBean注解的情况</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 将@ConditionalOnBean注解属性封装进BeanSearchSpec对象中</span>\n\t\t\t<span class=\"token comment\">// 注意BeanSearchSpec是一个静态内部类，用来存储@ConditionalOnBean和@ConditionalOnMissingBean注解的属性值</span>\n\t\t\t<span class=\"token class-name\">BeanSearchSpec</span> spec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanSearchSpec</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> metadata<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token class-name\">ConditionalOnBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 调用getMatchingBeans得到符合条件的bean</span>\n\t\t\t<span class=\"token class-name\">MatchResult</span> matchResult <span class=\"token operator\">=</span> <span class=\"token function\">getMatchingBeans</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 如果不匹配</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>matchResult<span class=\"token punctuation\">.</span><span class=\"token function\">isAllMatched</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token class-name\">String</span> reason <span class=\"token operator\">=</span> <span class=\"token function\">createOnBeanNoMatchReason</span><span class=\"token punctuation\">(</span>matchResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">noMatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionMessage</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">forCondition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">because</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">// 如果匹配</span>\n\t\t\tmatchMessage <span class=\"token operator\">=</span> matchMessage<span class=\"token punctuation\">.</span><span class=\"token function\">andCondition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">found</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bean\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"beans\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">items</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Style</span><span class=\"token punctuation\">.</span>QUOTE<span class=\"token punctuation\">,</span> matchResult<span class=\"token punctuation\">.</span><span class=\"token function\">getNamesOfAllMatches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// (2)，配置类（metadata）标注@ConditionalOnSingleCandidate注解的情况</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnSingleCandidate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">BeanSearchSpec</span> spec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleCandidateBeanSearchSpec</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> metadata<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token class-name\">ConditionalOnSingleCandidate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">MatchResult</span> matchResult <span class=\"token operator\">=</span> <span class=\"token function\">getMatchingBeans</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>matchResult<span class=\"token punctuation\">.</span><span class=\"token function\">isAllMatched</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">noMatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionMessage</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">forCondition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnSingleCandidate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">didNotFind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"any beans\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">atAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">hasSingleAutowireCandidate</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tmatchResult<span class=\"token punctuation\">.</span><span class=\"token function\">getNamesOfAllMatches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tspec<span class=\"token punctuation\">.</span><span class=\"token function\">getStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">SearchStrategy</span><span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">noMatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionMessage</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">forCondition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnSingleCandidate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">didNotFind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a primary bean from beans\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">items</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Style</span><span class=\"token punctuation\">.</span>QUOTE<span class=\"token punctuation\">,</span> matchResult<span class=\"token punctuation\">.</span><span class=\"token function\">getNamesOfAllMatches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tmatchMessage <span class=\"token operator\">=</span> matchMessage\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">andCondition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnSingleCandidate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">found</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a primary bean from beans\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">items</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Style</span><span class=\"token punctuation\">.</span>QUOTE<span class=\"token punctuation\">,</span> matchResult<span class=\"token punctuation\">.</span><span class=\"token function\">getNamesOfAllMatches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// (3)，配置类（metadata）标注@ConditionalOnMissingBean注解的情况</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnMissingBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">BeanSearchSpec</span> spec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanSearchSpec</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> metadata<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token class-name\">ConditionalOnMissingBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">MatchResult</span> matchResult <span class=\"token operator\">=</span> <span class=\"token function\">getMatchingBeans</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matchResult<span class=\"token punctuation\">.</span><span class=\"token function\">isAnyMatched</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token class-name\">String</span> reason <span class=\"token operator\">=</span> <span class=\"token function\">createOnMissingBeanNoMatchReason</span><span class=\"token punctuation\">(</span>matchResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">noMatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionMessage</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">forCondition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnMissingBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">because</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tmatchMessage <span class=\"token operator\">=</span> matchMessage<span class=\"token punctuation\">.</span><span class=\"token function\">andCondition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnMissingBean</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">didNotFind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"any beans\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">atAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 最终返回matchMessage</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>matchMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们可以看到<code>OnBeanCondition</code>类覆盖的<code>getMatchOutcome</code>方法分别处理了标注<code>@ConditionalOnBean</code>,<code>@ConditionalOnSingleCandidate</code>和<code>@ConditionalOnMissingBean</code>注解的情况，分别对应上面代码注释的<code>(1)</code>,<code>(2)</code>和<code>(3)</code>处。</p>\n<p>现在我们只看针对<code>@ConditionalOnBean</code>注解的处理逻辑，从上面代码中可以看到若配置类（metadata）标注<code>@ConditionalOnBean</code>注解的话，主要做了以下事情：</p>\n<ol>\n<li>将该注解属性提取出来封装进<code>BeanSearchSpec</code>对象中;</li>\n<li>然后调用<code>getMatchingBeans(context, spec)</code>方法来获取是否有匹配的<code>bean</code>；</li>\n<li>最后返回<code>bean</code>的匹配情况；</li>\n</ol>\n<p>可以看到最重要的逻辑是第 2 步，那么我们再来看下<code>getMatchingBeans</code>方法，直接上代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MatchResult</span> <span class=\"token function\">getMatchingBeans</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionContext</span> context<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">BeanSearchSpec</span> beans<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 获得Spring容器的beanFactory</span>\n\t\t<span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 判断bean的搜索策略是否是SearchStrategy.ANCESTORS策略</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>beans<span class=\"token punctuation\">.</span><span class=\"token function\">getStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">SearchStrategy</span><span class=\"token punctuation\">.</span>ANCESTORS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">BeanFactory</span> parent <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getParentBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token string\">\"Unable to use SearchStrategy.PARENTS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tbeanFactory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// MatchResult用来存储bean的匹配结果</span>\n\t\t<span class=\"token class-name\">MatchResult</span> matchResult <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MatchResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 如果bean的搜索策略不是SearchStrategy.CURRENT的话，则置considerHierarchy为true</span>\n\t\t<span class=\"token keyword\">boolean</span> considerHierarchy <span class=\"token operator\">=</span> beans<span class=\"token punctuation\">.</span><span class=\"token function\">getStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token class-name\">SearchStrategy</span><span class=\"token punctuation\">.</span>CURRENT<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 获取TypeExtractor，TypeExtractor是用来判断bean的类型的</span>\n\t\t<span class=\"token class-name\">TypeExtractor</span> typeExtractor <span class=\"token operator\">=</span> beans<span class=\"token punctuation\">.</span><span class=\"token function\">getTypeExtractor</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 获取是否有被忽略bean类型，若有的话将该bean类型的名称装进beansIgnoredByType集合</span>\n\t\t<span class=\"token comment\">// 这里主要是针对@ConditionalOnMissingBean的ignored属性</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> beansIgnoredByType <span class=\"token operator\">=</span> <span class=\"token function\">getNamesOfBeansIgnoredByType</span><span class=\"token punctuation\">(</span>\n\t\t\t\tbeans<span class=\"token punctuation\">.</span><span class=\"token function\">getIgnoredTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> typeExtractor<span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span>\n\t\t\t\tconsiderHierarchy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 遍历bean的所有类型</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> type <span class=\"token operator\">:</span> beans<span class=\"token punctuation\">.</span><span class=\"token function\">getTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 调用getBeanNamesForType方法根据bean类型得到所有符合条件的bean类型，并放到typeMatches集合</span>\n\t\t\t<span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> typeMatches <span class=\"token operator\">=</span> <span class=\"token function\">getBeanNamesForType</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span>\n\t\t\t\t\ttypeExtractor<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> considerHierarchy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 移除掉Ignored的类型</span>\n\t\t\ttypeMatches<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>beansIgnoredByType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 若typeMatches为空，那么则说明正在遍历的这个type类型不符合匹配条件，此时用matchResult记录一下这个不符合条件的类型</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>typeMatches<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmatchResult<span class=\"token punctuation\">.</span><span class=\"token function\">recordUnmatchedType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">// 若typeMatches不为空，那么则说明正在遍历的这个type类型符合匹配条件，此时用matchResult记录一下这个符合条件的类型</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmatchResult<span class=\"token punctuation\">.</span><span class=\"token function\">recordMatchedType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> typeMatches<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 这里针对@ConditionalOnBean等注解的annotation属性的处理</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> annotation <span class=\"token operator\">:</span> beans<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> annotationMatches <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token function\">getBeanNamesForAnnotation</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> annotation<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> considerHierarchy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tannotationMatches<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>beansIgnoredByType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>annotationMatches<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmatchResult<span class=\"token punctuation\">.</span><span class=\"token function\">recordUnmatchedAnnotation</span><span class=\"token punctuation\">(</span>annotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmatchResult<span class=\"token punctuation\">.</span><span class=\"token function\">recordMatchedAnnotation</span><span class=\"token punctuation\">(</span>annotation<span class=\"token punctuation\">,</span> annotationMatches<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 这里针对@ConditionalOnBean等注解的name属性的处理</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> beanName <span class=\"token operator\">:</span> beans<span class=\"token punctuation\">.</span><span class=\"token function\">getNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// beansIgnoredByType集合不包含beanName且beanFactory包含这个bean，则匹配</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>beansIgnoredByType<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">containsBean</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> considerHierarchy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmatchResult<span class=\"token punctuation\">.</span><span class=\"token function\">recordMatchedName</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">// 否则，不匹配</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmatchResult<span class=\"token punctuation\">.</span><span class=\"token function\">recordUnmatchedName</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 最后返回匹配结果</span>\n\t\t<span class=\"token keyword\">return</span> matchResult<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的逻辑主要是从 spring 容器中搜索有无指定条件的<code>bean</code>，搜索 Spring 容器搜索 bean 的话有三种搜索策略，分别是<code>CURRENT</code>,<code>ANCESTORS</code>和<code>ALL</code>，分表表示只从当前的<code>context</code>中搜索<code>bean</code>，只从父<code>context</code>中搜索<code>bean</code>和从整个<code>context</code>中搜索<code>bean</code>；定义了搜索策略后，然后再根据<code>BeanSearchSpec</code>对象封装的注解属性分别取指定的容器中查找有无符合条件的<code>bean</code>，然后再进行一些过滤。比如<code>@ConditionalOnMissingBean</code>注解有定义<code>ignored</code>属性值，那么从容器中搜索到有符合条件的<code>bean</code>时，此时还要移除掉<code>ignored</code>指定的<code>bean</code>。</p>\n<p>好了，上面就已经分析了<code>OnBeanCondition</code>这个条件类了，我们坚持主线优先的原则，具体的细节代码不会深究。</p>\n<p><a name=\"Dn1ZP\"></a></p>\n<h3 id=\"4-3-OnWebApplicationCondition\"><a href=\"#4-3-OnWebApplicationCondition\" class=\"headerlink\" title=\"4.3 OnWebApplicationCondition\"></a>4.3 OnWebApplicationCondition</h3><p><code>OnWebApplicationCondition</code>同样继承了<code>FilteringSpringBootCondition</code>父类，覆盖了父类<code>FilteringSpringBootCondition</code>的<code>getOutcomes</code>方法。而<code>FilteringSpringBootCondition</code>又是<code>SpringBootCondition</code>的子类，<code>FilteringSpringBootCondition</code>跟自动配置类过滤有关，这里先不分析。<strong>值得注意的是</strong><code>**OnWebApplicationCondition**</code><strong>同样重写了</strong><code>**SpringBootCondition**</code><strong>的</strong><code>**getMatchOutcome**</code><strong>方法</strong>，用来判断当前应用是否 web 应用。同时是<code>OnWebApplicationCondition</code>是<code>@ConditionalOnWebApplication</code>的条件类。</p>\n<p>同样，先来看<code>OnWebApplicationCondition</code>重写<code>SpringBootCondition</code>的<code>getMatchOutcome</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ConditionOutcome</span> <span class=\"token function\">getMatchOutcome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionContext</span> context<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">AnnotatedTypeMetadata</span> metadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 配置类是否标注有@ConditionalOnWebApplication注解</span>\n\t\t<span class=\"token keyword\">boolean</span> required <span class=\"token operator\">=</span> metadata\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnWebApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 调用isWebApplication方法返回匹配结果</span>\n\t\t<span class=\"token class-name\">ConditionOutcome</span> outcome <span class=\"token operator\">=</span> <span class=\"token function\">isWebApplication</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> metadata<span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 若有标注@ConditionalOnWebApplication但不符合条件，则返回不匹配</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>required <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>outcome<span class=\"token punctuation\">.</span><span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">noMatch</span><span class=\"token punctuation\">(</span>outcome<span class=\"token punctuation\">.</span><span class=\"token function\">getConditionMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 若没有标注@ConditionalOnWebApplication但符合条件，则返回不匹配</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>required <span class=\"token operator\">&amp;&amp;</span> outcome<span class=\"token punctuation\">.</span><span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">noMatch</span><span class=\"token punctuation\">(</span>outcome<span class=\"token punctuation\">.</span><span class=\"token function\">getConditionMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 这里返回匹配的情况，TODO 不过有个疑问：如果没有标注@ConditionalOnWebApplication注解，又不符合条件的话，也会执行到这里，返回匹配？</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>outcome<span class=\"token punctuation\">.</span><span class=\"token function\">getConditionMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码的逻辑很简单，主要是调用<code>isWebApplication</code>方法来判断当前应用是否是 web 应用。因此，我们再来看下<code>isWebApplication</code>方法:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">ConditionOutcome</span> <span class=\"token function\">isWebApplication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionContext</span> context<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">AnnotatedTypeMetadata</span> metadata<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> required<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 调用deduceType方法判断是哪种类型，其中有SERVLET，REACTIVE和ANY类型，其中ANY表示了SERVLET或REACTIVE类型</span>\n\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token function\">deduceType</span><span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// SERVLET类型</span>\n\t\t<span class=\"token keyword\">case</span> SERVLET<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">isServletWebApplication</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// REACTIVE类型</span>\n\t\t<span class=\"token keyword\">case</span> REACTIVE<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">isReactiveWebApplication</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">isAnyWebApplication</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在<code>isWebApplication</code>方法中，首先从<code>@ConditionalOnWebApplication</code>注解中获取其定义了什么类型，然后根据不同的类型进入不同的判断逻辑。这里我们只看下<code>SERVLET</code>的情况判断处理，看代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">ConditionOutcome</span> <span class=\"token function\">isServletWebApplication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">ConditionMessage<span class=\"token punctuation\">.</span>Builder</span> message <span class=\"token operator\">=</span> <span class=\"token class-name\">ConditionMessage</span><span class=\"token punctuation\">.</span><span class=\"token function\">forCondition</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 若classpath中不存在org.springframework.web.context.support.GenericWebApplicationContext.class，则返回不匹配</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">ClassNameFilter</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span>SERVLET_WEB_APPLICATION_CLASS<span class=\"token punctuation\">,</span>\n\t\t\t\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">noMatch</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\tmessage<span class=\"token punctuation\">.</span><span class=\"token function\">didNotFind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"servlet web application classes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">atAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 若classpath中存在org.springframework.web.context.support.GenericWebApplicationContext.class，那么又分为以下几种匹配的情况</span>\n\t\t<span class=\"token comment\">// session</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> scopes <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRegisteredScopeNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">containsElement</span><span class=\"token punctuation\">(</span>scopes<span class=\"token punctuation\">,</span> <span class=\"token string\">\"session\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">foundExactly</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'session' scope\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// ConfigurableWebEnvironment</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ConfigurableWebEnvironment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">foundExactly</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConfigurableWebEnvironment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// WebApplicationContext</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">WebApplicationContext</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">foundExactly</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WebApplicationContext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 若以上三种都不匹配的话，则说明不是一个servlet web application</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">noMatch</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">because</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not a servlet web application\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于是<code>SERVLET</code>的情况，首先根据<code>classpath</code>中是否存在<code>org.springframework.web.context.support.GenericWebApplicationContext.class</code>，如果不存在该类，则直接返回不匹配；若存在的话那么又分为以下几种匹配的情况：</p>\n<ul>\n<li>session</li>\n<li>ConfigurableWebEnvironment</li>\n<li>WebApplicationContext</li>\n</ul>\n<p>若上面三种情况都不匹配，则说明不是一个 servlet web application。</p>\n<p><a name=\"PPW9w\"></a></p>\n<h3 id=\"4-4-其他\"><a href=\"#4-4-其他\" class=\"headerlink\" title=\"4.4 其他\"></a>4.4 其他</h3><p>由于 springboot 的<code>OnXXXCondition</code>类实现太多，不可能每个条件类都分析一遍，因此上面只分析了<code>OnResourceCondition</code>,<code>OnBeanCondition</code>和<code>onWebApplicationCondition</code>的源码。我们分析源码不可能把所有代码都通读一遍的，阅读源码的话，只要理解了某个模块的类之间的关系及挑几个有代表性的类分析下就行，不可能一网打尽。</p>\n<p>若有时间的话，推荐看下几个我们常用的条件类的源码：<code>OnPropertyCondition</code>,<code>OnClassCondition</code>和<code>OnExpressionCondition</code>等。</p>\n<p><a name=\"YpCDt\"></a></p>\n<h2 id=\"5-如何扩展-SpringBootCondition\"><a href=\"#5-如何扩展-SpringBootCondition\" class=\"headerlink\" title=\"5 如何扩展 SpringBootCondition\"></a>5 如何扩展 SpringBootCondition</h2><p>前文我们知道了如何扩展 Spring 的<code>Condition</code>接口，那么我们该如何扩展 SpringBoot 的<code>SpringBootCondition</code>类呢？</p>\n<p>推荐阅读<a href=\"https://link.juejin.cn/?target=https://blog.csdn.net/zhanglu1236789/article/details/78999496\">springboot 之使用 SpringBootCondition</a>获得答案</p>\n<h1 id=\"4-SpringBoot是如何实现自动配置的？\"><a href=\"#4-SpringBoot是如何实现自动配置的？\" class=\"headerlink\" title=\"4 SpringBoot是如何实现自动配置的？\"></a>4 SpringBoot是如何实现自动配置的？</h1><p><a name=\"OGmDn\"></a></p>\n<h2 id=\"1-前言-3\"><a href=\"#1-前言-3\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h2><p>温故而知新，我们来简单回顾一下上篇的内容，上一篇我们分析了 SpringBoot 的条件注解<code>@ConditionalOnXxx</code> 的相关源码，现挑重点总结如下：</p>\n<ol>\n<li>SpringBoot 的所有<code>@ConditionalOnXxx</code>的条件类<code>OnXxxCondition</code>都是继承于<code>SpringBootCondition</code>基类，而<code>SpringBootCondition</code>又实现了<code>Condition</code>接口。</li>\n<li><code>SpringBootCondition</code>基类主要用来打印一些条件注解评估报告的日志,这些条件评估信息全部来源于其子类注解条件类<code>OnXxxCondition</code>，因此其也抽象了一个模板方法<code>getMatchOutcome</code>留给子类去实现来评估其条件注解是否符合条件。</li>\n<li>前一篇我们也还有一个重要的知识点还没分析，那就是跟过滤自动配置类逻辑有关的<code>AutoConfigurationImportFilter</code>接口，这篇文章我们来填一下这个坑。</li>\n</ol>\n<p>前面我们分析了跟 SpringBoot 的自动配置息息相关内置条件注解<code>@ConditionalOnXxx</code>后，现在我们就开始来撸 SpringBoot 自动配置的相关源码了。</p>\n<p><a name=\"yYh7t\"></a></p>\n<h2 id=\"2-SpringBootApplication-注解\"><a href=\"#2-SpringBootApplication-注解\" class=\"headerlink\" title=\"2 @SpringBootApplication 注解\"></a>2 @SpringBootApplication 注解</h2><p>在开始前，我们先想一下，SpringBoot 为何一个标注有<code>@SpringBootApplication</code>注解的启动类通过执行一个简单的<code>run</code>方法就能实现 SpringBoot 大量<code>Starter</code>的自动配置呢？ 其实 SpringBoot 的自动配置就跟<code>@SpringBootApplication</code>这个注解有关，我们先来看下其这个注解的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token annotation punctuation\">@SpringBootConfiguration</span>\n<span class=\"token annotation punctuation\">@EnableAutoConfiguration</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>excludeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>CUSTOM<span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> <span class=\"token class-name\">TypeExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>CUSTOM<span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> <span class=\"token class-name\">AutoConfigurationExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">SpringBootApplication</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ...省略非关键代码</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>@SpringBootApplication</code>标注了很多注解，我们可以看到其中跟 SpringBoot 自动配置有关的注解就有一个即<code>@EnableAutoConfiguration</code>，因此，可以肯定的是 SpringBoot 的自动配置肯定跟<code>@EnableAutoConfiguration</code>息息相关(其中<code>@ComponentScan</code>注解的<code>excludeFilters</code>属性也有一个类<code>AutoConfigurationExcludeFilter</code>,这个类跟自动配置也有点关系，但不是我们关注的重点)。 现在我们来打开<code>@EnableAutoConfiguration</code>注解的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token annotation punctuation\">@AutoConfigurationPackage</span>\n<span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AutoConfigurationImportSelector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">EnableAutoConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">String</span> ENABLED_OVERRIDE_PROPERTY <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.boot.enableautoconfiguration\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">exclude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">excludeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看到<code>@EnableAutoConfiguration</code>注解又标有<code>@AutoConfigurationPackage</code>和<code>@Import(AutoConfigurationImportSelector.class)</code>两个注解，顾名思义，<code>@AutoConfigurationPackage</code>注解肯定跟自动配置的包有关，而<code>AutoConfigurationImportSelector</code>则是跟 SpringBoot 的自动配置选择导入有关（Spring 中的<code>ImportSelector</code>是用来导入配置类的，通常是基于某些条件注解<code>@ConditionalOnXxxx</code>来决定是否导入某个配置类）。</p>\n<p>因此，可以看出<code>AutoConfigurationImportSelector</code>类是我们本篇的重点，因为 SpringBoot 的自动配置肯定有一个配置类，而这个配置类的导入则需要靠<code>AutoConfigurationImportSelector</code>这个哥们来实现。</p>\n<p>接下来我们重点来看<code>AutoConfigurationImportSelector</code>这个类，完了我们再简单分析下<code>@AutoConfigurationPackage</code>这个注解的逻辑。</p>\n<p><a name=\"jetZq\"></a></p>\n<h2 id=\"3-如何去找-SpringBoot-自动配置实现逻辑的入口方法？\"><a href=\"#3-如何去找-SpringBoot-自动配置实现逻辑的入口方法？\" class=\"headerlink\" title=\"3 如何去找 SpringBoot 自动配置实现逻辑的入口方法？\"></a>3 如何去找 SpringBoot 自动配置实现逻辑的入口方法？</h2><p>可以肯定的是 SpringBoot 的自动配置的逻辑肯定与 AutoConfigurationImportSelector 这个类有关，那么我们该如何去找到 SpringBoot 自动配置实现逻辑的入口方法呢？</p>\n<p>在找 SpringBoot 自动配置实现逻辑的入口方法前，我们先来看下<code>AutoConfigurationImportSelector</code>的相关类图，好有个整体的理解。看下图：</p>\n<p><img src=\"/../assets/1648015705218-a3ff37c9-cdc7-4bd1-b11c-32720c96408c.png\"></p>\n<p>可以看到<code>AutoConfigurationImportSelector</code>重点是实现了<code>DeferredImportSelector</code>接口和各种<code>Aware</code>接口，然后<code>DeferredImportSelector</code>接口又继承了<code>ImportSelector</code>接口。</p>\n<p>自然而然的，我们会去关注<code>AutoConfigurationImportSelector</code>复写<code>DeferredImportSelector</code>接口的实现方法<code>selectImports</code>方法，因为<code>selectImports</code>方法跟导入自动配置类有关，而这个方法往往是程序执行的入口方法。经过调试发现<code>selectImports</code>方法很具有迷惑性，<code>selectImports</code>方法跟自动配置相关的逻辑有点关系，但实质关系不大。</p>\n<p>此时剧情的发展好像不太符合常理，此时我们又该如何来找到自动配置逻辑有关的入口方法呢？</p>\n<p>最简单的方法就是在<code>AutoConfigurationImportSelector</code>类的每个方法都打上断点，然后调试看先执行到哪个方法。但是我们可以不这么做，我们回想下，自定义一个<code>Starter</code>的时候我们是不是要在<code>spring.factories</code>配置文件中配置</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">EnableAutoConfiguration</span><span class=\"token operator\">=</span><span class=\"token class-name\">XxxAutoConfiguration</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>因此可以推断，SpringBoot 的自动配置原理肯定跟从<code>spring.factories</code>配置文件中加载自动配置类有关，于是结合<code>AutoConfigurationImportSelector</code>的方法注释，我们找到了<code>getAutoConfigurationEntry</code>方法。于是我们在这个方法里面打上一个断点，此时通过调用栈帧来看下更上层的入口方法在哪里，然后我们再从跟自动配置相关的更上层的入口方法开始分析。</p>\n<p><img src=\"/../assets/1648015705282-6fbe9101-0f8a-48d1-8f46-501269d4e8ec.png\"></p>\n<p>通过图 1 我们可以看到，跟自动配置逻辑相关的入口方法在<code>DeferredImportSelectorGrouping</code>类的<code>getImports</code>方法处，因此我们就从<code>DeferredImportSelectorGrouping</code>类的<code>getImports</code>方法来开始分析 SpringBoot 的自动配置源码好了。</p>\n<p><a name=\"jowAo\"></a></p>\n<h2 id=\"4-分析-SpringBoot-自动配置原理\"><a href=\"#4-分析-SpringBoot-自动配置原理\" class=\"headerlink\" title=\"4 分析 SpringBoot 自动配置原理\"></a>4 分析 SpringBoot 自动配置原理</h2><p>既然找到<code>ConfigurationClassParser.getImports()方法</code>是自动配置相关的入口方法，那么下面我们就来真正分析 SpringBoot 自动配置的源码了。</p>\n<p>先看一下<code>getImports</code>方法代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationClassParser.java</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Group<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getImports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 遍历DeferredImportSelectorHolder对象集合deferredImports，deferredImports集合装了各种ImportSelector，当然这里装的是AutoConfigurationImportSelector</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DeferredImportSelectorHolder</span> deferredImport <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deferredImports<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token comment\">// 【1】，利用AutoConfigurationGroup的process方法来处理自动配置的相关逻辑，决定导入哪些配置类（这个是我们分析的重点，自动配置的逻辑全在这了）</span>\n    \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>deferredImport<span class=\"token punctuation\">.</span><span class=\"token function\">getConfigurationClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    \t\t\tdeferredImport<span class=\"token punctuation\">.</span><span class=\"token function\">getImportSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 【2】，经过上面的处理后，然后再进行选择导入哪些配置类</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">.</span><span class=\"token function\">selectImports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>标<code>【1】</code>处的的代码是我们分析的<strong>重中之重</strong>，自动配置的相关的绝大部分逻辑全在这里了，将在 4.1 分析自动配置的主要逻辑深入分析。那么<code>this.group.process(deferredImport.getConfigurationClass().getMetadata(), deferredImport.getImportSelector())</code>；主要做的事情就是在<code>this.group</code>即<code>AutoConfigurationGroup</code>对象的<code>process</code>方法中，传入的<code>AutoConfigurationImportSelector</code>对象来选择一些符合条件的自动配置类，过滤掉一些不符合条件的自动配置类，就是这么个事情，无他。</p>\n<p>注：</p>\n<ol>\n<li><code>AutoConfigurationGroup</code>：是<code>AutoConfigurationImportSelector</code>的内部类，主要用来处理自动配置相关的逻辑，拥有<code>process</code>和<code>selectImports</code>方法，然后拥有<code>entries</code>和<code>autoConfigurationEntries</code>集合属性，这两个集合分别存储被处理后的符合条件的自动配置类，我们知道这些就足够了；</li>\n<li><code>AutoConfigurationImportSelector</code>：承担自动配置的绝大部分逻辑，负责选择一些符合条件的自动配置类；</li>\n<li><code>metadata</code>:标注在 SpringBoot 启动类上的<code>@SpringBootApplication</code>注解元数据</li>\n</ol>\n<p>标<code>【2】</code>的<code>this.group.selectImports</code>的方法主要是针对前面的<code>process</code>方法处理后的自动配置类再进一步有选择的选择导入，将在 4.2 有选择的导入自动配置类这小节深入分析。</p>\n<p><a name=\"pZpGL\"></a></p>\n<h3 id=\"4-1-分析自动配置的主要逻辑\"><a href=\"#4-1-分析自动配置的主要逻辑\" class=\"headerlink\" title=\"4.1 分析自动配置的主要逻辑\"></a>4.1 分析自动配置的主要逻辑</h3><p>这里继续深究前面 4 分析 SpringBoot 自动配置原理这节标<code>【1】</code>处的 <code>this.group.process</code>方法是如何处理自动配置相关逻辑的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// AutoConfigurationImportSelector$AutoConfigurationGroup.java</span>\n\n<span class=\"token comment\">// 这里用来处理自动配置类，比如过滤掉不符合匹配条件的自动配置类</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> annotationMetadata<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">DeferredImportSelector</span> deferredImportSelector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span>\n\t\t\tdeferredImportSelector <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AutoConfigurationImportSelector</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Only %s implementations are supported, got %s\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token class-name\">AutoConfigurationImportSelector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tdeferredImportSelector<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【1】,调用getAutoConfigurationEntry方法得到自动配置类放入autoConfigurationEntry对象中</span>\n\t<span class=\"token class-name\">AutoConfigurationEntry</span> autoConfigurationEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AutoConfigurationImportSelector</span><span class=\"token punctuation\">)</span> deferredImportSelector<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">getAutoConfigurationEntry</span><span class=\"token punctuation\">(</span><span class=\"token function\">getAutoConfigurationMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tannotationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【2】，又将封装了自动配置类的autoConfigurationEntry对象装进autoConfigurationEntries集合</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoConfigurationEntries<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>autoConfigurationEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【3】，遍历刚获取的自动配置类</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> importClassName <span class=\"token operator\">:</span> autoConfigurationEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getConfigurations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 这里符合条件的自动配置类作为key，annotationMetadata作为值放进entries集合</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>importClassName<span class=\"token punctuation\">,</span> annotationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中我们再来看标<code>【1】</code>的方法<code>getAutoConfigurationEntry</code>，这个方法主要是用来获取自动配置类有关，承担了自动配置的主要逻辑。直接上代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// AutoConfigurationImportSelector.java</span>\n\n<span class=\"token comment\">// 获取符合条件的自动配置类，避免加载不必要的自动配置类从而造成内存浪费</span>\n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">AutoConfigurationEntry</span> <span class=\"token function\">getAutoConfigurationEntry</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token class-name\">AutoConfigurationMetadata</span> autoConfigurationMetadata<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">AnnotationMetadata</span> annotationMetadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 获取是否有配置spring.boot.enableautoconfiguration属性，默认返回true</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span>annotationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> EMPTY_ENTRY<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 获得@Congiguration标注的Configuration类即被审视introspectedClass的注解数据，</span>\n\t<span class=\"token comment\">// 比如：@SpringBootApplication(exclude = FreeMarkerAutoConfiguration.class)</span>\n\t<span class=\"token comment\">// 将会获取到exclude = FreeMarkerAutoConfiguration.class和excludeName=\"\"的注解数据</span>\n\t<span class=\"token class-name\">AnnotationAttributes</span> attributes <span class=\"token operator\">=</span> <span class=\"token function\">getAttributes</span><span class=\"token punctuation\">(</span>annotationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【1】得到spring.factories文件配置的所有自动配置类</span>\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> configurations <span class=\"token operator\">=</span> <span class=\"token function\">getCandidateConfigurations</span><span class=\"token punctuation\">(</span>annotationMetadata<span class=\"token punctuation\">,</span>\n\t\t\tattributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 利用LinkedHashSet移除重复的配置类</span>\n\tconfigurations <span class=\"token operator\">=</span> <span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span>configurations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 得到要排除的自动配置类，比如注解属性exclude的配置类</span>\n\t<span class=\"token comment\">// 比如：@SpringBootApplication(exclude = FreeMarkerAutoConfiguration.class)</span>\n\t<span class=\"token comment\">// 将会获取到exclude = FreeMarkerAutoConfiguration.class的注解数据</span>\n\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> exclusions <span class=\"token operator\">=</span> <span class=\"token function\">getExclusions</span><span class=\"token punctuation\">(</span>annotationMetadata<span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 检查要被排除的配置类，因为有些不是自动配置类，故要抛出异常</span>\n\t<span class=\"token function\">checkExcludedClasses</span><span class=\"token punctuation\">(</span>configurations<span class=\"token punctuation\">,</span> exclusions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【2】将要排除的配置类移除</span>\n\tconfigurations<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>exclusions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【3】因为从spring.factories文件获取的自动配置类太多，如果有些不必要的自动配置类都加载进内存，会造成内存浪费，因此这里需要进行过滤</span>\n\t<span class=\"token comment\">// 注意这里会调用AutoConfigurationImportFilter的match方法来判断是否符合@ConditionalOnBean,@ConditionalOnClass或@ConditionalOnWebApplication，后面会重点分析一下</span>\n\tconfigurations <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>configurations<span class=\"token punctuation\">,</span> autoConfigurationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【4】获取了符合条件的自动配置类后，此时触发AutoConfigurationImportEvent事件，</span>\n\t<span class=\"token comment\">// 目的是告诉ConditionEvaluationReport条件评估报告器对象来记录符合条件的自动配置类</span>\n\t<span class=\"token comment\">// 该事件什么时候会被触发？--> 在刷新容器时调用invokeBeanFactoryPostProcessors后置处理器时触发</span>\n\t<span class=\"token function\">fireAutoConfigurationImportEvents</span><span class=\"token punctuation\">(</span>configurations<span class=\"token punctuation\">,</span> exclusions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【5】将符合条件和要排除的自动配置类封装进AutoConfigurationEntry对象，并返回</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AutoConfigurationEntry</span><span class=\"token punctuation\">(</span>configurations<span class=\"token punctuation\">,</span> exclusions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>AutoConfigurationEntry</code>方法主要做的事情就是获取符合条件的自动配置类，避免加载不必要的自动配置类从而造成内存浪费。我们下面总结下<code>AutoConfigurationEntry</code>方法主要做的事情：</p>\n<p>【1】从<code>spring.factories</code>配置文件中加载<code>EnableAutoConfiguration</code>自动配置类（注意此时是从<strong>缓存</strong>中拿到的哈）,获取的自动配置类如图 3 所示。这里我们知道该方法做了什么事情就行了，后面还会有一篇文章详述<code>spring.factories</code>的原理；</p>\n<p>【2】若<code>@EnableAutoConfiguration</code>等注解标有要<code>exclude</code>的自动配置类，那么再将这个自动配置类排除掉；</p>\n<p>【3】排除掉要<code>exclude</code>的自动配置类后，然后再调用<code>filter</code>方法进行进一步的过滤，再次排除一些不符合条件的自动配置类；<strong>这个在稍后会详细分析。</strong></p>\n<p>【4】经过重重过滤后，此时再触发<code>AutoConfigurationImportEvent</code>事件，告诉<code>ConditionEvaluationReport</code>条件评估报告器对象来记录符合条件的自动配置类；（这个在 6 AutoConfigurationImportListener 这小节详细分析。）</p>\n<p>【5】 最后再将符合条件的自动配置类返回。</p>\n<p><img src=\"/../assets/1648015705244-a25e6c56-8b2e-461e-a528-4fa2bb44cddd.png\"></p>\n<p>总结了<code>AutoConfigurationEntry</code>方法主要的逻辑后，我们再来细看一下<code>AutoConfigurationImportSelector</code>的<code>filter</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// AutoConfigurationImportSelector.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> configurations<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">AutoConfigurationMetadata</span> autoConfigurationMetadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 将从spring.factories中获取的自动配置类转出字符串数组</span>\n\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> candidates <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStringArray</span><span class=\"token punctuation\">(</span>configurations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 定义skip数组，是否需要跳过。注意skip数组与candidates数组顺序一一对应</span>\n\t<span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> skip <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>candidates<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">boolean</span> skipped <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// getAutoConfigurationImportFilters方法：拿到OnBeanCondition，OnClassCondition和OnWebApplicationCondition</span>\n\t<span class=\"token comment\">// 然后遍历这三个条件类去过滤从spring.factories加载的大量配置类</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AutoConfigurationImportFilter</span> filter <span class=\"token operator\">:</span> <span class=\"token function\">getAutoConfigurationImportFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 调用各种aware方法，将beanClassLoader,beanFactory等注入到filter对象中，</span>\n\t\t<span class=\"token comment\">// 这里的filter对象即OnBeanCondition，OnClassCondition或OnWebApplicationCondition</span>\n\t\t<span class=\"token function\">invokeAwareMethods</span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 判断各种filter来判断每个candidate（这里实质要通过candidate(自动配置类)拿到其标注的</span>\n\t\t<span class=\"token comment\">// @ConditionalOnClass,@ConditionalOnBean和@ConditionalOnWebApplication里面的注解值）是否匹配，</span>\n\t\t<span class=\"token comment\">// 注意candidates数组与match数组一一对应</span>\n\t\t<span class=\"token comment\">/**********************【主线，重点关注】********************************/</span>\n\t\t<span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> match <span class=\"token operator\">=</span> filter<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>candidates<span class=\"token punctuation\">,</span> autoConfigurationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 遍历match数组，注意match顺序跟candidates的自动配置类一一对应</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> match<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 若有不匹配的话</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>match<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// 不匹配的将记录在skip数组，标志skip[i]为true，也与candidates数组一一对应</span>\n\t\t\t\tskip<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">// 因为不匹配，将相应的自动配置类置空</span>\n\t\t\t\tcandidates<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">// 标注skipped为true</span>\n\t\t\t\tskipped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 这里表示若所有自动配置类经过OnBeanCondition，OnClassCondition和OnWebApplicationCondition过滤后，全部都匹配的话，则全部原样返回</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>skipped<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> configurations<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 建立result集合来装匹配的自动配置类</span>\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>candidates<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> candidates<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 若skip[i]为false，则说明是符合条件的自动配置类，此时添加到result集合中</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>skip<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tresult<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>candidates<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 打印日志</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isTraceEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> numberFiltered <span class=\"token operator\">=</span> configurations<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Filtered \"</span> <span class=\"token operator\">+</span> numberFiltered <span class=\"token operator\">+</span> <span class=\"token string\">\" auto configuration class in \"</span>\n\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>NANOSECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">toMillis</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\" ms\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 最后返回符合条件的自动配置类</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>AutoConfigurationImportSelector</code>的<code>filter</code>方法主要做的事情就是调用<code>AutoConfigurationImportFilter</code>接口的<code>match</code>方法来判断每一个自动配置类上的条件注解（若有的话）<code>@ConditionalOnClass</code>,<code>@ConditionalOnBean</code>或<code>@ConditionalOnWebApplication</code>是否满足条件，若满足，则返回 true，说明匹配，若不满足，则返回 false 说明不匹配。</p>\n<p>我们现在知道<code>AutoConfigurationImportSelector</code>的<code>filter</code>方法主要做了什么事情就行了，现在先不用研究的过深，至于<code>AutoConfigurationImportFilter</code>接口的<code>match</code>方法将在 5 AutoConfigurationImportFilter 这小节再详细分析，填补一下我们前一篇条件注解源码分析中留下的坑。</p>\n<p>注意：我们坚持主线优先的原则，其他枝节代码这里不深究，以免丢了主线哈。</p>\n<p><a name=\"e8QHv\"></a></p>\n<h3 id=\"4-2-有选择的导入自动配置类\"><a href=\"#4-2-有选择的导入自动配置类\" class=\"headerlink\" title=\"4.2 有选择的导入自动配置类\"></a>4.2 有选择的导入自动配置类</h3><p>这里继续深究前面 4 分析 SpringBoot 自动配置原理这节标<code>【2】</code>处的 <code>this.group.selectImports</code>方法是如何进一步有选择的导入自动配置类的。直接看代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// AutoConfigurationImportSelector$AutoConfigurationGroup.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectImports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoConfigurationEntries<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 这里得到所有要排除的自动配置类的set集合</span>\n\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> allExclusions <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoConfigurationEntries<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AutoConfigurationEntry</span><span class=\"token operator\">::</span><span class=\"token function\">getExclusions</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 这里得到经过滤后所有符合条件的自动配置类的set集合</span>\n\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> processedConfigurations <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoConfigurationEntries<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AutoConfigurationEntry</span><span class=\"token operator\">::</span><span class=\"token function\">getConfigurations</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCollection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LinkedHashSet</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 移除掉要排除的自动配置类</span>\n\tprocessedConfigurations<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>allExclusions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 对标注有@Order注解的自动配置类进行排序，</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">sortAutoConfigurations</span><span class=\"token punctuation\">(</span>processedConfigurations<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token function\">getAutoConfigurationMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>importClassName<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>importClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，<code>selectImports</code>方法主要是针对经过排除掉<code>exclude</code>的和被<code>AutoConfigurationImportFilter</code>接口过滤后的满足条件的自动配置类再进一步排除<code>exclude</code>的自动配置类，然后再排序。逻辑很简单，不再详述。</p>\n<p>不过有个疑问，前面已经<code>exclude</code>过一次了，为何这里还要再<code>exclude</code>一次？</p>\n<p><a name=\"C0JbV\"></a></p>\n<h2 id=\"5-AutoConfigurationImportFilter\"><a href=\"#5-AutoConfigurationImportFilter\" class=\"headerlink\" title=\"5 AutoConfigurationImportFilter\"></a>5 AutoConfigurationImportFilter</h2><p>这里继续深究前面 4.1 节的 <code>AutoConfigurationImportSelector.filter</code>方法的过滤自动配置类的<code>boolean[] match = filter.match(candidates, autoConfigurationMetadata);</code>这句代码。</p>\n<p>因此我们继续分析<code>AutoConfigurationImportFilter</code>接口，分析其<code>match</code>方法，同时也是对前一篇<code>@ConditionalOnXxx</code>的源码分析文章中留下的坑进行填补。</p>\n<p><code>AutoConfigurationImportFilter</code>接口只有一个<code>match</code>方法用来过滤不符合条件的自动配置类。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AutoConfigurationImportFilter</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> autoConfigurationClasses<span class=\"token punctuation\">,</span>\n    \t\t<span class=\"token class-name\">AutoConfigurationMetadata</span> autoConfigurationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同样，在分析<code>AutoConfigurationImportFilter</code>接口的<code>match</code>方法前，我们先来看下其类关系图：</p>\n<p><img src=\"/../assets/1648015705150-2cdfba8b-637c-4102-9a15-a60e53b29316.png\"></p>\n<p>可以看到,<code>AutoConfigurationImportFilter</code>接口有一个具体的实现类<code>FilteringSpringBootCondition</code>，<code>FilteringSpringBootCondition</code>又有三个具体的子类：<code>OnClassCondition</code>,<code>OnBeanCondtition</code>和<code>OnWebApplicationCondition</code>。</p>\n<p><strong>那么这几个类之间的关系是怎样的呢？</strong></p>\n<p><code>FilteringSpringBootCondition</code>实现了<code>AutoConfigurationImportFilter</code>接口的<code>match</code>方法，然后在<code>FilteringSpringBootCondition</code>的<code>match</code>方法调用<code>getOutcomes</code>这个抽象模板方法返回自动配置类的匹配与否的信息。同时，最重要的是<code>FilteringSpringBootCondition</code>的三个子类<code>OnClassCondition</code>,<code>OnBeanCondtition</code>和<code>OnWebApplicationCondition</code>将会复写这个模板方法实现自己的匹配判断逻辑。</p>\n<p>好了，<code>AutoConfigurationImportFilter</code>接口的整体关系已经清楚了，现在我们再进入其具体实现类<code>FilteringSpringBootCondition</code>的<code>match</code>方法看看是其如何根据条件过滤自动配置类的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// FilteringSpringBootCondition.java</span>\n\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> autoConfigurationClasses<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">AutoConfigurationMetadata</span> autoConfigurationMetadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 创建评估报告</span>\n\t<span class=\"token class-name\">ConditionEvaluationReport</span> report <span class=\"token operator\">=</span> <span class=\"token class-name\">ConditionEvaluationReport</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 注意getOutcomes是模板方法，将spring.factories文件种加载的所有自动配置类传入</span>\n\t<span class=\"token comment\">// 子类（这里指的是OnClassCondition,OnBeanCondition和OnWebApplicationCondition类）去过滤</span>\n\t<span class=\"token comment\">// 注意outcomes数组存储的是不匹配的结果，跟autoConfigurationClasses数组一一对应</span>\n\t<span class=\"token comment\">/*****************************【主线，重点关注】*********************************************/</span>\n\t<span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> outcomes <span class=\"token operator\">=</span> <span class=\"token function\">getOutcomes</span><span class=\"token punctuation\">(</span>autoConfigurationClasses<span class=\"token punctuation\">,</span>\n\t\t\tautoConfigurationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> match <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>outcomes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 遍历outcomes,这里outcomes为null则表示匹配，不为null则表示不匹配</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> outcomes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">ConditionOutcome</span> outcome <span class=\"token operator\">=</span> outcomes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tmatch<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>outcome <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> outcome<span class=\"token punctuation\">.</span><span class=\"token function\">isMatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>match<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> outcomes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 这里若有某个类不匹配的话，此时调用父类SpringBootCondition的logOutcome方法打印日志</span>\n\t\t\t<span class=\"token function\">logOutcome</span><span class=\"token punctuation\">(</span>autoConfigurationClasses<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> outcomes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 并将不匹配情况记录到report</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>report <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\treport<span class=\"token punctuation\">.</span><span class=\"token function\">recordConditionEvaluation</span><span class=\"token punctuation\">(</span>autoConfigurationClasses<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\toutcomes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> match<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>FilteringSpringBootCondition</code>的<code>match</code>方法主要做的事情还是调用抽象模板方法<code>getOutcomes</code>来根据条件来过滤自动配置类，而复写<code>getOutcomes</code>模板方法的有三个子类，这里不再一一分析，<strong>只挑选</strong><code>**OnClassCondition**</code><strong>复写的</strong><code>**getOutcomes**</code><strong>方法进行分析。</strong></p>\n<p><a name=\"fVpZr\"></a></p>\n<h3 id=\"5-1-OnClassCondition\"><a href=\"#5-1-OnClassCondition\" class=\"headerlink\" title=\"5.1 OnClassCondition\"></a>5.1 OnClassCondition</h3><p>先直接上<code>OnClassCondition</code>复写的<code>getOutcomes</code>方法的代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// OnClassCondition.java</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getOutcomes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> autoConfigurationClasses<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">AutoConfigurationMetadata</span> autoConfigurationMetadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Split the work and perform half in a background thread. Using a single</span>\n\t<span class=\"token comment\">// additional thread seems to offer the best performance. More threads make</span>\n\t<span class=\"token comment\">// things worse</span>\n\t<span class=\"token comment\">// 这里经过测试用两个线程去跑的话性能是最好的，大于两个线程性能反而变差</span>\n\t<span class=\"token keyword\">int</span> split <span class=\"token operator\">=</span> autoConfigurationClasses<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【1】开启一个新线程去扫描判断已经加载的一半自动配置类</span>\n\t<span class=\"token class-name\">OutcomesResolver</span> firstHalfResolver <span class=\"token operator\">=</span> <span class=\"token function\">createOutcomesResolver</span><span class=\"token punctuation\">(</span>\n\t\t\tautoConfigurationClasses<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> split<span class=\"token punctuation\">,</span> autoConfigurationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【2】这里用主线程去扫描判断已经加载的一半自动配置类</span>\n\t<span class=\"token class-name\">OutcomesResolver</span> secondHalfResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StandardOutcomesResolver</span><span class=\"token punctuation\">(</span>\n\t\t\tautoConfigurationClasses<span class=\"token punctuation\">,</span> split<span class=\"token punctuation\">,</span> autoConfigurationClasses<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n\t\t\tautoConfigurationMetadata<span class=\"token punctuation\">,</span> <span class=\"token function\">getBeanClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【3】先让主线程去执行解析一半自动配置类是否匹配条件</span>\n\t<span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> secondHalf <span class=\"token operator\">=</span> secondHalfResolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolveOutcomes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【4】这里用新开启的线程取解析另一半自动配置类是否匹配</span>\n\t<span class=\"token comment\">// 注意为了防止主线程执行过快结束，resolveOutcomes方法里面调用了thread.join()来</span>\n\t<span class=\"token comment\">// 让主线程等待新线程执行结束，因为后面要合并两个线程的解析结果</span>\n\t<span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> firstHalf <span class=\"token operator\">=</span> firstHalfResolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolveOutcomes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 新建一个ConditionOutcome数组来存储自动配置类的筛选结果</span>\n\t<span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> outcomes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">[</span>autoConfigurationClasses<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 将前面两个线程的筛选结果分别拷贝进outcomes数组</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>firstHalf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> outcomes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> firstHalf<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>secondHalf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> outcomes<span class=\"token punctuation\">,</span> split<span class=\"token punctuation\">,</span> secondHalf<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 返回自动配置类的筛选结果</span>\n\t<span class=\"token keyword\">return</span> outcomes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，<code>OnClassCondition</code>的<code>getOutcomes</code>方法主要解析自动配置类是否符合匹配条件，当然这个匹配条件指自动配置类上的注解<code>@ConditionalOnClass</code>指定的类存不存在于<code>classpath</code>中，存在则返回匹配，不存在则返回不匹配。</p>\n<p>由于解析自动配置类是否匹配比较耗时，因此从上面代码中我们可以看到分别创建了<code>firstHalfResolver</code>和<code>secondHalfResolver</code>两个解析对象，这两个解析对象个分别对应一个线程去解析加载的自动配置类是否符合条件，最终将两个线程的解析自动配置类的匹配结果合并后返回。</p>\n<p>那么自动配置类是否符合条件的解析判断过程又是怎样的呢？现在我们分别来看一下上面代码注释标注的<code>【1】</code>，<code>【2】</code>，<code>【3】</code>和<code>【4】</code>处。</p>\n<p><a name=\"vV2Ij\"></a></p>\n<h4 id=\"5-1-1-createOutcomesResolver\"><a href=\"#5-1-1-createOutcomesResolver\" class=\"headerlink\" title=\"5.1.1 createOutcomesResolver\"></a>5.1.1 createOutcomesResolver</h4><p>这里对应前面 5.1 节的代码注释标注<code>【1】</code>处的<code>OutcomesResolver firstHalfResolver = createOutcomesResolver(...);</code>的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// OnClassCondition.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">OutcomesResolver</span> <span class=\"token function\">createOutcomesResolver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> autoConfigurationClasses<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AutoConfigurationMetadata</span> autoConfigurationMetadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 新建一个StandardOutcomesResolver对象</span>\n\t<span class=\"token class-name\">OutcomesResolver</span> outcomesResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StandardOutcomesResolver</span><span class=\"token punctuation\">(</span>\n\t\t\tautoConfigurationClasses<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> autoConfigurationMetadata<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token function\">getBeanClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// new一个ThreadedOutcomesResolver对象，并将StandardOutcomesResolver类型的outcomesResolver对象作为构造器参数传入</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadedOutcomesResolver</span><span class=\"token punctuation\">(</span>outcomesResolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 若上面开启的线程抛出AccessControlException异常，则返回StandardOutcomesResolver对象</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AccessControlException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> outcomesResolver<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>createOutcomesResolver</code>方法创建了一个封装了<code>StandardOutcomesResolver</code>类的<code>ThreadedOutcomesResolver</code>解析对象。 我们再来看下<code>ThreadedOutcomesResolver</code>这个线程解析类封装<code>StandardOutcomesResolver</code>这个对象的目的是什么？我们继续跟进代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// OnClassCondtion.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">ThreadedOutcomesResolver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OutcomesResolver</span> outcomesResolver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 这里开启一个新的线程，这个线程其实还是利用StandardOutcomesResolver的resolveOutcomes方法</span>\n\t<span class=\"token comment\">// 对自动配置类进行解析判断是否匹配</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>outcomes <span class=\"token operator\">=</span> outcomesResolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolveOutcomes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 开启线程</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到在构造<code>ThreadedOutcomesResolver</code>对象时候，原来是开启了一个线程，然后这个线程其实还是调用了刚传进来的<code>StandardOutcomesResolver</code>对象的<code>resolveOutcomes</code>方法去解析自动配置类。具体如何解析呢？稍后我们在分析<code>【3】</code>处代码<code>secondHalfResolver.resolveOutcomes();</code>的时候再深究。</p>\n<p><a name=\"uaVWx\"></a></p>\n<h4 id=\"5-1-2-new-StandardOutcomesResolver\"><a href=\"#5-1-2-new-StandardOutcomesResolver\" class=\"headerlink\" title=\"5.1.2 new StandardOutcomesResolver\"></a>5.1.2 new StandardOutcomesResolver</h4><p>这里对应前面 5.1 节的<code>【2】</code>处的代码<code>OutcomesResolver secondHalfResolver = new StandardOutcomesResolver(...);</code>，逻辑很简单，就是创建了一个<code>StandardOutcomesResolver</code>对象，用于后面解析自动配置类是否匹配，同时，新建的一个线程也是利用它来完成自动配置类的解析的。</p>\n<p><a name=\"wZ2wU\"></a></p>\n<h4 id=\"5-1-3-StandardOutcomesResolver-resolveOutcomes-方法\"><a href=\"#5-1-3-StandardOutcomesResolver-resolveOutcomes-方法\" class=\"headerlink\" title=\"5.1.3 StandardOutcomesResolver.resolveOutcomes 方法\"></a>5.1.3 StandardOutcomesResolver.resolveOutcomes 方法</h4><p>这里对应前面 5.1 节标注的<code>【3】</code>的代码<code>ConditionOutcome[] secondHalf = secondHalfResolver.resolveOutcomes();</code>。</p>\n<p>这里<code>StandardOutcomesResolver.resolveOutcomes</code>方法承担了解析自动配置类匹配与否的全部逻辑，是我们要重点分析的方法，<code>resolveOutcomes</code>方法最终把解析的自动配置类的结果赋给<code>secondHalf</code>数组。那么它是如何解析自动配置类是否匹配条件的呢？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// OnClassCondition$StandardOutcomesResolver.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">resolveOutcomes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 再调用getOutcomes方法来解析</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getOutcomes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoConfigurationClasses<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoConfigurationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getOutcomes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> autoConfigurationClasses<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AutoConfigurationMetadata</span> autoConfigurationMetadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 只要autoConfigurationMetadata没有存储相关自动配置类，那么outcome默认为null，则说明匹配</span>\n\t<span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> outcomes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">[</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 遍历每一个自动配置类</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">String</span> autoConfigurationClass <span class=\"token operator\">=</span> autoConfigurationClasses<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// TODO 对于autoConfigurationMetadata有个疑问：为何有些自动配置类的条件注解能被加载到autoConfigurationMetadata，而有些又不能，比如自己定义的一个自动配置类HelloWorldEnableAutoConfiguration就没有被存到autoConfigurationMetadata中</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>autoConfigurationClass <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 这里取出注解在AutoConfiguration自动配置类类的@ConditionalOnClass注解的指定类的全限定名，</span>\n\t\t\t<span class=\"token comment\">// 举个栗子，看下面的KafkaStreamsAnnotationDrivenConfiguration这个自动配置类</span>\n\t\t\t<span class=\"token comment\">/**\n\t\t\t * @ConditionalOnClass(StreamsBuilder.class)\n\t\t\t * class KafkaStreamsAnnotationDrivenConfiguration &#123;\n\t\t\t * // 省略无关代码\n\t\t\t * &#125;\n\t\t\t */</span>\n\t\t\t<span class=\"token comment\">// 那么取出的就是StreamsBuilder类的全限定名即candidates = org.apache.kafka.streams.StreamsBuilder</span>\n\t\t\t<span class=\"token class-name\">String</span> candidates <span class=\"token operator\">=</span> autoConfigurationMetadata\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>autoConfigurationClass<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ConditionalOnClass\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 因为这里是处理某个类是否存在于classpath中，所以传入的key是ConditionalOnClass</span>\n\t\t\t<span class=\"token comment\">// 若自动配置类标有ConditionalOnClass注解且有值，此时调用getOutcome判断是否存在于类路径中</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>candidates <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// 拿到自动配置类注解@ConditionalOnClass的值后，再调用getOutcome方法去判断匹配结果,若该类存在于类路径，则getOutcome返回null，否则非null</span>\n\t\t\t\t<span class=\"token comment\">/*******************【主线，重点关注】******************/</span>\n\t\t\t\toutcomes<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getOutcome</span><span class=\"token punctuation\">(</span>candidates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> outcomes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>StandardOutcomesResolver.resolveOutcomes</code>的方法中再次调用<code>getOutcomes</code>方法，主要是从<code>autoConfigurationMetadata</code>对象中获取到自动配置类上的注解<code>@ConditionalOnClass</code>指定的类的全限定名，然后作为参数传入<code>getOutcome</code>方法用于去类路径加载该类，若能加载到则说明注解<code>@ConditionalOnClass</code>满足条件，此时说明自动配置类匹配成功。</p>\n<p>但是别忘了，这里只是过了<code>@ConditionalOnClass</code>注解这一关，若自动配置类还有其他注解比如<code>@ConditionalOnBean</code>，若该<code>@ConditionalOnBean</code>注解不满足条件的话，同样最终结果是不匹配的。这里扯的有点远，我们回到<code>OnClassCondtion</code>的判断逻辑，继续进入<code>getOutcome</code>方法看它是如何去判断<code>@ConditionalOnClass</code>注解满不满足条件的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// OnClassCondition$StandardOutcomesResolver.java</span>\n\n<span class=\"token comment\">// 返回的outcome记录的是不匹配的情况，不为null，则说明不匹配；为null，则说明匹配</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">ConditionOutcome</span> <span class=\"token function\">getOutcome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> candidates<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// candidates的形式为“org.springframework.boot.autoconfigure.aop.AopAutoConfiguration.ConditionalOnClass=org.aspectj.lang.annotation.Aspect,org.aspectj.lang.reflect.Advice,org.aspectj.weaver.AnnotatedElement”</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 自动配置类上@ConditionalOnClass的值只有一个的话，直接调用getOutcome方法判断是否匹配</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>candidates<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 看到因为传入的参数是 ClassNameFilter.MISSING，因此可以猜测这里应该是得到不匹配的结果</span>\n\t\t\t<span class=\"token comment\">/******************【主线，重点关注】********************/</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getOutcome</span><span class=\"token punctuation\">(</span>candidates<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNameFilter</span><span class=\"token punctuation\">.</span>MISSING<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanClassLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 自动配置类上@ConditionalOnClass的值有多个的话，则遍历每个值（其值以逗号，分隔）</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> candidate <span class=\"token operator\">:</span> <span class=\"token class-name\">StringUtils</span>\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">commaDelimitedListToStringArray</span><span class=\"token punctuation\">(</span>candidates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">ConditionOutcome</span> outcome <span class=\"token operator\">=</span> <span class=\"token function\">getOutcome</span><span class=\"token punctuation\">(</span>candidate<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token class-name\">ClassNameFilter</span><span class=\"token punctuation\">.</span>MISSING<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanClassLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 可以看到，这里只要有一个不匹配的话，则返回不匹配结果</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>outcome <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> outcome<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// We'll get another chance later</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，<code>getOutcome</code>方法再次调用重载方法<code>getOutcome</code>进一步去判断注解<code>@ConditionalOnClass</code>指定的类存不存在类路径中，跟着主线继续跟进去：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// OnClassCondition$StandardOutcomesResolver.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">ConditionOutcome</span> <span class=\"token function\">getOutcome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">ClassNameFilter</span> classNameFilter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassLoader</span> classLoader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 调用classNameFilter的matches方法来判断`@ConditionalOnClass`指定的类存不存在类路径中</span>\n\t<span class=\"token comment\">/******************【主线，重点关注】********************/</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>classNameFilter<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">,</span> classLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 这里调用classNameFilter去判断className是否存在于类路径中，其中ClassNameFilter又分为PRESENT和MISSING两种;目前只看到ClassNameFilter为MISSING的调用情况，所以默认为true的话记录不匹配信息；若传入ClassNameFilter为PRESENT的话，估计还要再写一个else分支</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">noMatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionMessage</span>\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">forCondition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConditionalOnClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">didNotFind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"required class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">items</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Style</span><span class=\"token punctuation\">.</span>QUOTE<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们一层一层的剥，最终剥到了最底层了，这个真的需要足够耐心，没办法，源码只能一点一点的啃，嘿嘿。可以看到最终是调用<code>ClassNameFilter</code>的<code>matches</code>方法来判断<code>@ConditionalOnClass</code>指定的类存不存在类路径中,若不存在的话，则返回不匹配。</p>\n<p>我们继续跟进<code>ClassNameFilter</code>的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// FilteringSpringBootCondition.java</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ClassNameFilter</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 这里表示指定的类存在于类路径中，则返回true</span>\n\tPRESENT <span class=\"token punctuation\">&#123;</span>\n\n\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassLoader</span> classLoader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">,</span> classLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">// 这里表示指定的类不存在于类路径中，则返回true</span>\n\tMISSING <span class=\"token punctuation\">&#123;</span>\n\n\t\t<span class=\"token annotation punctuation\">@Override</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassLoader</span> classLoader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">,</span> classLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若classpath不存在className这个类，则返回true</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 这又是一个抽象方法，分别被PRESENT和MISSING枚举类实现</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassLoader</span> classLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 检查指定的类是否存在于类路径中</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassLoader</span> classLoader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>classLoader <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tclassLoader <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 利用类加载器去加载相应类，若没有抛出异常则说明类路径中存在该类，此时返回true</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">,</span> classLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 若不存在于类路径中，此时抛出的异常将catch住，返回false。</span>\n\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 利用类加载器去加载指定的类</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassLoader</span> classLoader<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>classLoader <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n复制代码\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>ClassNameFilter</code>原来是<code>FilteringSpringBootCondition</code>的一个内部枚举类，其实现了判断指定类是否存在于<code>classpath</code>中的逻辑，这个类很简单，这里不再详述。</p>\n<p><a name=\"v9HIl\"></a></p>\n<h4 id=\"5-1-4-ThreadedOutcomesResolver-resolveOutcomes-方法\"><a href=\"#5-1-4-ThreadedOutcomesResolver-resolveOutcomes-方法\" class=\"headerlink\" title=\"5.1.4 ThreadedOutcomesResolver.resolveOutcomes 方法\"></a>5.1.4 ThreadedOutcomesResolver.resolveOutcomes 方法</h4><p>这里对应前面 5.1 节的标注的<code>【4】</code>的代码<code>ConditionOutcome[] firstHalf = firstHalfResolver.resolveOutcomes()</code>。</p>\n<p>前面分析 5.1.3 StandardOutcomesResolver.resolveOutcomes 方法已经刨根追底，陷入细节比较深，现在我们需要跳出来继续看前面标注的<code>【4】</code>的代码<code>ConditionOutcome[] firstHalf = firstHalfResolver.resolveOutcomes()</code>的方法哈。</p>\n<p>这里是用新开启的线程去调用<code>StandardOutcomesResolver.resolveOutcomes</code>方法解析另一半自动配置类是否匹配，因为是新线程，这里很可能会出现这么一种情况：主线程解析完属于自己解析的一半自动配置类后，那么久继续往下跑了，此时不会等待新开启的子线程的。</p>\n<p>因此，为了让主线程解析完后，我们需要让主线程继续等待正在解析的子线程，直到子线程结束。那么我们继续跟进代码区看下<code>ThreadedOutcomesResolver.resolveOutcomes</code>方法是怎样实现让主线程等待子线程的：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// OnClassCondition$ThreadedOutcomesResolver.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConditionOutcome</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">resolveOutcomes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 调用子线程的Join方法，让主线程等待</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 若子线程结束后，此时返回子线程的解析结果</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>outcomes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到用了<code>Thread.join()</code>方法来让主线程等待正在解析自动配置类的子线程，这里应该也可以用<code>CountDownLatch</code>来让主线程等待子线程结束。最终将子线程解析后的结果赋给<code>firstHalf</code>数组。</p>\n<p><a name=\"zM33N\"></a></p>\n<h3 id=\"5-2-OnBeanCondition-和-OnWebApplicationCondition\"><a href=\"#5-2-OnBeanCondition-和-OnWebApplicationCondition\" class=\"headerlink\" title=\"5.2 OnBeanCondition 和 OnWebApplicationCondition\"></a>5.2 OnBeanCondition 和 OnWebApplicationCondition</h3><p>前面 5.1 OnClassCondition 节深入分析了<code>OnClassCondition</code>是如何过滤自动配置类的，那么自动配置类除了要经过<code>OnClassCondition</code>的过滤，还要经过<code>OnBeanCondition</code>和<code>OnWebApplicationCondition</code>这两个条件类的过滤，这里不再详述，有兴趣的小伙伴可自行分析。</p>\n<p><a name=\"hcCQY\"></a></p>\n<h2 id=\"6-AutoConfigurationImportListener\"><a href=\"#6-AutoConfigurationImportListener\" class=\"headerlink\" title=\"6 AutoConfigurationImportListener\"></a>6 AutoConfigurationImportListener</h2><p>这里继续深究前面 4.1 节的 <code>AutoConfigurationImportSelector.getAutoConfigurationEntry</code>方法的触发自动配置类过滤完毕的事件<code>fireAutoConfigurationImportEvents(configurations, exclusions);</code>这句代码。</p>\n<p>我们直接点进<code>fireAutoConfigurationImportEvents</code>方法看看其是如何触发事件的：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// AutoConfigurationImportSelector.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fireAutoConfigurationImportEvents</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> configurations<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> exclusions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 从spring.factories总获取到AutoConfigurationImportListener即ConditionEvaluationReportAutoConfigurationImportListener</span>\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AutoConfigurationImportListener</span><span class=\"token punctuation\">></span></span> listeners <span class=\"token operator\">=</span> <span class=\"token function\">getAutoConfigurationImportListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>listeners<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 新建一个AutoConfigurationImportEvent事件</span>\n\t\t<span class=\"token class-name\">AutoConfigurationImportEvent</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AutoConfigurationImportEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n\t\t\t\tconfigurations<span class=\"token punctuation\">,</span> exclusions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 遍历刚获取到的AutoConfigurationImportListener</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AutoConfigurationImportListener</span> listener <span class=\"token operator\">:</span> listeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 这里调用各种Aware方法用于触发事件前赋值，比如设置factory,environment等</span>\n\t\t\t<span class=\"token function\">invokeAwareMethods</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 真正触发AutoConfigurationImportEvent事件即回调listener的onXXXEveent方法。这里用于记录自动配置类的评估信息</span>\n\t\t\tlistener<span class=\"token punctuation\">.</span><span class=\"token function\">onAutoConfigurationImportEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如上，<code>fireAutoConfigurationImportEvents</code>方法做了以下两件事情：</p>\n<p>1、调用<code>getAutoConfigurationImportListeners</code>方法从<code>spring.factoris</code>配置文件获取实现<code>AutoConfigurationImportListener</code>接口的事件监听器；如下图，可以看到获取的是<code>ConditionEvaluationReportAutoConfigurationImportListener</code>：</p>\n<p><img src=\"/../assets/1648015705144-884f4281-2466-4764-91c3-6b53e5d0cc75.png\"></p>\n<p>2、遍历获取的各个事件监听器，然后调用监听器各种<code>Aware</code>方法给监听器赋值，最后再依次回调事件监听器的<code>onAutoConfigurationImportEvent</code>方法，执行监听事件的逻辑。</p>\n<p>此时我们再来看下<code>ConditionEvaluationReportAutoConfigurationImportListener</code>监听器监听到事件后，它的<code>onAutoConfigurationImportEvent</code>方法究竟做了哪些事情：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConditionEvaluationReportAutoConfigurationImportListener.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAutoConfigurationImportEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AutoConfigurationImportEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 获取到条件评估报告器对象</span>\n\t\t<span class=\"token class-name\">ConditionEvaluationReport</span> report <span class=\"token operator\">=</span> <span class=\"token class-name\">ConditionEvaluationReport</span>\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 将符合条件的自动配置类记录到unconditionalClasses集合中</span>\n\t\treport<span class=\"token punctuation\">.</span><span class=\"token function\">recordEvaluationCandidates</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getCandidateConfigurations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 将要exclude的自动配置类记录到exclusions集合中</span>\n\t\treport<span class=\"token punctuation\">.</span><span class=\"token function\">recordExclusions</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getExclusions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，<code>ConditionEvaluationReportAutoConfigurationImportListener</code>监听器监听到事件后，做的事情很简单，只是分别记录下符合条件和被<code>exclude</code>的自动配置类。</p>\n<p><a name=\"oLZfV\"></a></p>\n<h2 id=\"7-AutoConfigurationPackages\"><a href=\"#7-AutoConfigurationPackages\" class=\"headerlink\" title=\"7 AutoConfigurationPackages\"></a>7 AutoConfigurationPackages</h2><p>前面已经详述了 SpringBoot 的自动配置原理了，最后的最后，跟 SpringBoot 自动配置有关的注解<code>@AutoConfigurationPackage</code>还没分析，我们来看下这个注解的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AutoConfigurationPackages<span class=\"token punctuation\">.</span>Registrar</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">AutoConfigurationPackage</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>@AutoConfigurationPackage</code>注解是跟 SpringBoot 自动配置所在的包相关的，即将 添加该注解的类所在的 package 作为 自动配置 package 进行管理。</p>\n<p>接下来我们再看看<code>AutoConfigurationPackages.Registrar</code>类是干嘛的，直接看源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//AutoConfigurationPackages.Registrar.java</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Registrar</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ImportBeanDefinitionRegistrar</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DeterminableImports</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerBeanDefinitions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> metadata<span class=\"token punctuation\">,</span>\n    \t\t<span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">register</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PackageImport</span><span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPackageName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">determineImports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> metadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singleton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PackageImport</span><span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>Registrar</code>类是<code>AutoConfigurationPackages</code>的静态内部类，实现了<code>ImportBeanDefinitionRegistrar</code>和<code>DeterminableImports</code>两个接口。现在我们主要来关注下<code>Registrar</code>实现的<code>registerBeanDefinitions</code>方法,顾名思义，这个方法是注册<code>bean</code>定义的方法。看到它又调用了<code>AutoConfigurationPackages</code>的<code>register</code>方法，继续跟进源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// AutoConfigurationPackages.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> packageNames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">.</span><span class=\"token function\">containsBeanDefinition</span><span class=\"token punctuation\">(</span>BEAN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">BeanDefinition</span> beanDefinition <span class=\"token operator\">=</span> registry<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span>BEAN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">ConstructorArgumentValues</span> constructorArguments <span class=\"token operator\">=</span> beanDefinition\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructorArgumentValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconstructorArguments<span class=\"token punctuation\">.</span><span class=\"token function\">addIndexedArgumentValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token function\">addBasePackages</span><span class=\"token punctuation\">(</span>constructorArguments<span class=\"token punctuation\">,</span> packageNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">GenericBeanDefinition</span> beanDefinition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbeanDefinition<span class=\"token punctuation\">.</span><span class=\"token function\">setBeanClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BasePackages</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbeanDefinition<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructorArgumentValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addIndexedArgumentValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\t\tpackageNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbeanDefinition<span class=\"token punctuation\">.</span><span class=\"token function\">setRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinition</span><span class=\"token punctuation\">.</span>ROLE_INFRASTRUCTURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tregistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span>BEAN<span class=\"token punctuation\">,</span> beanDefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如上，可以看到<code>register</code>方法注册了一个<code>packageNames</code>即自动配置类注解<code>@EnableAutoConfiguration</code>所在的所在的包名相关的<code>bean</code>。那么注册这个<code>bean</code>的目的是为了什么呢？ 结合官网注释知道，注册这个自动配置包名相关的<code>bean</code>是为了被其他地方引用，比如<code>JPA entity scanner</code>，具体拿来干什么久不知道了，这里不再深究了。</p>\n<p><a name=\"T6PIa\"></a></p>\n<h2 id=\"8-小结\"><a href=\"#8-小结\" class=\"headerlink\" title=\"8 小结\"></a>8 小结</h2><p>好了，SpringBoot 的自动配置的源码分析就到这里了，比较长，有些地方也很深入细节，读完需要一定的耐心。</p>\n<p>最后，我们再总结下 SpringBoot 自动配置的原理，主要做了以下事情：</p>\n<ol>\n<li>从 <code>spring.factories</code> 配置文件中加载自动配置类；</li>\n<li>加载的自动配置类中排除掉<code>@EnableAutoConfiguration</code>注解的<code>exclude</code>属性指定的自动配置类；</li>\n<li>然后再用<code>AutoConfigurationImportFilter</code>接口去过滤自动配置类是否符合其标注注解（若有标注的话）<code>@ConditionalOnClass</code>,<code>@ConditionalOnBean</code>和<code>@ConditionalOnWebApplication</code>的条件，若都符合的话则返回匹配结果；</li>\n<li>然后触发<code>AutoConfigurationImportEvent</code>事件，告诉<code>ConditionEvaluationReport</code>条件评估报告器对象来分别记录符合条件和<code>exclude</code>的自动配置类。</li>\n<li>最后 spring 再将最后筛选后的自动配置类导入 IOC 容器中</li>\n</ol>\n<p><strong>最后留个自己的疑问，还望知道答案的大佬解答，这里表示感谢</strong>：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为了避免加载不必要的自动配置类造成内存浪费，<code>FilteringSpringBootCondition</code>用于过滤<code>spring.factories</code>文件的自动配置类，而<code>FilteringSpringBootCondition</code>为啥只有<code>OnOnBeanCondition</code>,<code>OnClassCondition</code>和<code>onWebApplicationCondition</code>这三个条件类用于过滤，为啥没有<code>onPropertyCondtion</code>，<code>onResourceCondition</code>等条件类来过滤自动配置类呢？</p></blockquote>\n<h1 id=\"5-SpringBoot的配置属性值是如何绑定的？\"><a href=\"#5-SpringBoot的配置属性值是如何绑定的？\" class=\"headerlink\" title=\"5 SpringBoot的配置属性值是如何绑定的？\"></a>5 SpringBoot的配置属性值是如何绑定的？</h1><p><a name=\"75674917\"></a></p>\n<h2 id=\"1-前言-4\"><a href=\"#1-前言-4\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h2><p>温故而知新，我们来简单回顾一下上篇的内容，上一篇我们分析了 SpringBoot 的自动配置的相关源码，自动配置相关源码主要有以下几个重要的步骤：</p>\n<ol>\n<li>从 <code>spring.factories</code> 配置文件中加载自动配置类；</li>\n<li>加载的自动配置类中排除掉<code>@EnableAutoConfiguration</code>注解的<code>exclude</code>属性指定的自动配置类；</li>\n<li>然后再用<code>AutoConfigurationImportFilter</code>接口去过滤自动配置类是否符合其标注注解（若有标注的话）<code>@ConditionalOnClass</code>,<code>@ConditionalOnBean</code>和<code>@ConditionalOnWebApplication</code>的条件，若都符合的话则返回匹配结果；</li>\n<li>然后触发<code>AutoConfigurationImportEvent</code>事件，告诉<code>ConditionEvaluationReport</code>条件评估报告器对象来分别记录符合条件和<code>exclude</code>的自动配置类。</li>\n<li>最后 spring 再将最后筛选后的自动配置类导入 IOC 容器中</li>\n</ol>\n<p>本篇继续来分析 SpringBoot 的自动配置的相关源码，我们来分析下<code>@EnableConfigurationProperties</code>和<code>@EnableConfigurationProperties</code>这两个注解，来探究下<strong>外部配置属性值是如何被绑定到 <strong><code>**@ConfigurationProperties**</code></strong> 注解的类属性中的？</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>举个栗子：以配置 web 项目的服务器端口为例，若我们要将服务器端口配置为<code>8081</code>，那么我们会在<code>application.properties</code>配置文件中配置<code>server.port=8081</code>，此时该配置值<code>8081</code>就将会绑定到被<code>@ConfigurationProperties</code>注解的类<code>ServerProperties</code>的属性<code>port</code>上，从而使得配置生效。</p></blockquote>\n<p><a name=\"abf1d32b\"></a></p>\n<h2 id=\"2-EnableConfigurationProperties\"><a href=\"#2-EnableConfigurationProperties\" class=\"headerlink\" title=\"2 @EnableConfigurationProperties\"></a>2 @EnableConfigurationProperties</h2><p>我们接着前面的设置服务器端口的栗子来分析，我们先直接来看看<code>ServerProperties</code>的源码，应该能找到源码的入口：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"server\"</span><span class=\"token punctuation\">,</span> ignoreUnknownFields <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServerProperties</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/**\n\t * Server HTTP port.\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> port<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// ...省略非关键代码</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，<code>ServerProperties</code>类上标注了<code>@ConfigurationProperties</code>这个注解，服务器属性配置前缀为<code>server</code>，是否忽略未知的配置值（<code>ignoreUnknownFields</code>）设置为<code>true</code>。</p>\n<p>那么我们再来看下<code>@ConfigurationProperties</code>这个注解的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">ConfigurationProperties</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">// 前缀别名</span>\n\t<span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prefix\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 前缀</span>\n\t<span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">String</span> <span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 忽略无效的配置属性</span>\n\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">ignoreInvalidFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 忽略未知的配置属性</span>\n\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">ignoreUnknownFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>@ConfigurationProperties</code>这个注解的作用就是将外部配置的配置值绑定到其注解的类的属性上，可以作用于配置类或配置类的方法上。可以看到<code>@ConfigurationProperties</code>注解除了有设置前缀，是否忽略一些不存在或无效的配置等属性等外，这个注解没有其他任何的处理逻辑，可以看到<code>@ConfigurationProperties</code>是一个标志性的注解，<strong>源码入口不在这里</strong>。</p>\n<p>这里讲的是服务器的自动配置，自然而然的，我们来看下自动配置类<code>ServletWebServerFactoryAutoConfiguration</code>的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerProperties</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...省略非关键注解</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletWebServerFactoryAutoConfiguration</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// ...省略非关键代码</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了突出重点，我已经把<code>ServletWebServerFactoryAutoConfiguration</code>的非关键代码和非关键注解省略掉了。可以看到，<code>ServletWebServerFactoryAutoConfiguration</code>自动配置类中有一个<code>@EnableConfigurationProperties</code>注解，且注解值是前面讲的<code>ServerProperties.class</code>，因此<code>@EnableConfigurationProperties</code>注解肯定就是我们关注的重点了。</p>\n<p>同样，再来看下<code>@EnableConfigurationProperties</code>注解的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnableConfigurationPropertiesImportSelector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">EnableConfigurationProperties</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">// 这个值指定的类就是@ConfigurationProperties注解标注的类，其将会被注册到spring容器中</span>\n\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>@EnableConfigurationProperties</code>注解的主要作用就是为<code>@ConfigurationProperties</code>注解标注的类提供支持，即对将外部配置属性值（比如 application.properties 配置值）绑定到<code>@ConfigurationProperties</code>标注的类的属性中。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意</strong>：SpringBoot 源码中还存在了<code>ConfigurationPropertiesAutoConfiguration</code>这个自动配置类，同时<code>spring.factories</code>配置文件中的<code>EnableAutoConfiguration</code>接口也配置了<code>ConfigurationPropertiesAutoConfiguration</code>，这个自动配置类上也有<code>@EnableConfigurationProperties</code>这个注解，堆属性绑定进行了默认开启。</p></blockquote>\n<p><strong>那么，</strong><code>**@EnableConfigurationProperties**</code><strong>这个注解对属性绑定提供怎样的支持呢？</strong></p>\n<p>可以看到<code>@EnableConfigurationProperties</code>这个注解上还标注了<code>@Import(EnableConfigurationPropertiesImportSelector.class)</code>，其导入了<code>EnableConfigurationPropertiesImportSelector</code>，因此可以肯定的是<code>@EnableConfigurationProperties</code>这个注解对属性绑定提供的支持必定跟<code>EnableConfigurationPropertiesImportSelector</code>有关。</p>\n<p>到了这里，<code>EnableConfigurationPropertiesImportSelector</code>这个哥们是我们接下来要分析的对象，那么我们下面继续来分析<code>EnableConfigurationPropertiesImportSelector</code>是如何承担将外部配置属性值绑定到<code>@ConfigurationProperties</code>标注的类的属性中的。</p>\n<p><a name=\"b82ffece\"></a></p>\n<h2 id=\"3-EnableConfigurationPropertiesImportSelector\"><a href=\"#3-EnableConfigurationPropertiesImportSelector\" class=\"headerlink\" title=\"3 EnableConfigurationPropertiesImportSelector\"></a>3 EnableConfigurationPropertiesImportSelector</h2><p><code>EnableConfigurationPropertiesImportSelector</code>类的作用主要用来处理外部属性绑定的相关逻辑，其实现了<code>ImportSelector</code>接口，我们都知道，实现<code>ImportSelector</code>接口的<code>selectImports</code>方法可以向容器中注册 bean。</p>\n<p>那么，我们来看下<code>EnableConfigurationPropertiesImportSelector</code>覆写的<code>selectImports</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// EnableConfigurationPropertiesImportSelector.java</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EnableConfigurationPropertiesImportSelector</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ImportSelector</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// IMPORTS数组即是要向spring容器中注册的bean</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> IMPORTS <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token class-name\">ConfigurationPropertiesBeanRegistrar</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">ConfigurationPropertiesBindingPostProcessorRegistrar</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">selectImports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> metadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 返回ConfigurationPropertiesBeanRegistrar和ConfigurationPropertiesBindingPostProcessorRegistrar的全限定名</span>\n\t\t<span class=\"token comment\">// 即上面两个类将会被注册到Spring容器中</span>\n\t\t<span class=\"token keyword\">return</span> IMPORTS<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>EnableConfigurationPropertiesImportSelector</code>类中的<code>selectImports</code>方法中返回的是<code>IMPORTS</code>数组，而这个<code>IMPORTS</code>是一个常量数组，值是<code>ConfigurationPropertiesBeanRegistrar</code>和<code>ConfigurationPropertiesBindingPostProcessorRegistrar</code>。即<code>EnableConfigurationPropertiesImportSelector</code>的作用是向 Spring 容器中注册了<code>ConfigurationPropertiesBeanRegistrar</code>和<code>ConfigurationPropertiesBindingPostProcessorRegistrar</code>这两个<code>bean</code>。</p>\n<p>我们在<code>EnableConfigurationPropertiesImportSelector</code>类中没看到处理外部属性绑定的相关逻辑，其只是注册了<code>ConfigurationPropertiesBeanRegistrar</code>和<code>ConfigurationPropertiesBindingPostProcessorRegistrar</code>这两个<code>bean</code>,接下来我们再看下注册的这两个<code>bean</code>类。</p>\n<p><a name=\"e1995600\"></a></p>\n<h2 id=\"4-ConfigurationPropertiesBeanRegistrar\"><a href=\"#4-ConfigurationPropertiesBeanRegistrar\" class=\"headerlink\" title=\"4 ConfigurationPropertiesBeanRegistrar\"></a>4 ConfigurationPropertiesBeanRegistrar</h2><p>我们先来看下<code>ConfigurationPropertiesBeanRegistrar</code>这个类。</p>\n<p><code>ConfigurationPropertiesBeanRegistrar</code>是<code>EnableConfigurationPropertiesImportSelector</code>的内部类，其实现了<code>ImportBeanDefinitionRegistrar</code>接口，覆写了<code>registerBeanDefinitions</code>方法。可见，<code>ConfigurationPropertiesBeanRegistrar</code>又是用来注册一些<code>bean</code> <code>definition</code>的，即也是向<code>Spring</code>容器中注册一些 bean。</p>\n<p>先看下<code>ConfigurationPropertiesBeanRegistrar</code>的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationPropertiesBeanRegistrar$ConfigurationPropertiesBeanRegistrar.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfigurationPropertiesBeanRegistrar</span>\n\t\t\t<span class=\"token keyword\">implements</span> <span class=\"token class-name\">ImportBeanDefinitionRegistrar</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerBeanDefinitions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> metadata<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// metadata是AnnotationMetadataReadingVisitor对象，存储了某个配置类的元数据</span>\n\t\t\t<span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// （1）得到@EnableConfigurationProperties注解的所有属性值,</span>\n\t\t<span class=\"token comment\">// 比如@EnableConfigurationProperties(ServerProperties.class),那么得到的值是ServerProperties.class</span>\n\t\t<span class=\"token comment\">// （2）然后再将得到的@EnableConfigurationProperties注解的所有属性值注册到容器中</span>\n\t\t<span class=\"token function\">getTypes</span><span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span><span class=\"token punctuation\">)</span> registry<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在<code>ConfigurationPropertiesBeanRegistrar</code>实现的<code>registerBeanDefinitions</code>中，可以看到主要做了两件事：</p>\n<ol>\n<li>调用<code>getTypes</code>方法获取<code>@EnableConfigurationProperties</code>注解的属性值<code>XxxProperties</code>；</li>\n<li>调用<code>register</code>方法将获取的属性值<code>XxxProperties</code>注册到<code>Spring</code>容器中，用于以后和外部属性绑定时使用。</li>\n</ol>\n<p>我们来看下<code>getTypes</code>方法的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationPropertiesBeanRegistrar$ConfigurationPropertiesBeanRegistrar.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getTypes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> metadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 得到@EnableConfigurationProperties注解的所有属性值,</span>\n\t<span class=\"token comment\">// 比如@EnableConfigurationProperties(ServerProperties.class),那么得到的值是ServerProperties.class</span>\n\t<span class=\"token class-name\">MultiValueMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> attributes <span class=\"token operator\">=</span> metadata\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">getAllAnnotationAttributes</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token class-name\">EnableConfigurationProperties</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 将属性值取出装进List集合并返回</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">collectClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>attributes <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> attributes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">:</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>getTypes</code>方法里面的逻辑很简单即将<code>@EnableConfigurationProperties</code>注解里面的属性值<code>XxxProperties</code>（比如<code>ServerProperties.class</code>）取出并装进<code>List</code>集合并返回。</p>\n<p>由<code>getTypes</code>方法拿到<code>@EnableConfigurationProperties</code>注解里面的属性值<code>XxxProperties</code>（比如<code>ServerProperties.class</code>）后，此时再遍历将<code>XxxProperties</code>逐个注册进<code>Spring</code>容器中，我们来看下<code>register</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationPropertiesBeanRegistrar$ConfigurationPropertiesBeanRegistrar.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 得到type的名字，一般用类的全限定名作为bean name</span>\n\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 根据bean name判断beanFactory容器中是否包含该bean</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">containsBeanDefinition</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 若不包含，那么注册bean definition</span>\n\t\t<span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们再来看下由<code>EnableConfigurationPropertiesImportSelector</code>导入的另一个类<code>ConfigurationPropertiesBindingPostProcessorRegistrar</code>又是干嘛的呢？</p>\n<p><a name=\"58f17d9d\"></a></p>\n<h2 id=\"5-ConfigurationPropertiesBindingPostProcessorRegistrar\"><a href=\"#5-ConfigurationPropertiesBindingPostProcessorRegistrar\" class=\"headerlink\" title=\"5 ConfigurationPropertiesBindingPostProcessorRegistrar\"></a>5 ConfigurationPropertiesBindingPostProcessorRegistrar</h2><p>可以看到<code>ConfigurationPropertiesBindingPostProcessorRegistrar</code>类名字又是以<code>Registrar</code>单词为结尾，说明其肯定又是导入一些<code>bean</code> <code>definition</code>的。直接看源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationPropertiesBindingPostProcessorRegistrar.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfigurationPropertiesBindingPostProcessorRegistrar</span>\n\t\t<span class=\"token keyword\">implements</span> <span class=\"token class-name\">ImportBeanDefinitionRegistrar</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerBeanDefinitions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> importingClassMetadata<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 若容器中没有注册ConfigurationPropertiesBindingPostProcessor这个处理属性绑定的后置处理器，</span>\n\t\t<span class=\"token comment\">// 那么将注册ConfigurationPropertiesBindingPostProcessor和ConfigurationBeanFactoryMetadata这两个bean</span>\n\t\t<span class=\"token comment\">// 注意onApplicationEnvironmentPreparedEvent事件加载配置属性在先，然后再注册一些后置处理器用来处理这些配置属性</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>registry<span class=\"token punctuation\">.</span><span class=\"token function\">containsBeanDefinition</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token class-name\">ConfigurationPropertiesBindingPostProcessor</span><span class=\"token punctuation\">.</span>BEAN_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// (1)注册ConfigurationPropertiesBindingPostProcessor后置处理器，用来对配置属性进行后置处理</span>\n\t\t\t<span class=\"token function\">registerConfigurationPropertiesBindingPostProcessor</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// (2)注册一个ConfigurationBeanFactoryMetadata类型的bean，</span>\n\t\t\t<span class=\"token comment\">// 注意ConfigurationBeanFactoryMetadata实现了BeanFactoryPostProcessor，然后其会在postProcessBeanFactory中注册一些元数据</span>\n\t\t\t<span class=\"token function\">registerConfigurationBeanFactoryMetadata</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 注册ConfigurationPropertiesBindingPostProcessor后置处理器</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerConfigurationPropertiesBindingPostProcessor</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">GenericBeanDefinition</span> definition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdefinition<span class=\"token punctuation\">.</span><span class=\"token function\">setBeanClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationPropertiesBindingPostProcessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdefinition<span class=\"token punctuation\">.</span><span class=\"token function\">setRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinition</span><span class=\"token punctuation\">.</span>ROLE_INFRASTRUCTURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tregistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token class-name\">ConfigurationPropertiesBindingPostProcessor</span><span class=\"token punctuation\">.</span>BEAN_NAME<span class=\"token punctuation\">,</span> definition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 注册ConfigurationBeanFactoryMetadata后置处理器</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerConfigurationBeanFactoryMetadata</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">GenericBeanDefinition</span> definition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdefinition<span class=\"token punctuation\">.</span><span class=\"token function\">setBeanClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationBeanFactoryMetadata</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdefinition<span class=\"token punctuation\">.</span><span class=\"token function\">setRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDefinition</span><span class=\"token punctuation\">.</span>ROLE_INFRASTRUCTURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tregistry<span class=\"token punctuation\">.</span><span class=\"token function\">registerBeanDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationBeanFactoryMetadata</span><span class=\"token punctuation\">.</span>BEAN_NAME<span class=\"token punctuation\">,</span>\n\t\t\t\tdefinition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>ConfigurationPropertiesBindingPostProcessorRegistrar</code>类的逻辑非常简单，主要用来注册外部配置属性绑定相关的后置处理器即<code>ConfigurationBeanFactoryMetadata</code>和<code>ConfigurationPropertiesBindingPostProcessor</code>。</p>\n<p>那么接下来我们再来探究下注册的这两个后置处理器又是执行怎样的后置处理逻辑呢？</p>\n<p><a name=\"9314490e\"></a></p>\n<h2 id=\"6-ConfigurationBeanFactoryMetadata\"><a href=\"#6-ConfigurationBeanFactoryMetadata\" class=\"headerlink\" title=\"6 ConfigurationBeanFactoryMetadata\"></a>6 ConfigurationBeanFactoryMetadata</h2><p>先来看<code>ConfigurationBeanFactoryMetadata</code>这个后置处理器，其实现了<code>BeanFactoryPostProcessor</code>接口的<code>postProcessBeanFactory</code>方法，在初始化<code>bean</code> <code>factory</code>时将<code>@Bean</code>注解的元数据存储起来，以便在后续的外部配置属性绑定的相关逻辑中使用。</p>\n<p>先来看下<code>ConfigurationBeanFactoryMetadata</code>类实现<code>BeanFactoryPostProcessor</code>接口的<code>postProcessBeanFactory</code>方法源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationBeanFactoryMetadata</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfigurationBeanFactoryMetadata</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanFactoryPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">/**\n\t * The bean name that this class is registered with.\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> BEAN_NAME <span class=\"token operator\">=</span> <span class=\"token class-name\">ConfigurationBeanFactoryMetadata</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * beansFactoryMetadata集合存储beansFactory的元数据\n\t * key:某个bean的名字  value：FactoryMetadata对象（封装了工厂bean名和工厂方法名）\n\t * 比如下面这个配置类：\n\t *\n\t * @Configuration\n\t * public class ConfigA &#123;\n\t *      @Bean\n\t *      public BeanXXX methodB（configA, ） &#123;\n\t *          return new BeanXXX();\n\t *      &#125;\n\t * &#125;\n\t *\n\t * 那么：key值为\"methodB\"，value为FactoryMetadata（configA, methodB）对象，其bean属性值为\"configA\",method属性值为\"methodB\"\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FactoryMetadata</span><span class=\"token punctuation\">></span></span> beansFactoryMetadata <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactory <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 遍历beanFactory的beanDefinitionName，即每个bean的名字（比如工厂方法对应的bean名字）</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 根据name得到beanDefinition</span>\n\t\t\t<span class=\"token class-name\">BeanDefinition</span> definition <span class=\"token operator\">=</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinition</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 工厂方法名：一般是注解@Bean的方法名</span>\n\t\t\t<span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> definition<span class=\"token punctuation\">.</span><span class=\"token function\">getFactoryMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 工厂bean名：一般是注解@Configuration的类名</span>\n\t\t\t<span class=\"token class-name\">String</span> bean <span class=\"token operator\">=</span> definition<span class=\"token punctuation\">.</span><span class=\"token function\">getFactoryBeanName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> bean <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// 将beanDefinitionName作为Key，封装了工厂bean名和工厂方法名的FactoryMetadata对象作为value装入beansFactoryMetadata中</span>\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beansFactoryMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FactoryMetadata</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从上面代码可以看到<code>ConfigurationBeanFactoryMetadata</code>类覆写的<code>postProcessBeanFactory</code>方法做的事情就是将工厂<code>Bean</code>（可以理解为<code>@Configuration</code>注解的类）及其<code>@Bean</code>注解的工厂方法的一些元数据缓存到<code>beansFactoryMetadata</code>集合中，以便后续使用，这个后面会详述。</p>\n<p>由上代码中我们看到了<code>ConfigurationBeanFactoryMetadata</code>类的<code>beansFactoryMetadata</code>集合类型是<code>Map&lt;String, FactoryMetadata&gt;</code>，那么我们再来看下封装相关工厂元数据的<code>FactoryMetadata</code>类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationBeanFactoryMetadata$FactoryMetadata.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FactoryMetadata</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// @Configuration注解的配置类的类名</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> bean<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// @Bean注解的方法名</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> method<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">FactoryMetadata</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> method<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean <span class=\"token operator\">=</span> bean<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>method <span class=\"token operator\">=</span> method<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>FactoryMetadata</code>仅有两个属性<code>bean</code>和<code>method</code>,分别表示<code>@Configuration</code>注解的工厂<code>bean</code>和<code>@Bean</code>注解的工厂方法。</p>\n<p>上面说了那么多，直接举个栗子会更直观：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * beansFactoryMetadata集合存储beansFactory的元数据\n * key:某个bean的名字  value：FactoryMetadata对象（封装了工厂bean名和工厂方法名）\n * 比如下面这个配置类：\n *\n * @Configuration\n * public class ConfigA &#123;\n *      @Bean\n *      public BeanXXX methodB（configA, ） &#123;\n *          return new BeanXXX();\n *      &#125;\n * &#125;\n *\n * 那么：key值为\"methodB\"，value为FactoryMetadata（configA, methodB）对象，其bean属性值为\"configA\",method属性值为\"methodB\"\n */</span>\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FactoryMetadata</span><span class=\"token punctuation\">></span></span> beansFactoryMetadata <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了更好理解上面<code>beansFactoryMetadata</code>集合存储的数据是啥，建议最好自己动手调试看看其里面装的是什么哦。总之这里记住一点就好了：<code>ConfigurationBeanFactoryMetadata</code>类的<code>beansFactoryMetadata</code>集合存储的是工厂<code>bean</code>的相关元数据，以便在<code>ConfigurationPropertiesBindingPostProcessor</code>后置处理器中使用。</p>\n<p><a name=\"b205ef38\"></a></p>\n<h2 id=\"7-ConfigurationPropertiesBindingPostProcessor\"><a href=\"#7-ConfigurationPropertiesBindingPostProcessor\" class=\"headerlink\" title=\"7 ConfigurationPropertiesBindingPostProcessor\"></a>7 ConfigurationPropertiesBindingPostProcessor</h2><p>我们再来看下<code>ConfigurationPropertiesBindingPostProcessorRegistrar</code>类注册的另外一个后置处理器<code>ConfigurationPropertiesBindingPostProcessor</code>，这个后置处理器就<strong>尤其重要</strong>了，主要承担了<strong>将外部配置属性绑定到</strong><code>**@ConfigurationProperties**</code><strong>注解标注的 XxxProperties 类的属性中</strong>（比如<code>application.properties</code>配置文件中设置了<code>server.port=8081</code>,那么<code>8081</code>将会绑定到<code>ServerProperties</code>类的<code>port</code>属性中）的实现逻辑。</p>\n<p>同样，先来看下<code>ConfigurationPropertiesBindingPostProcessor</code>的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationPropertiesBindingPostProcessor.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfigurationPropertiesBindingPostProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanPostProcessor</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token class-name\">PriorityOrdered</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ApplicationContextAware</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InitializingBean</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token comment\">// ...这里省略实现代码先</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t    <span class=\"token comment\">// ...这里省略实现代码先</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// ...省略非关键代码</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>ConfigurationPropertiesBindingPostProcessor</code>后置处理器实现了两个重要的接口<code>InitializingBean</code>和<code>BeanPostProcessor</code>。</p>\n<p>我们都知道：</p>\n<ol>\n<li><code>InitializingBean</code>接口的<code>afterPropertiesSet</code>方法会在<code>bean</code>属性赋值后调用，用来执行一些自定义的初始化逻辑比如检查某些强制的属性是否有被赋值，校验某些配置或给一些未被赋值的属性赋值。</li>\n<li><code>BeanPostProcessor</code>接口是<code>bean</code>的后置处理器，其有<code>postProcessBeforeInitialization</code>和<code>postProcessAfterInitialization</code>两个勾子方法，分别会在<code>bean</code>初始化前后被调用来执行一些后置处理逻辑，比如检查标记接口或是否用代理包装了<code>bean</code>。</li>\n</ol>\n<p>同时由上代码可以看到<code>ConfigurationPropertiesBindingPostProcessor</code>后置处理器覆写了<code>InitializingBean</code>的<code>afterPropertiesSet</code>方法和<code>BeanPostProcessor</code>的<code>postProcessBeforeInitialization</code>方法。</p>\n<p>接下来我们再来探究<code>ConfigurationPropertiesBindingPostProcessor</code>后置处理器覆写的两个方法的源码。</p>\n<p><a name=\"153768c5\"></a></p>\n<h3 id=\"7-1-在执行外部属性绑定逻辑前先准备好相关元数据和配置属性绑定器\"><a href=\"#7-1-在执行外部属性绑定逻辑前先准备好相关元数据和配置属性绑定器\" class=\"headerlink\" title=\"7.1 在执行外部属性绑定逻辑前先准备好相关元数据和配置属性绑定器\"></a>7.1 在执行外部属性绑定逻辑前先准备好相关元数据和配置属性绑定器</h3><p>我们先来分析下<code>ConfigurationPropertiesBindingPostProcessor</code>覆写<code>InitializingBean</code>接口的<code>afterPropertiesSet</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationPropertiesBindingPostProcessor.java</span>\n\n        <span class=\"token comment\">/**\n\t * 配置属性校验器名字\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> VALIDATOR_BEAN_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"configurationPropertiesValidator\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * 工厂bean相关元数据\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ConfigurationBeanFactoryMetadata</span> beanFactoryMetadata<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * 上下文\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * 配置属性绑定器\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ConfigurationPropertiesBinder</span> configurationPropertiesBinder<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">// 这里主要是给beanFactoryMetadata和configurationPropertiesBinder的属性赋值，用于后面的后置处理器方法处理属性绑定的时候用</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// We can't use constructor injection of the application context because</span>\n\t\t<span class=\"token comment\">// it causes eager factory bean initialization</span>\n\t\t<span class=\"token comment\">// 【1】利用afterPropertiesSet这个勾子方法从容器中获取之前注册的ConfigurationBeanFactoryMetadata对象赋给beanFactoryMetadata属性</span>\n\t\t<span class=\"token comment\">// （问1）beanFactoryMetadata这个bean是什么时候注册到容器中的？</span>\n\t\t<span class=\"token comment\">// （答1）在ConfigurationPropertiesBindingPostProcessorRegistrar类的registerBeanDefinitions方法中将beanFactoryMetadata这个bean注册到容器中</span>\n\t\t<span class=\"token comment\">// （问2）从容器中获取beanFactoryMetadata对象后，什么时候会被用到？</span>\n\t\t<span class=\"token comment\">// （答2）beanFactoryMetadata对象的beansFactoryMetadata集合保存的工厂bean相关的元数据，在ConfigurationPropertiesBindingPostProcessor类</span>\n\t\t<span class=\"token comment\">//        要判断某个bean是否有FactoryAnnotation或FactoryMethod时会根据这个beanFactoryMetadata对象的beansFactoryMetadata集合的元数据来查找</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactoryMetadata <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token class-name\">ConfigurationBeanFactoryMetadata</span><span class=\"token punctuation\">.</span>BEAN_NAME<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token class-name\">ConfigurationBeanFactoryMetadata</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 【2】new一个ConfigurationPropertiesBinder，用于后面的外部属性绑定时使用</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configurationPropertiesBinder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConfigurationPropertiesBinder</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">,</span> VALIDATOR_BEAN_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// VALIDATOR_BEAN_NAME=\"configurationPropertiesValidator\"</span>\n\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到以上代码主要逻辑就是<strong>在执行外部属性绑定逻辑前先准备好相关元数据和配置属性绑定器</strong>，即从<code>Spring</code>容器中获取到之前注册的<code>ConfigurationBeanFactoryMetadata</code>对象赋给<code>ConfigurationPropertiesBindingPostProcessor</code>后置处理器的<code>beanFactoryMetadata</code>属性,还有就是新建一个<code>ConfigurationPropertiesBinder</code>配置属性绑定器对象并赋值给<code>configurationPropertiesBinder</code>属性。</p>\n<p>我们再来看下<code>ConfigurationPropertiesBinder</code>这个配置属性绑定器对象是如何构造的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationPropertiesBinder.java</span>\n\n<span class=\"token class-name\">ConfigurationPropertiesBinder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">String</span> validatorBeanName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationContext <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 将applicationContext封装到PropertySourcesDeducer对象中并返回</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertySources <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertySourcesDeducer</span><span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertySources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取属性源，主要用于在ConfigurableListableBeanFactory的后置处理方法postProcessBeanFactory中处理</span>\n\t<span class=\"token comment\">// 如果没有配置validator的话，这里一般返回的是null</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configurationPropertiesValidator <span class=\"token operator\">=</span> <span class=\"token function\">getConfigurationPropertiesValidator</span><span class=\"token punctuation\">(</span>\n\t\t\tapplicationContext<span class=\"token punctuation\">,</span> validatorBeanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 检查实现JSR-303规范的bean校验器相关类在classpath中是否存在</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jsr303Present <span class=\"token operator\">=</span> <span class=\"token class-name\">ConfigurationPropertiesJsr303Validator</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">isJsr303Present</span><span class=\"token punctuation\">(</span>applicationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到在构造<code>ConfigurationPropertiesBinder</code>对象时主要给其相关属性赋值（一般构造器逻辑都是这样）：</p>\n<ol>\n<li>给<code>applicationContext</code>属性赋值注入上下文对象；</li>\n<li>给<code>propertySources</code>属性赋值，属性源即外部配置值比如<code>application.properties</code>配置的属性值，注意这里的属性源是由<code>ConfigFileApplicationListener</code>这个监听器负责读取的，<code>ConfigFileApplicationListener</code>将会在后面源码分析章节中详述。</li>\n<li>给<code>configurationPropertiesValidator</code>属性赋值，值来自<code>Spring</code>容器中名为<code>configurationPropertiesValidator</code>的<code>bean</code>。</li>\n<li>给<code>jsr303Present</code>属性赋值，当<code>javax.validation.Validator</code>,<code>javax.validation.ValidatorFactory</code>和<code>javax.validation.bootstrap.GenericBootstrap&quot;</code>这三个类同时存在于<code>classpath</code>中<code>jsr303Present</code>属性值才为<code>true</code>。</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>关于 JSR303</strong>：<code>JSR-303</code>是 JAVA EE 6 中的一项子规范，叫做<code>Bean Validation</code>，<code>Hibernate Validator</code>是<code>Bean Validation</code>的参考实现 。<code>Hibernate Validator</code>提供了<code>JSR 303</code>规范中所有内置<code>constraint</code> 的实现，除此之外还有一些附加的<code>constraint</code>。</p></blockquote>\n<p><a name=\"a79bf68b\"></a></p>\n<h3 id=\"7-2-执行真正的外部属性绑定逻辑【主线】\"><a href=\"#7-2-执行真正的外部属性绑定逻辑【主线】\" class=\"headerlink\" title=\"7.2 执行真正的外部属性绑定逻辑【主线】\"></a>7.2 执行真正的外部属性绑定逻辑【主线】</h3><p>前面分析了那么多，发现都还没到外部属性绑定的真正处理逻辑，前面步骤都是在做一些准备性工作，为外部属性绑定做铺垫。</p>\n<p>在执行外部属性绑定逻辑前，准备好了相关元数据和配置属性绑定器后，此时我们再来看看<code>ConfigurationPropertiesBindingPostProcessor</code>实现<code>BeanPostProcessor</code>接口的<code>postProcessBeforeInitialization</code>后置处理方法了，<strong>外部属性绑定逻辑</strong>都是在这个后置处理方法里实现，是我们关注的<strong>重中之重</strong>。</p>\n<p>直接看代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationPropertiesBindingPostProcessor.java</span>\n\n<span class=\"token comment\">// 因为是外部配置属性后置处理器，因此这里对@ConfigurationProperties注解标注的XxxProperties类进行后置处理完成属性绑定</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 注意，BeanPostProcessor后置处理器默认会对所有的bean进行处理，因此需要根据bean的一些条件进行过滤得到最终要处理的目的bean，</span>\n\t<span class=\"token comment\">// 这里的过滤条件就是判断某个bean是否有@ConfigurationProperties注解</span>\n\t<span class=\"token comment\">// 【1】从bean上获取@ConfigurationProperties注解,若bean有标注，那么返回该注解；若没有，则返回Null。比如ServerProperty上标注了@ConfigurationProperties注解</span>\n\t<span class=\"token class-name\">ConfigurationProperties</span> annotation <span class=\"token operator\">=</span> <span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">ConfigurationProperties</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【2】若标注有@ConfigurationProperties注解的bean，那么则进行进一步处理：将配置文件的配置注入到bean的属性值中</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>annotation <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">/********主线，重点关注】********/</span>\n\t\t<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> annotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 【3】返回外部配置属性值绑定后的bean（一般是XxxProperties对象）</span>\n\t<span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>ConfigurationPropertiesBindingPostProcessor</code>类覆写的<code>postProcessBeforeInitialization</code>方法的做的事情就是将外部属性配置绑定到<code>@ConfigurationProperties</code>注解标注的<code>XxxProperties</code>类上，现关键步骤总结如下：</p>\n<ol>\n<li>从<code>bean</code>上获取<code>@ConfigurationProperties</code>注解；</li>\n<li>若标注有<code>@ConfigurationProperties</code>注解的<code>bean</code>，那么则进行进一步的处理：将外部配置属性值绑定到 bean 的属性值中后再返回<code>bean</code>；若没有标注有<code>@ConfigurationProperties</code>注解的<code>bean</code>，那么将直接原样返回<code>bean</code>。</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意</strong>：后置处理器默认会对每个容器中的<code>bean</code>进行后置处理，因为这里只针对标注有<code>@ConfigurationProperties</code>注解的<code>bean</code>进行外部属性绑定，因此没有标注<code>@ConfigurationProperties</code>注解的<code>bean</code>将不会被处理。</p></blockquote>\n<p>接下来我们紧跟主线，再来看下<strong>外部配置属性是如何绑定到</strong><code>**@ConfigurationProperties**</code><strong>注解的</strong><code>**XxxProperties**</code><strong>类属性上的呢？</strong></p>\n<p>直接看代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationPropertiesBindingPostProcessor.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConfigurationProperties</span> annotation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 【1】得到bean的类型，比如ServerPropertie这个bean得到的类型是：org.springframework.boot.autoconfigure.web.ServerProperties</span>\n\t<span class=\"token class-name\">ResolvableType</span> type <span class=\"token operator\">=</span> <span class=\"token function\">getBeanType</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【2】获取bean上标注的@Validated注解</span>\n\t<span class=\"token class-name\">Validated</span> validated <span class=\"token operator\">=</span> <span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span> beanName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Validated</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 若标注有@Validated注解的话则跟@ConfigurationProperties注解一起组成一个Annotation数组</span>\n\t<span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> annotations <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>validated <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> annotation<span class=\"token punctuation\">,</span> validated <span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> annotation <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【3】返回一个绑定了XxxProperties类的Bindable对象target，这个target对象即被外部属性值注入的目标对象</span>\n\t<span class=\"token comment\">// （比如封装了标注有@ConfigurationProperties注解的ServerProperties对象的Bindable对象）</span>\n\t<span class=\"token class-name\">Bindable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> target <span class=\"token operator\">=</span> <span class=\"token class-name\">Bindable</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withExistingValue</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">withAnnotations</span><span class=\"token punctuation\">(</span>annotations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置annotations属性数组</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 【4】执行外部配置属性绑定逻辑</span>\n\t\t<span class=\"token comment\">/********【主线，重点关注】********/</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configurationPropertiesBinder<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConfigurationPropertiesBindException</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> bean<span class=\"token punctuation\">,</span> annotation<span class=\"token punctuation\">,</span>\n\t\t\t\tex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>关键步骤上面代码已经标注<code>【x】</code>，这里在继续讲解外部配置属性绑定的主线逻辑(在 8 ConfigurationPropertiesBinder 这一小节分析 )前先穿插一个知识点，还记得<code>ConfigurationBeanFactoryMetadata</code>覆写的<code>postProcessBeanFactory</code>方法里已经将相关工厂<code>bean</code>的元数据封装到<code>ConfigurationBeanFactoryMetadata</code>类的<code>beansFactoryMetadata</code>集合这一回事吗？</p>\n<p>我们再来看下上面代码中的<code>【1】getBeanType</code>和<code>【2】getAnnotation</code>方法源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationPropertiesBindingPostProcessor.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">ResolvableType</span> <span class=\"token function\">getBeanType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 首先获取有没有工厂方法</span>\n\t<span class=\"token class-name\">Method</span> factoryMethod <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactoryMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">findFactoryMethod</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 若有工厂方法</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>factoryMethod <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ResolvableType</span><span class=\"token punctuation\">.</span><span class=\"token function\">forMethodReturnType</span><span class=\"token punctuation\">(</span>factoryMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 没有工厂方法，则说明是普通的配置类</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ResolvableType</span><span class=\"token punctuation\">.</span><span class=\"token function\">forClass</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">A</span> <span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">A</span> annotation <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beanFactoryMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">findFactoryAnnotation</span><span class=\"token punctuation\">(</span>beanName<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>annotation <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tannotation <span class=\"token operator\">=</span> <span class=\"token class-name\">AnnotationUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAnnotation</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> annotation<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意到上面代码中的<code>beanFactoryMetadata</code>对象没，<code>ConfigurationPropertiesBindingPostProcessor</code>后置处理器的<code>getBeanType</code>和<code>getAnnotation</code>方法分别会调用<code>ConfigurationBeanFactoryMetadata</code>的<code>findFactoryMethod</code>和<code>findFactoryAnnotation</code>方法，而<code>ConfigurationBeanFactoryMetadata</code>的<code>findFactoryMethod</code>和<code>findFactoryAnnotation</code>方法又会依赖存储工厂<code>bean</code>元数据的<code>beansFactoryMetadata</code>集合来寻找是否有<code>FactoryMethod</code>和<code>FactoryAnnotation</code>。因此，到这里我们就知道之<code>ConfigurationBeanFactoryMetadata</code>的<code>beansFactoryMetadata</code>集合存储工厂<code>bean</code>元数据的作用了。</p>\n<p><a name=\"2ef252ba\"></a></p>\n<h2 id=\"8-ConfigurationPropertiesBinder\"><a href=\"#8-ConfigurationPropertiesBinder\" class=\"headerlink\" title=\"8 ConfigurationPropertiesBinder\"></a>8 ConfigurationPropertiesBinder</h2><p>我们再继续紧跟外部配置属性绑定的主线，继续前面看 7.2 执行真正的外部属性绑定逻辑中的<code>this.configurationPropertiesBinder.bind(target);</code>这句代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationPropertiesBinder.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bindable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//【1】得到@ConfigurationProperties注解</span>\n\t<span class=\"token class-name\">ConfigurationProperties</span> annotation <span class=\"token operator\">=</span> target\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationProperties</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span>annotation <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"Missing @ConfigurationProperties on \"</span> <span class=\"token operator\">+</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【2】得到Validator对象集合，用于属性校验</span>\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Validator</span><span class=\"token punctuation\">></span></span> validators <span class=\"token operator\">=</span> <span class=\"token function\">getValidators</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【3】得到BindHandler对象（默认是IgnoreTopLevelConverterNotFoundBindHandler对象），</span>\n\t<span class=\"token comment\">// 用于对ConfigurationProperties注解的ignoreUnknownFields等属性的处理</span>\n\t<span class=\"token class-name\">BindHandler</span> bindHandler <span class=\"token operator\">=</span> <span class=\"token function\">getBindHandler</span><span class=\"token punctuation\">(</span>annotation<span class=\"token punctuation\">,</span> validators<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【4】得到一个Binder对象，并利用其bind方法执行外部属性绑定逻辑</span>\n\t<span class=\"token comment\">/********************【主线，重点关注】********************/</span>\n\t<span class=\"token function\">getBinder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>annotation<span class=\"token punctuation\">.</span><span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> bindHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码的主要逻辑是：</p>\n<ol>\n<li>先获取<code>target</code>对象（对应<code>XxxProperties</code>类）上的<code>@ConfigurationProperties</code>注解和校验器（若有）;</li>\n<li>然后再根据获取的的<code>@ConfigurationProperties</code>注解和校验器来获得<code>BindHandler</code>对象，<code>BindHandler</code>的作用是用于在属性绑定时来处理一些附件逻辑;在 8.1 节分析.</li>\n<li>最后再获取一个<code>Binder</code>对象，调用其<code>bind</code>方法来执行外部属性绑定的逻辑,在 8.2 节分析.</li>\n</ol>\n<p><a name=\"006f53ad\"></a></p>\n<h3 id=\"8-1-获取-BindHandler-对象以便在属性绑定时来处理一些附件逻辑\"><a href=\"#8-1-获取-BindHandler-对象以便在属性绑定时来处理一些附件逻辑\" class=\"headerlink\" title=\"8.1 获取 BindHandler 对象以便在属性绑定时来处理一些附件逻辑\"></a>8.1 获取 BindHandler 对象以便在属性绑定时来处理一些附件逻辑</h3><p>我们在看<code>getBindHandler</code>方法的逻辑前先来认识下<code>BindHandler</code>是干啥的。</p>\n<p><code>BindHandler</code>是一个父类接口，用于在属性绑定时来处理一些附件逻辑。我们先看下<code>BindHandler</code>的类图，好有一个整体的认识：</p>\n<p><img src=\"/../assets/1648015773182-602c2e60-d544-43e5-8bea-21d3d4dee56b.png\"></p>\n<p>可以看到<code>AbstractBindHandler</code>作为抽象基类实现了<code>BindHandler</code>接口，其又有四个具体的子类分别是<code>IgnoreTopLevelConverterNotFoundBindHandler</code>,<code>NoUnboundElementsBindHandler</code>,<code>IgnoreErrorsBindHandler</code>和<code>ValidationBindHandler</code>。</p>\n<ol>\n<li><code>IgnoreTopLevelConverterNotFoundBindHandler</code>：在处理外部属性绑定时的默认<code>BindHandler</code>，当属性绑定失败时会忽略最顶层的<code>ConverterNotFoundException</code>；</li>\n<li><code>NoUnboundElementsBindHandler</code>：用来处理配置文件配置的未知的属性；</li>\n<li><code>IgnoreErrorsBindHandler</code>：用来忽略无效的配置属性例如类型错误；</li>\n<li><code>ValidationBindHandler</code>：利用校验器对绑定的结果值进行校验。</li>\n</ol>\n<p>分析完类关系后，我们再来看下<code>BindHandler</code>接口提供了哪些方法在外部属性绑定时提供一些额外的附件逻辑，直接看代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// BindHandler.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BindHandler</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">/**\n\t * Default no-op bind handler.\n\t */</span>\n\t<span class=\"token class-name\">BindHandler</span> DEFAULT <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BindHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// onStart方法在外部属性绑定前被调用</span>\n\t<span class=\"token keyword\">default</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Bindable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationPropertyName</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bindable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">BindContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// onSuccess方法在外部属性成功绑定时被调用，该方法能够改变最终返回的属性值或对属性值进行校验</span>\n\t<span class=\"token keyword\">default</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationPropertyName</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bindable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">BindContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// onFailure方法在外部属性绑定失败（包括onSuccess方法里的逻辑执行失败）时被调用，</span>\n\t<span class=\"token comment\">// 该方法可以用来catch住相关异常或者返回一个替代的结果（跟微服务的降级结果有点类似，嘿嘿）</span>\n\t<span class=\"token keyword\">default</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationPropertyName</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bindable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">BindContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 当外部属性绑定结束时（不管绑定成功还是失败）被调用</span>\n\t<span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFinish</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationPropertyName</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bindable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">BindContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> result<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>BindHandler</code>接口定义了<code>onStart</code>,<code>onSuccess</code>,<code>onFailure</code>和<code>onFinish</code>方法，这四个方法分别会在执行外部属性绑定时的不同时机会被调用，在属性绑定时用来添加一些额外的处理逻辑，比如在<code>onSuccess</code>方法改变最终绑定的属性值或对属性值进行校验，在<code>onFailure</code>方法<code>catch</code>住相关异常或者返回一个替代的绑定的属性值。</p>\n<p>知道了<code>BindHandler</code>是在属性绑定时添加一些额外的附件处理逻辑后，我们再来看下<code>getBindHandler</code>方法的逻辑，直接上代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationPropertiesBinder.java</span>\n\n<span class=\"token comment\">// 注意BindHandler的设计技巧，应该是责任链模式，非常巧妙，值得借鉴</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">BindHandler</span> <span class=\"token function\">getBindHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationProperties</span> annotation<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Validator</span><span class=\"token punctuation\">></span></span> validators<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 新建一个IgnoreTopLevelConverterNotFoundBindHandler对象，这是个默认的BindHandler对象</span>\n\t<span class=\"token class-name\">BindHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IgnoreTopLevelConverterNotFoundBindHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 若注解@ConfigurationProperties的ignoreInvalidFields属性设置为true，</span>\n\t<span class=\"token comment\">// 则说明可以忽略无效的配置属性例如类型错误，此时新建一个IgnoreErrorsBindHandler对象</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>annotation<span class=\"token punctuation\">.</span><span class=\"token function\">ignoreInvalidFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\thandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IgnoreErrorsBindHandler</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 若注解@ConfigurationProperties的ignoreUnknownFields属性设置为true，</span>\n\t<span class=\"token comment\">// 则说明配置文件配置了一些未知的属性配置，此时新建一个ignoreUnknownFields对象</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>annotation<span class=\"token punctuation\">.</span><span class=\"token function\">ignoreUnknownFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">UnboundElementsSourceFilter</span> filter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnboundElementsSourceFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\thandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoUnboundElementsBindHandler</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 如果@Valid注解不为空，则创建一个ValidationBindHandler对象</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>validators<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\thandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ValidationBindHandler</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">,</span>\n\t\t\t\tvalidators<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Validator</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 遍历获取的ConfigurationPropertiesBindHandlerAdvisor集合，</span>\n\t<span class=\"token comment\">// ConfigurationPropertiesBindHandlerAdvisor目前只在测试类中有用到</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationPropertiesBindHandlerAdvisor</span> advisor <span class=\"token operator\">:</span> <span class=\"token function\">getBindHandlerAdvisors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 对handler进一步处理</span>\n\t\thandler <span class=\"token operator\">=</span> advisor<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 返回handler</span>\n\t<span class=\"token keyword\">return</span> handler<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>getBindHandler</code>方法的逻辑很简单，主要是根据传入的<code>@ConfigurationProperties</code>注解和<code>validators</code>校验器来创建不同的<code>BindHandler</code>具体实现类：</p>\n<ol>\n<li>首先<code>new</code>一个<code>IgnoreTopLevelConverterNotFoundBindHandler</code>作为默认的<code>BindHandler</code>;</li>\n<li>若<code>@ConfigurationProperties</code>注解的属性<code>ignoreInvalidFields</code>值为<code>true</code>，那么再<code>new</code>一个<code>IgnoreErrorsBindHandler</code>对象，把刚才新建的<code>IgnoreTopLevelConverterNotFoundBindHandler</code>对象作为构造参数传入赋值给<code>AbstractBindHandler</code>父类的<code>parent</code>属性；</li>\n<li>若<code>@ConfigurationProperties</code>注解的属性<code>ignoreUnknownFields</code>值为<code>false</code>，那么再<code>new</code>一个<code>UnboundElementsSourceFilter</code>对象，把之前构造的<code>BindHandler</code>对象作为构造参数传入赋值给<code>AbstractBindHandler</code>父类的<code>parent</code>属性；</li>\n<li>……以此类推，前一个<code>handler</code>对象作为后一个<code>hangdler</code>对象的构造参数，就这样利用<code>AbstractBindHandler</code>父类的<code>parent</code>属性将每一个<code>handler</code>链起来，最后再得到最终构造的<code>handler</code>。</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>GET 技巧</strong>：上面的这个设计模式是不是很熟悉，这个就是<strong>责任链模式</strong>。我们学习源码，同时也是学习别人怎么熟练运用设计模式。责任链模式的应用案例有很多，比如<code>Dubbo</code>的各种<code>Filter</code>们（比如<code>AccessLogFilter</code>是用来记录服务的访问日志的，<code>ExceptionFilter</code>是用来处理异常的…），我们一开始学习 java web 时的<code>Servlet</code>的<code>Filter</code>,<code>MyBatis</code>的<code>Plugin</code>们以及<code>Netty</code>的<code>Pipeline</code>都采用了责任链模式。</p></blockquote>\n<p>我们了解了<code>BindHandler</code>的作用后，再来紧跟主线，看属性绑定是如何绑定的？</p>\n<p><a name=\"45f8580b\"></a></p>\n<h3 id=\"8-2-获取-Binder-对象用于进行属性绑定【主线】\"><a href=\"#8-2-获取-Binder-对象用于进行属性绑定【主线】\" class=\"headerlink\" title=\"8.2 获取 Binder 对象用于进行属性绑定【主线】\"></a>8.2 获取 Binder 对象用于进行属性绑定【主线】</h3><p>这里接 8 ConfigurationPropertiesBinder 节代码中标注<code>【4】</code>的主线代码<code>getBinder().bind(annotation.prefix(), target, bindHandler);</code>.</p>\n<p>可以看到这句代码主要做了两件事：</p>\n<ol>\n<li>调用<code>getBinder</code>方法获取用于属性绑定的<code>Binder</code>对象；</li>\n<li>调用<code>Binder</code>对象的<code>bind</code>方法进行外部属性绑定到<code>@ConfigurationProperties</code>注解的<code>XxxProperties</code>类的属性上。</li>\n</ol>\n<p>那么我们先看下<code>getBinder</code>方法源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ConfigurationPropertiesBinder.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Binder</span> <span class=\"token function\">getBinder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Binder是一个能绑定ConfigurationPropertySource的容器对象</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>binder <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 新建一个Binder对象，这个binder对象封装了ConfigurationPropertySources，</span>\n\t\t<span class=\"token comment\">// PropertySourcesPlaceholdersResolver，ConversionService和PropertyEditorInitializer对象</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>binder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Binder</span><span class=\"token punctuation\">(</span><span class=\"token function\">getConfigurationPropertySources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 将PropertySources对象封装成SpringConfigurationPropertySources对象并返回</span>\n\t\t\t\t<span class=\"token function\">getPropertySourcesPlaceholdersResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getConversionService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 将PropertySources对象封装成PropertySourcesPlaceholdersResolver对象并返回，从容器中获取到ConversionService对象</span>\n\t\t\t\t<span class=\"token function\">getPropertyEditorInitializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到Consumer&lt;PropertyEditorRegistry>对象，这些初始化器用来配置property editors，property editors通常可以用来转换值</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 返回binder</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>binder<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>Binder</code>对象封装了<code>ConfigurationPropertySources</code>,<code>PropertySourcesPlaceholdersResolver</code>,<code>ConversionService</code>和<code>PropertyEditorInitializer</code>这四个对象，<code>Binder</code>对象封装了这四个哥们肯定是在后面属性绑定逻辑中会用到，先看下这四个对象是干嘛的：</p>\n<ul>\n<li><code>ConfigurationPropertySources</code>:外部配置文件的属性源，由<code>ConfigFileApplicationListener</code>监听器负责触发读取；</li>\n<li><code>PropertySourcesPlaceholdersResolver</code>:解析属性源中的占位符<code>$&#123;&#125;</code>；</li>\n<li><code>ConversionService</code>:对属性类型进行转换</li>\n<li><code>PropertyEditorInitializer</code>:用来配置<code>property editors</code></li>\n</ul>\n<p>那么，我们获取了<code>Binder</code>属性绑定器后，再来看下它的<code>bind</code>方法是如何执行属性绑定的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// Binder.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">BindResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bindable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BindHandler</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// ConfigurationPropertyName.of(name)：将name（这里指属性前缀名）封装到ConfigurationPropertyName对象中</span>\n\t<span class=\"token comment\">// 将外部配置属性绑定到目标对象target中</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationPropertyName</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">BindResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationPropertyName</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bindable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">BindHandler</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Name must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Target must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\thandler <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>handler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> handler <span class=\"token operator\">:</span> <span class=\"token class-name\">BindHandler</span><span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// Context是Binder的内部类，实现了BindContext，Context可以理解为Binder的上下文，可以用来获取binder的属性比如Binder的sources属性</span>\n\t<span class=\"token class-name\">Context</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 进行属性绑定，并返回绑定属性后的对象bound，注意bound的对象类型是T，T就是@ConfigurationProperties注解的类比如ServerProperties</span>\n\t<span class=\"token comment\">/********【主线，重点关注】************/</span>\n\t<span class=\"token class-name\">T</span> bound <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 将刚才返回的bound对象封装到BindResult对象中并返回</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">BindResult</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>bound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中首先创建了一个<code>Context</code>对象，<code>Context</code>是<code>Binder</code>的内部类，为<code>Binder</code>的上下文，利用<code>Context</code>上下文可以获取<code>Binder</code>的属性比如获取<code>Binder</code>的<code>sources</code>属性值并绑定到<code>XxxProperties</code>属性中。然后我们再紧跟主线看下<code>bind(name, target, handler, context, false)</code>方法源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// Binder.java</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationPropertyName</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bindable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">BindHandler</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> allowRecursiveBinding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 清空Binder的configurationProperty属性值</span>\n\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">clearConfigurationProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 【1】调用BindHandler的onStart方法，执行一系列的责任链对象的该方法</span>\n\t\ttarget <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">.</span><span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 【2】调用bindObject方法对Bindable对象target的属性进行绑定外部配置的值，并返回赋值给bound对象。</span>\n\t\t<span class=\"token comment\">// 举个栗子：比如设置了server.port=8888,那么该方法最终会调用Binder.bindProperty方法，最终返回的bound的value值为8888</span>\n\t\t<span class=\"token comment\">/************【主线：重点关注】***********/</span>\n\t\t<span class=\"token class-name\">Object</span> bound <span class=\"token operator\">=</span> <span class=\"token function\">bindObject</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span>\n\t\t\t\tallowRecursiveBinding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 【3】封装handleBindResult对象并返回，注意在handleBindResult的构造函数中会调用BindHandler的onSucess，onFinish方法</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">handleBindResult</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> bound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">handleBindError</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码的注释已经非常详细，这里不再详述。我们接着紧跟主线来看看<code>bindObject</code>方法源码:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// Binder.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Object</span> <span class=\"token function\">bindObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationPropertyName</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bindable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">BindHandler</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> allowRecursiveBinding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 从propertySource中的配置属性，获取ConfigurationProperty对象property即application.properties配置文件中若有相关的配置的话，</span>\n\t<span class=\"token comment\">// 那么property将不会为null。举个栗子：假如你在配置文件中配置了spring.profiles.active=dev，那么相应property值为dev；否则为null</span>\n\t<span class=\"token class-name\">ConfigurationProperty</span> property <span class=\"token operator\">=</span> <span class=\"token function\">findProperty</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 若property为null，则不会执行后续的属性绑定相关逻辑</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>property <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">containsNoDescendantOf</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getSources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 如果property == null，则返回null</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 根据target类型获取不同的Binder，可以是null（普通的类型一般是Null）,MapBinder,CollectionBinder或ArrayBinder</span>\n\t<span class=\"token class-name\">AggregateBinder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> aggregateBinder <span class=\"token operator\">=</span> <span class=\"token function\">getAggregateBinder</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 若aggregateBinder不为null比如配置了spring.profiles属性（当然包括其子属性比如spring.profiles.active等）</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aggregateBinder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 若aggregateBinder不为null，则调用bindAggregate并返回绑定后的对象</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">bindAggregate</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> aggregateBinder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 若property不为null</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>property <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 绑定属性到对象中，比如配置文件中设置了server.port=8888，那么将会最终调用bindProperty方法进行属性设置</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">bindProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConverterNotFoundException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// We might still be able to bind it as a bean</span>\n\t\t\t<span class=\"token class-name\">Object</span> bean <span class=\"token operator\">=</span> <span class=\"token function\">bindBean</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span>\n\t\t\t\t\tallowRecursiveBinding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bean <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 只有@ConfigurationProperties注解的类进行外部属性绑定才会走这里</span>\n\t<span class=\"token comment\">/***********************【主线，重点关注】****************************/</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">bindBean</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> allowRecursiveBinding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由上代码中可以看到<code>bindObject</code>中执行属性绑定的逻辑会根据不同的属性类型进入不同的绑定逻辑中，举个栗子：</p>\n<ol>\n<li><code>application.properties</code>配置文件中配置了<code>spring.profiles.active=dev</code>的话，那么将会进入<code>return bindAggregate(name, target, handler, context, aggregateBinder);</code>这个属性绑定的代码逻辑；</li>\n<li><code>application.properties</code>配置文件中配置了<code>server.port=8081</code>的话，那么将会进入<code>return bindBean(name, target, handler, context, allowRecursiveBinding);</code>的属性绑定的逻辑。</li>\n</ol>\n<p>因此我们再次紧跟主线，进入<code>@ConfigurationProperties</code>注解的<code>XxxProperties</code>类的属性绑定逻辑中的<code>bindBean</code>方法中：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// Binder.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">bindBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurationPropertyName</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bindable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> target<span class=\"token punctuation\">,</span> <span class=\"token comment\">// name指的是ConfigurationProperties的前缀名</span>\n\t\t<span class=\"token class-name\">BindHandler</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> allowRecursiveBinding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 这里做一些ConfigurationPropertyState的相关检查</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">containsNoDescendantOf</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getSources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">||</span> <span class=\"token function\">isUnbindableBean</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 这里新建一个BeanPropertyBinder的实现类对象，注意这个对象实现了bindProperty方法</span>\n\t<span class=\"token class-name\">BeanPropertyBinder</span> propertyBinder <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">,</span> propertyTarget<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>\n\t\t\tname<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> propertyTarget<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * (propertyName, propertyTarget) -> bind(\n\t * \t\t\t\tname.append(propertyName), propertyTarget, handler, context, false);\n\t * \t等价于\n\t * \tnew BeanPropertyBinder() &#123;\n\t *\t\tObject bindProperty(String propertyName, Bindable&lt;?> target)&#123;\n\t *\t\t\tbind(name.append(propertyName), propertyTarget, handler, context, false);\n\t *\t\t&#125;\n\t * \t&#125;\n\t */</span>\n\t<span class=\"token comment\">// type类型即@ConfigurationProperties注解标注的XxxProperties类</span>\n\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> type <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>allowRecursiveBinding <span class=\"token operator\">&amp;&amp;</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">hasBoundBean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 这里应用了java8的lambda语法，作为没怎么学习java8的lambda语法的我，不怎么好理解下面的逻辑，哈哈</span>\n\t<span class=\"token comment\">// 真正实现将外部配置属性绑定到@ConfigurationProperties注解的XxxProperties类的属性中的逻辑应该就是在这句lambda代码了</span>\n\t<span class=\"token comment\">/*******************【主线】***************************/</span>\n\t<span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">withBean</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> boundBeans <span class=\"token operator\">=</span> BEAN_BINDERS<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> propertyBinder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> boundBeans<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token operator\">::</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 根据上面的lambda语句翻译如下：</span>\n\t<span class=\"token comment\">/** 这里的T指的是各种属性绑定对象，比如ServerProperties\n\t * return context.withBean(type, new Supplier&lt;T>() &#123;\n\t * \tT get() &#123;\n\t * \t\tStream&lt;?> boundBeans = BEAN_BINDERS.stream()\n\t * \t\t\t\t\t.map((b) -> b.bind(name, target, context, propertyBinder));\n\t * \t\t\treturn boundBeans.filter(Objects::nonNull).findFirst().orElse(null);\n\t *        &#125;\n\t *  &#125;);\n\t */</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从上面代码中，我们追根究底来到了外部配置属性绑定到<code>XxxProperties</code>类属性中的比较底层的代码了，可以看到属性绑定的逻辑应该就在上面代码标注<code>【主线】</code>的<code>lambda</code>代码处了。这里就不再详述了，因为这个属于 SpringBoot 的属性绑定<code>Binder</code>的范畴，<code>Binder</code>相关类是 SpringBoot2.0 才出现的，即对之前的属性绑定相关代码进行推翻重写了。属性绑定相关的源码也比较多，后续有需要再另开一篇来分析探究吧。</p>\n<p><a name=\"a4345280\"></a></p>\n<h2 id=\"9-小结\"><a href=\"#9-小结\" class=\"headerlink\" title=\"9 小结\"></a>9 小结</h2><p>好了，外部配置属性值是如何被绑定到<code>XxxProperties</code>类属性上的源码分析就到此结束了，又是蛮长的一篇文章，不知自己表述清楚没，重要步骤现总结下：</p>\n<ol>\n<li>首先是<code>@EnableConfigurationProperties</code>注解<code>import</code>了<code>EnableConfigurationPropertiesImportSelector</code>后置处理器；</li>\n<li><code>EnableConfigurationPropertiesImportSelector</code>后置处理器又向<code>Spring</code>容器中注册了<code>ConfigurationPropertiesBeanRegistrar</code>和<code>ConfigurationPropertiesBindingPostProcessorRegistrar</code>这两个<code>bean</code>；</li>\n<li>其中<code>ConfigurationPropertiesBeanRegistrar</code>向<code>Spring</code>容器中注册了<code>XxxProperties</code>类型的<code>bean</code>；<code>ConfigurationPropertiesBindingPostProcessorRegistrar</code>向<code>Spring</code>容器中注册了<code>ConfigurationBeanFactoryMetadata</code>和<code>ConfigurationPropertiesBindingPostProcessor</code>两个后置处理器；</li>\n<li><code>ConfigurationBeanFactoryMetadata</code>后置处理器在初始化<code>bean</code> <code>factory</code>时将<code>@Bean</code>注解的元数据存储起来，以便在后续的外部配置属性绑定的相关逻辑中使用；</li>\n<li><code>ConfigurationPropertiesBindingPostProcessor</code>后置处理器将外部配置属性值绑定到<code>XxxProperties</code>类属性的逻辑委托给<code>ConfigurationPropertiesBinder</code>对象，然后<code>ConfigurationPropertiesBinder</code>对象又最终将属性绑定的逻辑委托给<code>Binder</code>对象来完成。</li>\n</ol>\n<p>可见，重要的是上面的<strong>第 5 步</strong>。</p>\n<p><strong>PS</strong>：本来打算这篇开始分析 SpringBoot 的启动流程的，但是回过头去看看自动配置的相关源码，还有蛮多没有分析的，因此再来一波自动配置相关的源码先。</p>\n<h1 id=\"6-SpringBoot内置的各种Starter是怎样构建的\"><a href=\"#6-SpringBoot内置的各种Starter是怎样构建的\" class=\"headerlink\" title=\"6 SpringBoot内置的各种Starter是怎样构建的\"></a>6 SpringBoot内置的各种Starter是怎样构建的</h1><p><a name=\"a6397be7\"></a></p>\n<h2 id=\"1-温故而知新\"><a href=\"#1-温故而知新\" class=\"headerlink\" title=\"1 温故而知新\"></a>1 温故而知新</h2><p>温故而知新，我们来简单回顾一下上篇的内容，上一篇我们分析了SpringBoot<strong>外部配置属性值是如何被绑定到XxxProperties类属性上</strong>的相关源码，现将外部属性绑定的重要步骤总结如下：</p>\n<ol>\n<li>首先是<code>@EnableConfigurationProperties</code>注解<code>import</code>了<code>EnableConfigurationPropertiesImportSelector</code>后置处理器；</li>\n<li><code>EnableConfigurationPropertiesImportSelector</code>后置处理器又向<code>Spring</code>容器中注册了<code>ConfigurationPropertiesBeanRegistrar</code>和<code>ConfigurationPropertiesBindingPostProcessorRegistrar</code>这两个<code>bean</code>；</li>\n<li>其中<code>ConfigurationPropertiesBeanRegistrar</code>向<code>Spring</code>容器中注册了<code>XxxProperties</code>类型的<code>bean</code>；<code>ConfigurationPropertiesBindingPostProcessorRegistrar</code>向<code>Spring</code>容器中注册了<code>ConfigurationBeanFactoryMetadata</code>和<code>ConfigurationPropertiesBindingPostProcessor</code>两个后置处理器；</li>\n<li><code>ConfigurationBeanFactoryMetadata</code>后置处理器在初始化<code>bean</code> <code>factory</code>时将<code>@Bean</code>注解的元数据存储起来，以便在后续的外部配置属性绑定的相关逻辑中使用；</li>\n<li><code>ConfigurationPropertiesBindingPostProcessor</code>后置处理器将外部配置属性值绑定到<code>XxxProperties</code>类属性的逻辑委托给<code>ConfigurationPropertiesBinder</code>对象，然后<code>ConfigurationPropertiesBinder</code>对象又最终将属性绑定的逻辑委托给<code>Binder</code>对象来完成。</li>\n</ol>\n<p>可见，重要的是上面的<strong>第5步</strong>。</p>\n<p><a name=\"cd1f626d\"></a></p>\n<h2 id=\"2-引言\"><a href=\"#2-引言\" class=\"headerlink\" title=\"2 引言\"></a>2 引言</h2><p>我们都知道，SpringBoot内置了各种<code>Starter</code>起步依赖，我们使用非常方便，大大减轻了我们的开发工作。有了<code>Starter</code>起步依赖，我们不用去考虑这个项目需要什么库，这个库的<code>groupId</code>和<code>artifactId</code>是什么？更不用担心引入这个版本的库后会不会跟其他依赖有没有冲突。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>举个栗子</strong>：现在我们想开发一个web项目，那么只要引入<code>spring-boot-starter-web</code>这个起步依赖就可以了，不用考虑要引入哪些版本的哪些依赖了。像以前我们还要考虑引入哪些依赖库，比如要引入<code>spring-web</code>和<code>spring-webmvc</code>依赖等；此外，还要考虑引入这些库的哪些版本才不会跟其他库冲突等问题。</p></blockquote>\n<p>那么我们今天暂时不分析SpringBoot自动配置的源码，由于起步依赖跟自动配置的关系是如影随形的关系，因此本篇先站在maven项目构建的角度来宏观分析下我们平时使用的<strong>SpringBoot内置的各种</strong><code>**Starter**</code><strong>是怎样构建的？</strong></p>\n<p><a name=\"e01f2902\"></a></p>\n<h2 id=\"3-Maven传递依赖的optional标签\"><a href=\"#3-Maven传递依赖的optional标签\" class=\"headerlink\" title=\"3 Maven传递依赖的optional标签\"></a>3 Maven传递依赖的optional标签</h2><p>在分析SpringBoot内置的各种<code>Starter</code>构建原理前，我们先来认识下Maven的<code>optional</code>标签，因为这个标签起到至关重要的作用。 Maven的<code>optional</code>标签表示可选依赖即不可传递的意思，下面直接举个栗子来说明。</p>\n<p>比如有<code>A</code>,<code>B</code>和<code>C</code>三个库，<code>C</code>依赖<code>B</code>，<code>B</code>依赖<code>A</code>。下面看下这三个库的<code>pom.xml</code>文件：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// A的pom.xml</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>project xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0\"</span>\n         xmlns<span class=\"token operator\">:</span>xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n         xsi<span class=\"token operator\">:</span>schemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"token operator\">></span>\n\n\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>ymbj<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span><span class=\"token class-name\">A</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">1.0</span><span class=\"token operator\">-</span>SNAPSHOT<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>project<span class=\"token operator\">></span>\n复制代码\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>project xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0\"</span>\n         xmlns<span class=\"token operator\">:</span>xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n         xsi<span class=\"token operator\">:</span>schemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"token operator\">></span>\n\n\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>ymbj<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span><span class=\"token class-name\">B</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">1.0</span><span class=\"token operator\">-</span>SNAPSHOT<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span>\n\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>注意是可选依赖<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>ymbj<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span><span class=\"token class-name\">A</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">1.0</span><span class=\"token operator\">-</span>SNAPSHOT<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span>\n\t    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>optional<span class=\"token punctuation\">></span></span><span class=\"token boolean\">true</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>optional<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>project<span class=\"token operator\">></span>\n复制代码\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>project xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0\"</span>\n         xmlns<span class=\"token operator\">:</span>xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n         xsi<span class=\"token operator\">:</span>schemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"token operator\">></span>\n\n\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>ymbj<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span><span class=\"token class-name\">C</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">1.0</span><span class=\"token operator\">-</span>SNAPSHOT<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span>\n\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>ymbj<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span><span class=\"token class-name\">B</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">1.0</span><span class=\"token operator\">-</span>SNAPSHOT<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>project<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面三个<code>A</code>,<code>B</code>和<code>C</code>库的<code>pom.xml</code>可知，<code>B</code>库依赖<code>A</code>库，然后<code>C</code>库又依赖了<code>B</code>库，那么请想一下，<strong>Maven打包构建</strong><code>**C**</code><strong>库后，</strong><code>**A**</code><strong>库有没有被引进来？</strong></p>\n<p>答案肯定是<strong>没有</strong>，因为<code>B</code>库引入<code>A</code>库依赖时使用了<code>&lt;optional&gt;true&lt;/optional&gt;</code>，即将Maven的<code>optional</code>标签值设为了<code>true</code>，此时<code>C</code>库再引入<code>B</code>库依赖时，<code>A</code>库是不会被引入到<code>C</code>库的。</p>\n<p>同时跟Maven传递依赖有关的还有一个<code>exclusions</code>标签，这个表示将某个库的某个子依赖排除掉，这里不再详述。</p>\n<p><a name=\"ebbce736\"></a></p>\n<h2 id=\"4-SpringBoot内置的各种Starter是怎样构建的？\"><a href=\"#4-SpringBoot内置的各种Starter是怎样构建的？\" class=\"headerlink\" title=\"4 SpringBoot内置的各种Starter是怎样构建的？\"></a>4 SpringBoot内置的各种Starter是怎样构建的？</h2><p>我们现在来探究SpringBoot内置的各种<code>Starter</code>到底是怎样构建的呢？</p>\n<p>还记得<a href=\"https://juejin.cn/post/6844904070818463751\">如何分析SpringBoot源码模块及结构？</a>这篇文章分析的SpringBoot内部的模块之间的关系吗？先来回顾一下SpringBoot源码内部模块图：</p>\n<p><img src=\"/../assets/1648015817253-0ab05196-5ca4-481c-8741-32adfa382c44.png\"><br />图1</p>\n<p>我们都知道，SpringBoot的<code>Starter</code>的构建的原理实质就是自动配置，因此由图1可以看到SpringBoot源码项目内部跟<code>Starter</code>及其自动配置有关的模块有四个：<code>spring-boot-starters</code>,<code>spring-boot-actuator-autoconfigure</code>,<code>spring-boot-autoconfigure</code>和<code>spring-boot-test-autoconfigure</code>。 每个模块的作用请看<a href=\"https://juejin.cn/post/6844904070818463751\">如何分析SpringBoot源码模块及结构？</a>这篇文章，这里不再赘述。</p>\n<p>那么，<code>spring-boot-starters</code>模块跟后面三个自动配置有关的模块<code>xxx-autoconfigure</code>模块的关系是怎样的呢？</p>\n<p>此时我们先来看看<code>spring-boot-starters</code>模块里面的结构是怎样的？</p>\n<p><img src=\"/../assets/1648015817264-2c08b35d-f481-4934-9b95-f6c75423ef18.png\"><br />图2</p>\n<p>由图2可以看到<code>spring-boot-starters</code>模块包含了SpringBoot内置的各种<code>starter</code>：<code>spring-boot-starter-xxx</code>。由于SpringBoot内置的各种<code>starter</code>太多，以我们常用的<code>spring-boot-starter-web</code>起步依赖来探究好了。</p>\n<p>我们首先看下<code>spring-boot-starter-web</code>模块内部结构：</p>\n<p><img src=\"/../assets/1648015817168-97f70c4a-ff63-427b-85b3-a6f4aa86f229.png\"><br />图3</p>\n<p>可以看到<code>spring-boot-starter-web</code>模块里面只有<code>.flattened-pom.xml</code>和<code>pom.xml</code>文件，<strong>而没有任何代码</strong>！有点出乎我们意料。我们都知道若要用到SpringBoot的web功能时引入<code>spring-boot-starter-web</code>起步依赖即可，而现在<code>spring-boot-starter-web</code>模块里面没有一行代码，那么<code>spring-boot-starter-web</code>究竟是如何构建的呢？会不会跟图1所示的<code>spring-boot-autoconfigure</code>自动配置模块有关？</p>\n<p>此时我们就需要看下<code>spring-boot-starter-web</code>模块的<code>pom.xml</code>文件内容：</p>\n<p><img src=\"/../assets/1648015817291-1fc18591-0fa2-4114-9ecb-18e713ee7fd5.png\"><br />图4</p>\n<p>由图4可以看到，<code>spring-boot-starter-web</code>模块依赖了<code>spring-boot-starter</code>,<code>spring-boot-starter-tomcat</code>,<code>spring-web</code>和<code>spring-webmvc</code>等模块，居然没有依赖<code>spring-boot-autoconfigure</code>自动配置模块!</p>\n<p>由于<code>spring-boot-starter-web</code>模块肯定跟<code>spring-boot-autoconfigure</code>自动配置模块有关，所以<code>spring-boot-starter-web</code>模块肯定是间接依赖了<code>spring-boot-autoconfigure</code>自动配置模块。</p>\n<p>图4标有标注”重点关注”的<code>spring-boot-starter</code>模块是绝大部分<code>spring-boot-starter-xxx</code>模块依赖的基础模块，是核心的<code>Starter</code>，包括了自动配置，日志和<code>YAML</code>支持。我们此时来关注下<code>spring-boot-starter</code>的<code>pom.xml</code>文件，也许其依赖了了<code>spring-boot-autoconfigure</code>自动配置模块。</p>\n<p><img src=\"/../assets/1648015817338-a97e6c2b-2dcb-4d71-b061-c5c977c8a702.png\"><br />图5</p>\n<p>由图5可以看到，我们前面的猜想没有错，<strong>正是</strong><code>**spring-boot-starter**</code><strong>模块依赖了</strong><code>**spring-boot-autoconfigure**</code><em><em>自动配置模块！</em><em>因此，到了这里我们就可以得出结论了：</em></em><em><code>**_spring-boot-starter-web_**</code><strong><em>模块没有一行代码，但是其通过</em></strong><code>**_spring-boot-starter_**</code>**_模块</em>_间接**依赖了<code>spring-boot-autoconfigure</code>自动配置模块，从而实现了其起步依赖的功能。</p>\n<p>此时我们再来看下<code>spring-boot-autoconfigure</code>自动配置模块的内部包结构：</p>\n<p><img src=\"/../assets/1648015818436-894a603e-7a49-41a4-b5b2-15d2addc0831.png\"><br />图6</p>\n<p>由图6红框处，我们可以知道<code>spring-boot-starter-web</code>起步依赖的自动配置功能原来是由<code>spring-boot-autoconfigure</code>模块的<code>web</code>包下的类实现的。</p>\n<p>到了这里<code>spring-boot-starter-web</code>起步依赖的构建基本原理我们就搞清楚了，但是还有一个特别重要的关键点我们还没Get到。这个关键点跟Maven的<code>optional</code>标签有的作用有关。</p>\n<p>为了Get到这个点，我们先来思考一个问题：平时我们开发<code>web</code>项目为什么引入了<code>spring-boot-starter-web</code>这个起步依赖后，<code>spring-boot-autoconfigure</code>模块的<code>web</code>相关的自动配置类就会起自动起作用呢？</p>\n<p>我们应该知道，某个自动配置类起作用往往是由于<code>classpath</code>中存在某个类，这里以<code>DispatcherServletAutoConfiguration</code>这个自动配置类为切入点去Get这个点好了。 先看下<code>DispatcherServletAutoConfiguration</code>能够自动配置的条件是啥？</p>\n<p><img src=\"/../assets/1648015818820-ea32ea96-4616-4c3c-b170-f30e6415b474.png\"><br />图7</p>\n<p>由图7所示，<code>DispatcherServletAutoConfiguration</code>能够自动配置的条件之一是<code>@ConditionalOnClass(DispatcherServlet.class)</code>，即只有<code>classpath</code>中存在<code>DispatcherServlet.class</code>这个类，那么<code>DispatcherServletAutoConfiguration</code>自动配置相关逻辑才能起作用。</p>\n<p>而<code>DispatcherServlet</code>这个类是在<code>spring-webmvc</code>这个依赖库中的，如下图所示：</p>\n<p><img src=\"/../assets/1648015819157-49b88d28-2583-4c05-8b8e-acd17557cfa3.png\"><br />图8</p>\n<p>此时我们再看下<code>spring-boot-autoconfigure</code>模块的<code>pom.xml</code>文件引入<code>spring-webmvc</code>这个依赖的情况：</p>\n<p><img src=\"/../assets/1648015819517-afb946cd-7eeb-466a-a96e-cf6c63fe5ba1.png\"><br />图9</p>\n<p>由图9所示，<code>spring-boot-autoconfigure</code>模块引入的<code>spring-webmvc</code>这个依赖时<code>optional</code>被设置为<code>true</code>，原来是可选依赖。即<code>spring-webmvc</code>这个依赖库只会被导入到<code>spring-boot-autoconfigure</code>模块中，而不会被导入到间接依赖<code>spring-boot-autoconfigure</code>模块的<code>spring-boot-starter-web</code>这个起步依赖中。</p>\n<p>此时，我们再来看看<code>spring-boot-starter-web</code>的<code>pom.xml</code>文件的依赖情况：</p>\n<p><img src=\"/../assets/1648015819837-c3330023-3c05-4c45-ab4c-e35720d58bbb.png\"><br />图10</p>\n<p>由图10所示，<code>spring-boot-starter-web</code>起步依赖<strong>显式</strong>引入了<code>spring-webmvc</code>这个依赖库，即引入<code>spring-webmvc</code>   时没有<code>optional</code>这个标签，又因为<code>DispatcherServlet</code>这个类是在<code>spring-webmvc</code>这个依赖库中的,从而<code>classpath</code>中存在<code>DispatcherServlet</code>这个类，因此<code>DispatcherServletAutoConfiguration</code>这个自动配置类就生效了。当然，<code>web</code>相关的其他自动配置类生效也是这个原理。</p>\n<p>至此，我们也明白了<code>spring-boot-autoconfigure</code>模块为什么要把引入的<code>spring-webmvc</code>这个依赖作为可选依赖了，其目的就是为了在<code>spring-boot-starter-web</code>起步依赖中能显式引入<code>spring-webmvc</code>这个依赖（这个起决定性作用），从而我们开发web项目只要引入了<code>spring-boot-starter-web</code>起步依赖，那么web相关的自动配置类就生效，从而可以开箱即用这个就是<code>spring-boot-starter-web</code>这个起步依赖的构建原理了。</p>\n<p>前面提到的<code>spring-boot-starter-actuator</code>,<code>spring-boot-starter-test</code>及其他内置的<code>spring-boot-starter-xxx</code>的起步依赖的构建原理也是如此，只不过<code>spring-boot-starter-actuator</code>依赖的是<code>spring-boot-actuator-autoconfigure</code>，<code>spring-boot-starter-test</code>依赖的是<code>spring-boot-test-autoconfigure</code>模块罢了，这里不再详述。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>思考</strong>：<code>spring-boot-actuator-autoconfigure</code>的<code>pom.xml</code>文件引入了20多个可选依赖，而为什么<code>spring-boot-starter-actuator</code>起步依赖只引入了<code>micrometer-core</code>这个依赖呢？</p></blockquote>\n<p><a name=\"cd6274eb\"></a></p>\n<h2 id=\"5-模仿SpringBoot包结构自定义一个Starter\"><a href=\"#5-模仿SpringBoot包结构自定义一个Starter\" class=\"headerlink\" title=\"5 模仿SpringBoot包结构自定义一个Starter\"></a>5 模仿SpringBoot包结构自定义一个Starter</h2><p>前面分析了SpringBoot内置的各种<code>Starter</code>的构建原理，理论联系实践，那么如果能够动手实践一下自定义<code>Starter</code>那就更好了。</p>\n<p>下面提供一个自定义<code>Starter</code>的一个简单<code>Demo</code>，这个<code>Demo</code>完全模仿<code>SpringBoot</code>内置<code>Starter</code>的内部包结构来编写，对于进一步了解SpringBoot内置的各种<code>Starter</code>的构建原理很有帮助。</p>\n<p>下面是这个<code>Demo</code>的github地址，推荐给有兴趣的小伙伴们。 <a href=\"https://github.com/jinyue233/mock-spring-boot-autoconfiguration\">模仿springboot内部结构自定义Starter</a>。此外，如何自定义一个<code>Starter</code>，可以参考下Mybatis的<a href=\"https://github.com/mybatis/spring-boot-starter\">spring-boot-starter</a>是如何编写的。</p>\n<p><a name=\"2c7aed2d\"></a></p>\n<h2 id=\"6-小结-1\"><a href=\"#6-小结-1\" class=\"headerlink\" title=\"6 小结\"></a>6 小结</h2><p>好了，SpringBoot内置的各种<code>Starter</code>的构建原理分析就到此结束了，现将关键点总结下：</p>\n<ol>\n<li><code>spring-boot-starter-xxx</code>起步依赖没有一行代码，而是直接或间接依赖了<code>xxx-autoconfigure</code>模块，而<code>xxx-autoconfigure</code>模块承担了<code>spring-boot-starter-xxx</code>起步依赖自动配置的实现；</li>\n<li><code>xxx-autoconfigure</code>自动配置模块引入了一些可选依赖，这些可选依赖不会被传递到<code>spring-boot-starter-xxx</code>起步依赖中，这是起步依赖构建的<strong>关键点</strong>；</li>\n<li><code>spring-boot-starter-xxx</code>起步依赖<strong>显式</strong>引入了一些对自动配置起作用的可选依赖；</li>\n<li>经过前面3步的准备，我们项目只要引入了某个起步依赖后，就可以开箱即用了，而不用手动去创建一些<code>bean</code>等。</li>\n</ol>\n<h1 id=\"7-SpringBoot的启动流程\"><a href=\"#7-SpringBoot的启动流程\" class=\"headerlink\" title=\"7 SpringBoot的启动流程\"></a>7 SpringBoot的启动流程</h1><p><a name=\"a6397be7\"></a></p>\n<h2 id=\"1-温故而知新-1\"><a href=\"#1-温故而知新-1\" class=\"headerlink\" title=\"1 温故而知新\"></a>1 温故而知新</h2><p>温故而知新，我们来简单回顾一下上篇的内容，上一篇我们分析了**SpringBoot内置的各种Starter是怎样构建的?**，现将关键点重新回顾总结下：</p>\n<ol>\n<li><code>spring-boot-starter-xxx</code>起步依赖没有一行代码，而是直接或间接依赖了<code>xxx-autoconfigure</code>模块，而<code>xxx-autoconfigure</code>模块承担了<code>spring-boot-starter-xxx</code>起步依赖自动配置的实现；</li>\n<li><code>xxx-autoconfigure</code>自动配置模块引入了一些可选依赖，这些可选依赖不会被传递到<code>spring-boot-starter-xxx</code>起步依赖中，这是起步依赖构建的<strong>关键点</strong>；</li>\n<li><code>spring-boot-starter-xxx</code>起步依赖<strong>显式</strong>引入了一些对自动配置起作用的可选依赖，因此会触发 <code>xxx-autoconfigure</code>自动配置的逻辑（比如创建某些符合条件的配置<code>bean</code>）；</li>\n<li>经过前面3步的准备，我们项目只要引入了某个起步依赖后，就可以开箱即用了，而不用手动去创建一些<code>bean</code>等。</li>\n</ol>\n<p><a name=\"cd1f626d\"></a></p>\n<h2 id=\"2-引言-1\"><a href=\"#2-引言-1\" class=\"headerlink\" title=\"2 引言\"></a>2 引言</h2><p>本来这篇文章会继续SpringBoot自动配置的源码分析的，想分析下<code>spring-boot-starter-web</code>的自动配置的源码是怎样的的。但是考虑到<code>spring-boot-starter-web</code>的自动配置逻辑跟内置<code>Tomcat</code>等有关，因此想以后等分析了SpringBoot的内置<code>Tomcat</code>的相关源码后再来继续分析<code>spring-boot-starter-web</code>的自动配置的源码。</p>\n<p>因此，本篇我们来探究下<strong>SpringBoot的启动流程是怎样的？</strong></p>\n<p><a name=\"b9fb0621\"></a></p>\n<h2 id=\"3-如何编写一个SpringBoot启动类\"><a href=\"#3-如何编写一个SpringBoot启动类\" class=\"headerlink\" title=\"3 如何编写一个SpringBoot启动类\"></a>3 如何编写一个SpringBoot启动类</h2><p>我们都知道，我们运行一个SpringBoot项目，引入相关<code>Starters</code>和相关依赖后，再编写一个启动类，然后在这个启动类标上<code>@SpringBootApplication</code>注解，然后就可以启动运行项目了，如下代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//MainApplication.java</span>\n\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApplication</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如上代码，我们在<code>MainApplication</code>启动类上标注了<code>@SpringBootApplication</code>注解，然后在<code>main</code>函数中调用<code>SpringApplication.run(MainApplication.class, args);</code>这句代码就完成了SpringBoot的启动流程，非常简单。</p>\n<p><a name=\"dbaed577\"></a></p>\n<h2 id=\"4-SpringBootApplication\"><a href=\"#4-SpringBootApplication\" class=\"headerlink\" title=\"4 @SpringBootApplication\"></a>4 @SpringBootApplication</h2><p>现在我们来分析下标注在启动类上的<code>@SpringBootApplication</code>注解，直接上源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringBootApplication.java </span>\n\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token annotation punctuation\">@SpringBootConfiguration</span>\n<span class=\"token annotation punctuation\">@EnableAutoConfiguration</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>excludeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// TODO 这两个排除过滤器TypeExcludeFilter和AutoConfigurationExcludeFilter暂不知道啥作用</span>\n\t\t<span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>CUSTOM<span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> <span class=\"token class-name\">TypeExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>CUSTOM<span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> <span class=\"token class-name\">AutoConfigurationExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">SpringBootApplication</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 等同于EnableAutoConfiguration注解的exclude属性</span>\n\t<span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span>annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">EnableAutoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">exclude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 等同于EnableAutoConfiguration注解的excludeName属性</span>\n\t<span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span>annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">EnableAutoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">excludeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 等同于ComponentScan注解的basePackages属性</span>\n\t<span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span>annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">ComponentScan</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> attribute <span class=\"token operator\">=</span> <span class=\"token string\">\"basePackages\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">scanBasePackages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 等同于ComponentScan注解的basePackageClasses属性</span>\n\t<span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span>annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">ComponentScan</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> attribute <span class=\"token operator\">=</span> <span class=\"token string\">\"basePackageClasses\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">scanBasePackageClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，<code>@SpringBootApplication</code>注解是一个组合注解，主要由<code>@SpringBootConfiguration</code>,<code>@EnableAutoConfiguration</code>和<code>@ComponentScan</code>这三个注解组合而成。</p>\n<p>因此<code>@SpringBootApplication</code>注解主要作为一个配置类，能够触发包扫描和自动配置的逻辑，从而使得SpringBoot的相关<code>bean</code>被注册进Spring容器。</p>\n<p><a name=\"c5ca2a15\"></a></p>\n<h2 id=\"5-SpringBoot的启动流程是怎样的？\"><a href=\"#5-SpringBoot的启动流程是怎样的？\" class=\"headerlink\" title=\"5 SpringBoot的启动流程是怎样的？\"></a>5 SpringBoot的启动流程是怎样的？</h2><p>接下来是本篇的重点，我们来分析下<strong>SpringBoot的启动流程是怎样的？</strong></p>\n<p>我们接着来看前面<code>main</code>函数里的<code>SpringApplication.run(MainApplication.class, args);</code>这句代码，那么<code>SpringApplication</code>这个类是干嘛的呢？</p>\n<p><code>SpringApplication</code>类是用来启动SpringBoot项目的，可以在java的<code>main</code>方法中启动，目前我们知道这些就足够了。下面看下<code>SpringApplication.run(MainApplication.class, args);</code>这句代码的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token comment\">// run方法是一个静态方法，用于启动SpringBoot</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> primarySource<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 继续调用静态的run方法</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> primarySource <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的静态<code>run</code>方法里又继续调用另一个静态<code>run</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token comment\">// run方法是一个静态方法，用于启动SpringBoot</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> primarySources<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 构建一个SpringApplication对象，并调用其run方法来启动</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">(</span>primarySources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如上代码，可以看到构建了一个<code>SpringApplication</code>对象，然后再调用其<code>run</code>方法来启动SpringBoot项目。关于<code>SpringApplication</code>对象是如何构建的，我们后面再分析，现在直接来看下启动流程的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// new 一个StopWatch用于统计run启动过程花了多少时间</span>\n\t<span class=\"token class-name\">StopWatch</span> stopWatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StopWatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 开始计时</span>\n\tstopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">ConfigurableApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// exceptionReporters集合用来存储异常报告器，用来报告SpringBoot启动过程的异常</span>\n\t<span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpringBootExceptionReporter</span><span class=\"token punctuation\">></span></span> exceptionReporters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 配置headless属性，即“java.awt.headless”属性，默认为ture</span>\n\t<span class=\"token comment\">// 其实是想设置该应用程序,即使没有检测到显示器,也允许其启动.对于服务器来说,是不需要显示器的,所以要这样设置.</span>\n\t<span class=\"token function\">configureHeadlessProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【1】从spring.factories配置文件中加载到EventPublishingRunListener对象并赋值给SpringApplicationRunListeners</span>\n\t<span class=\"token comment\">// EventPublishingRunListener对象主要用来发射SpringBoot启动过程中内置的一些生命周期事件，标志每个不同启动阶段</span>\n\t<span class=\"token class-name\">SpringApplicationRunListeners</span> listeners <span class=\"token operator\">=</span> <span class=\"token function\">getRunListeners</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 启动SpringApplicationRunListener的监听，表示SpringApplication开始启动。</span>\n\t<span class=\"token comment\">// 》》》》》发射【ApplicationStartingEvent】事件</span>\n\tlisteners<span class=\"token punctuation\">.</span><span class=\"token function\">starting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 创建ApplicationArguments对象，封装了args参数</span>\n\t\t<span class=\"token class-name\">ApplicationArguments</span> applicationArguments <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultApplicationArguments</span><span class=\"token punctuation\">(</span>\n\t\t\t\targs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 【2】准备环境变量，包括系统变量，环境变量，命令行参数，默认变量，servlet相关配置变量，随机值，</span>\n\t\t<span class=\"token comment\">// JNDI属性值，以及配置文件（比如application.properties）等，注意这些环境变量是有优先级的</span>\n\t\t<span class=\"token comment\">// 》》》》》发射【ApplicationEnvironmentPreparedEvent】事件</span>\n\t\t<span class=\"token class-name\">ConfigurableEnvironment</span> environment <span class=\"token operator\">=</span> <span class=\"token function\">prepareEnvironment</span><span class=\"token punctuation\">(</span>listeners<span class=\"token punctuation\">,</span>\n\t\t\t\tapplicationArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 配置spring.beaninfo.ignore属性，默认为true，即跳过搜索BeanInfo classes.</span>\n\t\t<span class=\"token function\">configureIgnoreBeanInfo</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 【3】控制台打印SpringBoot的bannner标志</span>\n\t\t<span class=\"token class-name\">Banner</span> printedBanner <span class=\"token operator\">=</span> <span class=\"token function\">printBanner</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 【4】根据不同类型创建不同类型的spring applicationcontext容器</span>\n\t\t<span class=\"token comment\">// 因为这里是servlet环境，所以创建的是AnnotationConfigServletWebServerApplicationContext容器对象</span>\n\t\tcontext <span class=\"token operator\">=</span> <span class=\"token function\">createApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 【5】从spring.factories配置文件中加载异常报告期实例，这里加载的是FailureAnalyzers</span>\n\t\t<span class=\"token comment\">// 注意FailureAnalyzers的构造器要传入ConfigurableApplicationContext，因为要从context中获取beanFactory和environment</span>\n\t\texceptionReporters <span class=\"token operator\">=</span> <span class=\"token function\">getSpringFactoriesInstances</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token class-name\">SpringBootExceptionReporter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">ConfigurableApplicationContext</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ConfigurableApplicationContext是AnnotationConfigServletWebServerApplicationContext的父接口</span>\n\t\t<span class=\"token comment\">// 【6】为刚创建的AnnotationConfigServletWebServerApplicationContext容器对象做一些初始化工作，准备一些容器属性值等</span>\n\t\t<span class=\"token comment\">// 1）为AnnotationConfigServletWebServerApplicationContext的属性AnnotatedBeanDefinitionReader和ClassPathBeanDefinitionScanner设置environgment属性</span>\n\t\t<span class=\"token comment\">// 2）根据情况对ApplicationContext应用一些相关的后置处理，比如设置resourceLoader属性等</span>\n\t\t<span class=\"token comment\">// 3）在容器刷新前调用各个ApplicationContextInitializer的初始化方法，ApplicationContextInitializer是在构建SpringApplication对象时从spring.factories中加载的</span>\n\t\t<span class=\"token comment\">// 4）》》》》》发射【ApplicationContextInitializedEvent】事件，标志context容器被创建且已准备好</span>\n\t\t<span class=\"token comment\">// 5）从context容器中获取beanFactory，并向beanFactory中注册一些单例bean，比如applicationArguments，printedBanner</span>\n\t\t<span class=\"token comment\">// 6）TODO 加载bean到application context，注意这里只是加载了部分bean比如mainApplication这个bean，大部分bean应该是在AbstractApplicationContext.refresh方法中被加载？这里留个疑问先</span>\n\t\t<span class=\"token comment\">// 7）》》》》》发射【ApplicationPreparedEvent】事件，标志Context容器已经准备完成</span>\n\t\t<span class=\"token function\">prepareContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> environment<span class=\"token punctuation\">,</span> listeners<span class=\"token punctuation\">,</span> applicationArguments<span class=\"token punctuation\">,</span>\n\t\t\t\tprintedBanner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 【7】刷新容器，这一步至关重要，以后会在分析Spring源码时详细分析，主要做了以下工作：</span>\n\t\t<span class=\"token comment\">// 1）在context刷新前做一些准备工作，比如初始化一些属性设置，属性合法性校验和保存容器中的一些早期事件等；</span>\n\t\t<span class=\"token comment\">// 2）让子类刷新其内部bean factory,注意SpringBoot和Spring启动的情况执行逻辑不一样</span>\n\t\t<span class=\"token comment\">// 3）对bean factory进行配置，比如配置bean factory的类加载器，后置处理器等</span>\n\t\t<span class=\"token comment\">// 4）完成bean factory的准备工作后，此时执行一些后置处理逻辑，子类通过重写这个方法来在BeanFactory创建并预准备完成以后做进一步的设置</span>\n\t\t<span class=\"token comment\">// 在这一步，所有的bean definitions将会被加载，但此时bean还不会被实例化</span>\n\t\t<span class=\"token comment\">// 5）执行BeanFactoryPostProcessor的方法即调用bean factory的后置处理器：</span>\n\t\t<span class=\"token comment\">// BeanDefinitionRegistryPostProcessor（触发时机：bean定义注册之前）和BeanFactoryPostProcessor（触发时机：bean定义注册之后bean实例化之前）</span>\n\t\t<span class=\"token comment\">// 6）注册bean的后置处理器BeanPostProcessor，注意不同接口类型的BeanPostProcessor；在Bean创建前后的执行时机是不一样的</span>\n\t\t<span class=\"token comment\">// 7）初始化国际化MessageSource相关的组件，比如消息绑定，消息解析等</span>\n\t\t<span class=\"token comment\">// 8）初始化事件广播器，如果bean factory没有包含事件广播器，那么new一个SimpleApplicationEventMulticaster广播器对象并注册到bean factory中</span>\n\t\t<span class=\"token comment\">// 9）AbstractApplicationContext定义了一个模板方法onRefresh，留给子类覆写，比如ServletWebServerApplicationContext覆写了该方法来创建内嵌的tomcat容器</span>\n\t\t<span class=\"token comment\">// 10）注册实现了ApplicationListener接口的监听器，之前已经有了事件广播器，此时就可以派发一些early application events</span>\n\t\t<span class=\"token comment\">// 11）完成容器bean factory的初始化，并初始化所有剩余的单例bean。这一步非常重要，一些bean postprocessor会在这里调用。</span>\n\t\t<span class=\"token comment\">// 12）完成容器的刷新工作，并且调用生命周期处理器的onRefresh()方法，并且发布ContextRefreshedEvent事件</span>\n\t\t<span class=\"token function\">refreshContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 【8】执行刷新容器后的后置处理逻辑，注意这里为空方法</span>\n\t\t<span class=\"token function\">afterRefresh</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> applicationArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 停止stopWatch计时</span>\n\t\tstopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 打印日志</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logStartupInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">StartupInfoLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainApplicationClass<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">logStarted</span><span class=\"token punctuation\">(</span><span class=\"token function\">getApplicationLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> stopWatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 》》》》》发射【ApplicationStartedEvent】事件，标志spring容器已经刷新，此时所有的bean实例都已经加载完毕</span>\n\t\tlisteners<span class=\"token punctuation\">.</span><span class=\"token function\">started</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 【9】调用ApplicationRunner和CommandLineRunner的run方法，实现spring容器启动后需要做的一些东西比如加载一些业务数据等</span>\n\t\t<span class=\"token function\">callRunners</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> applicationArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 【10】若启动过程中抛出异常，此时用FailureAnalyzers来报告异常</span>\n\t<span class=\"token comment\">// 并》》》》》发射【ApplicationFailedEvent】事件，标志SpringBoot启动失败</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">handleRunFailure</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">,</span> exceptionReporters<span class=\"token punctuation\">,</span> listeners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 》》》》》发射【ApplicationReadyEvent】事件，标志SpringApplication已经正在运行即已经成功启动，可以接收服务请求了。</span>\n\t\tlisteners<span class=\"token punctuation\">.</span><span class=\"token function\">running</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 若出现异常，此时仅仅报告异常，而不会发射任何事件</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">handleRunFailure</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">,</span> exceptionReporters<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 【11】最终返回容器</span>\n\t<span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如上代码就是SpringBoot的启动流程了，其中注释也非常详细，主要步骤也已经标注<code>【x】</code>，现将主要步骤总结如下：</p>\n<ol>\n<li>从<code>spring.factories</code>配置文件中<strong>加载</strong><code>**EventPublishingRunListener**</code><strong>对象</strong>，该对象拥有<code>SimpleApplicationEventMulticaster</code>属性，即在SpringBoot启动过程的不同阶段用来发射内置的生命周期事件;</li>\n<li><strong>准备环境变量</strong>，包括系统变量，环境变量，命令行参数，默认变量，<code>servlet</code>相关配置变量，随机值以及配置文件（比如<code>application.properties</code>）等;</li>\n<li>控制台<strong>打印SpringBoot的</strong><code>**bannner**</code><strong>标志</strong>；</li>\n<li><strong>根据不同类型环境创建不同类型的</strong><code>**applicationcontext**</code><strong>容器</strong>，因为这里是<code>servlet</code>环境，所以创建的是<code>AnnotationConfigServletWebServerApplicationContext</code>容器对象；</li>\n<li>从<code>spring.factories</code>配置文件中<strong>加载</strong><code>**FailureAnalyzers**</code><strong>对象</strong>,用来报告SpringBoot启动过程中的异常；</li>\n<li><strong>为刚创建的容器对象做一些初始化工作</strong>，准备一些容器属性值等，对<code>ApplicationContext</code>应用一些相关的后置处理和调用各个<code>ApplicationContextInitializer</code>的初始化方法来执行一些初始化逻辑等；</li>\n<li><strong>刷新容器</strong>，这一步至关重要。比如调用<code>bean factory</code>的后置处理器，注册<code>BeanPostProcessor</code>后置处理器，初始化事件广播器且广播事件，初始化剩下的单例<code>bean</code>和SpringBoot创建内嵌的<code>Tomcat</code>服务器等等重要且复杂的逻辑都在这里实现，主要步骤可见代码的注释，关于这里的逻辑会在以后的spring源码分析专题详细分析；</li>\n<li><strong>执行刷新容器后的后置处理逻辑</strong>，注意这里为空方法；</li>\n<li><strong>调用</strong><code>**ApplicationRunner**</code><strong>和</strong><code>**CommandLineRunner**</code><strong>的run方法</strong>，我们实现这两个接口可以在spring容器启动后需要的一些东西比如加载一些业务数据等;</li>\n<li><strong>报告启动异常</strong>，即若启动过程中抛出异常，此时用<code>FailureAnalyzers</code>来报告异常;</li>\n<li>最终<strong>返回容器对象</strong>，这里调用方法没有声明对象来接收。</li>\n</ol>\n<p>当然在SpringBoot启动过程中，每个不同的启动阶段会分别发射不同的内置生命周期事件，比如在准备<code>environment</code>前会发射<code>ApplicationStartingEvent</code>事件，在<code>environment</code>准备好后会发射<code>ApplicationEnvironmentPreparedEvent</code>事件，在刷新容器前会发射<code>ApplicationPreparedEvent</code>事件等，总之SpringBoot总共内置了7个生命周期事件，除了标志SpringBoot的不同启动阶段外，同时一些监听器也会监听相应的生命周期事件从而执行一些启动初始化逻辑。</p>\n<p><a name=\"2c7aed2d\"></a></p>\n<h2 id=\"6-小结-2\"><a href=\"#6-小结-2\" class=\"headerlink\" title=\"6 小结\"></a>6 小结</h2><p>好了，SpringBoot的启动流程就已经分析完了，这篇内容主要让我们对SpringBoot的启动流程有一个整体的认识，现在还没必要去深究每一个细节，以免丢了<strong>主线</strong>，现在我们对SpringBoot的启动流程有一个整体的认识即可，关于启动流程的一些重要步骤我们会在以后的源码分析中来深究。</p>\n<p>注：该源码分析对应SpringBoot版本为<strong>2.1.0.RELEASE</strong>，本文对应的SpringBoot源码解析项目github地址：<a href=\"https://github.com/yuanmabiji/spring-boot-2.1.0.RELEASE\">https://github.com/yuanmabiji/spring-boot-2.1.0.RELEASE</a></p>\n<h1 id=\"8-SpringApplication对象是如何构建的？\"><a href=\"#8-SpringApplication对象是如何构建的？\" class=\"headerlink\" title=\"8 SpringApplication对象是如何构建的？\"></a>8 SpringApplication对象是如何构建的？</h1><p><a name=\"a6397be7\"></a></p>\n<h2 id=\"1-温故而知新-2\"><a href=\"#1-温故而知新-2\" class=\"headerlink\" title=\"1 温故而知新\"></a>1 温故而知新</h2><p>温故而知新，我们来简单回顾一下上篇的内容，上一篇我们分析了<strong>SpringBoot的启动流程</strong>，现将关键步骤再浓缩总结下：</p>\n<ol>\n<li>构建<code>SpringApplication</code>对象，用于启动SpringBoot；</li>\n<li>从<code>spring.factories</code>配置文件中加载<code>EventPublishingRunListener</code>对象用于在不同的启动阶段发射不同的生命周期事件；</li>\n<li>准备环境变量，包括系统变量，环境变量，命令行参数及配置文件（比如<code>application.properties</code>）等；</li>\n<li>创建容器<code>ApplicationContext</code>;</li>\n<li>为第4步创建的容器对象做一些初始化工作，准备一些容器属性值等，同时调用各个<code>ApplicationContextInitializer</code>的初始化方法来执行一些初始化逻辑等；</li>\n<li>刷新容器，这一步至关重要，是重点中的重点，太多复杂逻辑在这里实现；</li>\n<li>调用<code>ApplicationRunner</code>和<code>CommandLineRunner</code>的run方法，可以实现这两个接口在容器启动后来加载一些业务数据等;</li>\n</ol>\n<p>在SpringBoot启动过程中，每个不同的启动阶段会分别发射不同的内置生命周期事件，然后相应的监听器会监听这些事件来执行一些初始化逻辑工作比如<code>ConfigFileApplicationListener</code>会监听<code>onApplicationEnvironmentPreparedEvent</code>事件来加载环境变量等。</p>\n<p><a name=\"cd1f626d\"></a></p>\n<h2 id=\"2-引言-2\"><a href=\"#2-引言-2\" class=\"headerlink\" title=\"2 引言\"></a>2 引言</h2><p>上篇文章在讲解SpringBoot的启动流程中，我们有看到新建了一个<code>SpringApplication</code>对象用来启动SpringBoot项目。那么，我们今天就来看看<code>SpringApplication</code>对象的构建过程，同时讲解一下SpringBoot自己实现的SPI机制。</p>\n<p><a name=\"5a4a9b2b\"></a></p>\n<h2 id=\"3-SpringApplication对象的构建过程\"><a href=\"#3-SpringApplication对象的构建过程\" class=\"headerlink\" title=\"3 SpringApplication对象的构建过程\"></a>3 SpringApplication对象的构建过程</h2><p>本小节开始讲解<code>SpringApplication</code>对象的构造过程，因为一个对象的构造无非就是在其构造函数里给它的一些成员属性赋值，很少包含其他额外的业务逻辑（当然有时候我们可能也会在构造函数里开启一些线程啥的）。那么，我们先来看下构造<code>SpringApplication</code>对象时需要用到的一些成员属性哈：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token comment\">/**\n * SpringBoot的启动类即包含main函数的主类\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> primarySources<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * 包含main函数的主类\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> mainApplicationClass<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * 资源加载器\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">ResourceLoader</span> resourceLoader<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * 应用类型\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">WebApplicationType</span> webApplicationType<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * 初始化器\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApplicationContextInitializer</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> initializers<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * 监听器\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ApplicationListener</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> listeners<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到构建<code>SpringApplication</code>对象时主要是给上面代码中的六个成员属性赋值，现在我接着来看<code>SpringApplication</code>对象的构造过程。</p>\n<p>我们先回到上一篇文章讲解的构建<code>SpringApplication</code>对象的代码处:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token comment\">// run方法是一个静态方法，用于启动SpringBoot</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> primarySources<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 构建一个SpringApplication对象，并调用其run方法来启动</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">(</span>primarySources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>跟进<code>SpringApplication</code>的构造函数中：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> primarySources<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 继续调用SpringApplication另一个构造函数</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> primarySources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续跟进<code>SpringApplication</code>另一个构造函数：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceLoader</span> resourceLoader<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> primarySources<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 【1】给resourceLoader属性赋值，注意传入的resourceLoader参数为null</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resourceLoader <span class=\"token operator\">=</span> resourceLoader<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>primarySources<span class=\"token punctuation\">,</span> <span class=\"token string\">\"PrimarySources must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【2】给primarySources属性赋值，传入的primarySources其实就是SpringApplication.run(MainApplication.class, args);中的MainApplication.class</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>primarySources <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>primarySources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【3】给webApplicationType属性赋值，根据classpath中存在哪种类型的类来确定是哪种应用类型</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webApplicationType <span class=\"token operator\">=</span> <span class=\"token class-name\">WebApplicationType</span><span class=\"token punctuation\">.</span><span class=\"token function\">deduceFromClasspath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【4】给initializers属性赋值，利用SpringBoot自定义的SPI从spring.factories中加载ApplicationContextInitializer接口的实现类并赋值给initializers属性</span>\n\t<span class=\"token function\">setInitializers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">)</span> <span class=\"token function\">getSpringFactoriesInstances</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token class-name\">ApplicationContextInitializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【5】给listeners属性赋值，利用SpringBoot自定义的SPI从spring.factories中加载ApplicationListener接口的实现类并赋值给listeners属性</span>\n\t<span class=\"token function\">setListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">)</span> <span class=\"token function\">getSpringFactoriesInstances</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationListener</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【6】给mainApplicationClass属性赋值，即这里要推断哪个类调用了main函数，然后再赋值给mainApplicationClass属性，用于后面启动流程中打印一些日志。</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainApplicationClass <span class=\"token operator\">=</span> <span class=\"token function\">deduceMainApplicationClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到构建<code>SpringApplication</code>对象时其实就是给前面讲的6个<code>SpringApplication</code>类的成员属性赋值而已，做一些初始化工作：</p>\n<ol>\n<li><strong>给</strong><code>**resourceLoader**</code><strong>属性赋值</strong>，<code>resourceLoader</code>属性，资源加载器，此时传入的<code>resourceLoader</code>参数为<code>null</code>；</li>\n<li><strong>给</strong><code>**primarySources**</code><strong>属性赋值</strong>，<code>primarySources</code>属性<code>即SpringApplication.run(MainApplication.class,args);</code>中传入的<code>MainApplication.class</code>，该类为SpringBoot项目的启动类，主要通过该类来扫描<code>Configuration</code>类加载<code>bean</code>；</li>\n<li><strong>给</strong><code>**webApplicationType**</code><strong>属性赋值</strong>，<code>webApplicationType</code>属性，代表应用类型，根据<code>classpath</code>存在的相应<code>Application</code>类来判断。因为后面要根据<code>webApplicationType</code>来确定创建哪种<code>Environment</code>对象和创建哪种<code>ApplicationContext</code>，详细分析请见后面的<code>第3.1小节</code>；</li>\n<li><strong>给</strong><code>**initializers**</code><strong>属性赋值</strong>，<code>initializers</code>属性为<code>List&lt;ApplicationContextInitializer&lt;?&gt;&gt;</code>集合，利用SpringBoot的SPI机制从<code>spring.factories</code>配置文件中加载，后面在初始化容器的时候会应用这些初始化器来执行一些初始化工作。因为SpringBoot自己实现的SPI机制比较重要，因此独立成一小节来分析，详细分析请见后面的<code>第4小节</code>；</li>\n<li><strong>给</strong><code>**listeners**</code><strong>属性赋值</strong>，<code>listeners</code>属性为<code>List&lt;ApplicationListener&lt;?&gt;&gt;</code>集合，同样利用利用SpringBoot的SPI机制从<code>spring.factories</code>配置文件中加载。因为SpringBoot启动过程中会在不同的阶段发射一些事件，所以这些加载的监听器们就是来监听SpringBoot启动过程中的一些生命周期事件的；</li>\n<li><strong>给</strong><code>**mainApplicationClass**</code><strong>属性赋值</strong>，<code>mainApplicationClass</code>属性表示包含<code>main</code>函数的类，即这里要推断哪个类调用了<code>main</code>函数，然后把这个类的全限定名赋值给<code>mainApplicationClass</code>属性，用于后面启动流程中打印一些日志，详细分析见后面的<code>第3.2小节</code>。</li>\n</ol>\n<p><a name=\"771255d4\"></a></p>\n<h3 id=\"3-1-推断项目应用类型\"><a href=\"#3-1-推断项目应用类型\" class=\"headerlink\" title=\"3.1 推断项目应用类型\"></a>3.1 推断项目应用类型</h3><p>我们接着分析构造<code>SpringApplication</code>对象的第<code>【3】</code>步<code>WebApplicationType.deduceFromClasspath();</code>这句代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// WebApplicationType.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">WebApplicationType</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 普通的应用</span>\n\tNONE<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">// Servlet类型的web应用</span>\n\tSERVLET<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\">// Reactive类型的web应用</span>\n\tREACTIVE<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> SERVLET_INDICATOR_CLASSES <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"javax.servlet.Servlet\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"org.springframework.web.context.ConfigurableWebApplicationContext\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> WEBMVC_INDICATOR_CLASS <span class=\"token operator\">=</span> <span class=\"token string\">\"org.springframework.\"</span>\n\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\"web.servlet.DispatcherServlet\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> WEBFLUX_INDICATOR_CLASS <span class=\"token operator\">=</span> <span class=\"token string\">\"org.\"</span>\n\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\"springframework.web.reactive.DispatcherHandler\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> JERSEY_INDICATOR_CLASS <span class=\"token operator\">=</span> <span class=\"token string\">\"org.glassfish.jersey.servlet.ServletContainer\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> SERVLET_APPLICATION_CONTEXT_CLASS <span class=\"token operator\">=</span> <span class=\"token string\">\"org.springframework.web.context.WebApplicationContext\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> REACTIVE_APPLICATION_CONTEXT_CLASS <span class=\"token operator\">=</span> <span class=\"token string\">\"org.springframework.boot.web.reactive.context.ReactiveWebApplicationContext\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">WebApplicationType</span> <span class=\"token function\">deduceFromClasspath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 若classpath中不存在\"org.springframework.\" + \"web.servlet.DispatcherServlet\"和\"org.glassfish.jersey.servlet.ServletContainer\"</span>\n\t\t<span class=\"token comment\">// 则返回WebApplicationType.REACTIVE，表明是reactive应用</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span>WEBFLUX_INDICATOR_CLASS<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token class-name\">ClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span>WEBMVC_INDICATOR_CLASS<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token class-name\">ClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span>JERSEY_INDICATOR_CLASS<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">WebApplicationType</span><span class=\"token punctuation\">.</span>REACTIVE<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 若&#123; \"javax.servlet.Servlet\",</span>\n\t\t<span class=\"token comment\">//       \"org.springframework.web.context.ConfigurableWebApplicationContext\" &#125;</span>\n\t\t<span class=\"token comment\">// 都不存在在classpath，则说明是不是web应用</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className <span class=\"token operator\">:</span> SERVLET_INDICATOR_CLASSES<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">ClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">WebApplicationType</span><span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 最终返回普通的web应用</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">WebApplicationType</span><span class=\"token punctuation\">.</span>SERVLET<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如上代码，根据<code>classpath</code>判断应用类型，即通过反射加载<code>classpath</code>判断指定的标志类存在与否来分别判断是<code>Reactive</code>应用，<code>Servlet</code>类型的web应用还是普通的应用。</p>\n<p><a name=\"36ac9219\"></a></p>\n<h3 id=\"3-2-推断哪个类调用了main函数\"><a href=\"#3-2-推断哪个类调用了main函数\" class=\"headerlink\" title=\"3.2 推断哪个类调用了main函数\"></a>3.2 推断哪个类调用了main函数</h3><p>我们先跳过构造<code>SpringApplication</code>对象的第<code>【4】</code>步和第<code>【5】</code>步，先来分析构造<code>SpringApplication</code>对象的第<code>【6】</code>步<code>this.mainApplicationClass = deduceMainApplicationClass();</code>这句代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">deduceMainApplicationClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 获取StackTraceElement对象数组stackTrace，StackTraceElement对象存储了调用栈相关信息（比如类名，方法名等）</span>\n\t\t<span class=\"token class-name\">StackTraceElement</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> stackTrace <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 遍历stackTrace数组</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StackTraceElement</span> stackTraceElement <span class=\"token operator\">:</span> stackTrace<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 若stackTraceElement记录的调用方法名等于main</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>stackTraceElement<span class=\"token punctuation\">.</span><span class=\"token function\">getMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// 那么就返回stackTraceElement记录的类名即包含main函数的类名</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>stackTraceElement<span class=\"token punctuation\">.</span><span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Swallow and continue</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>deduceMainApplicationClass</code>方法的主要作用就是从<code>StackTraceElement</code>调用栈数组中获取哪个类调用了<code>main</code>方法，然后再返回赋值给<code>mainApplicationClass</code>属性，然后用于后面启动流程中打印一些日志。</p>\n<p><a name=\"4d502483\"></a></p>\n<h2 id=\"4-SpringBoot的SPI机制原理解读\"><a href=\"#4-SpringBoot的SPI机制原理解读\" class=\"headerlink\" title=\"4 SpringBoot的SPI机制原理解读\"></a>4 SpringBoot的SPI机制原理解读</h2><p>由于SpringBoot的SPI机制是一个很重要的知识点，因此这里单独一小节来分析。我们都知道，SpringBoot没有使用Java的SPI机制(Java的SPI机制可以看看笔者的<a href=\"https://juejin.im/post/5e7c26a76fb9a009a441757c\">Java是如何实现自己的SPI机制的？</a>,真的是干货满满)，而是自定义实现了一套自己的SPI机制。SpringBoot利用自定义实现的SPI机制可以加载初始化器实现类，监听器实现类和自动配置类等等。如果我们要添加自动配置类或自定义监听器，那么我们很重要的一步就是在<code>spring.factories</code>中进行配置，然后才会被SpringBoot加载。</p>\n<p>好了，那么接下来我们就来重点分析下<strong>SpringBoot是如何是实现自己的SPI机制的</strong>。</p>\n<p>这里接第3小节的构造<code>SpringApplication</code>对象的第<code>【4】</code>步和第<code>【5】</code>步代码，因为第<code>【4】</code>步和第<code>【5】</code>步都是利用SpringBoot的SPI机制来加载扩展实现类，因此这里只分析第<code>【4】</code>步的<code>setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</code>这句代码，看看<code>getSpringFactoriesInstances</code>方法中SpringBoot是如何实现自己的一套SPI来加载<code>ApplicationContextInitializer</code>初始化器接口的扩展实现类的？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getSpringFactoriesInstances</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 继续调用重载的getSpringFactoriesInstances方法进行加载</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getSpringFactoriesInstances</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续跟进重载的<code>getSpringFactoriesInstances</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getSpringFactoriesInstances</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parameterTypes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 【1】获得类加载器</span>\n\t<span class=\"token class-name\">ClassLoader</span> classLoader <span class=\"token operator\">=</span> <span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// Use names and ensure unique to protect against duplicates</span>\n\t<span class=\"token comment\">// 【2】将接口类型和类加载器作为参数传入loadFactoryNames方法，从spring.factories配置文件中进行加载接口实现类</span>\n\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> names <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token class-name\">SpringFactoriesLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadFactoryNames</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> classLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【3】实例化从spring.factories中加载的接口实现类</span>\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> instances <span class=\"token operator\">=</span> <span class=\"token function\">createSpringFactoriesInstances</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> parameterTypes<span class=\"token punctuation\">,</span>\n\t\t\tclassLoader<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【4】进行排序</span>\n\t<span class=\"token class-name\">AnnotationAwareOrderComparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>instances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【5】返回加载并实例化好的接口实现类</span>\n\t<span class=\"token keyword\">return</span> instances<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，SpringBoot自定义实现的SPI机制代码中最重要的是上面代码的<code>【1】</code>,<code>【2】</code>,<code>【3】</code>步，这3步下面分别进行重点分析。</p>\n<p><a name=\"90248ffa\"></a></p>\n<h3 id=\"4-1-获得类加载器\"><a href=\"#4-1-获得类加载器\" class=\"headerlink\" title=\"4.1 获得类加载器\"></a>4.1 获得类加载器</h3><p>还记得<a href=\"https://juejin.im/post/5e7c26a76fb9a009a441757c\">Java是如何实现自己的SPI机制的？</a>这篇文章中Java的SPI机制默认是利用线程上下文类加载器去加载扩展类的，那么，<strong>SpringBoot自己实现的SPI机制又是利用哪种类加载器去加载</strong><code>**spring.factories**</code><strong>配置文件中的扩展实现类呢？</strong></p>\n<p>我们直接看第<code>【1】</code>步的<code>ClassLoader classLoader = getClassLoader();</code>这句代码，先睹为快：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ClassLoader</span> <span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 前面在构造SpringApplicaiton对象时，传入的resourceLoader参数是null，因此不会执行if语句里面的逻辑</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resourceLoader <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resourceLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 获取默认的类加载器</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续跟进<code>getDefaultClassLoader</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ClassUtils.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ClassLoader</span> <span class=\"token function\">getDefaultClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">ClassLoader</span> cl <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t        <span class=\"token comment\">// 【重点】获取线程上下文类加载器</span>\n\t\tcl <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContextClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// Cannot access thread context ClassLoader - falling back...</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 这里的逻辑不会执行</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cl <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// No thread context class loader -> use class loader of this class.</span>\n\t\tcl <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cl <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// getClassLoader() returning null indicates the bootstrap ClassLoader</span>\n\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tcl <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// Cannot access system ClassLoader - oh well, maybe the caller can live with null...</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 返回刚才获取的线程上下文类加载器</span>\n\t<span class=\"token keyword\">return</span> cl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，原来SpringBoot的SPI机制中也是用线程上下文类加载器去加载<code>spring.factories</code>文件中的扩展实现类的！</p>\n<p><a name=\"4c14c127\"></a></p>\n<h3 id=\"4-2-加载spring-factories配置文件中的SPI扩展类\"><a href=\"#4-2-加载spring-factories配置文件中的SPI扩展类\" class=\"headerlink\" title=\"4.2 加载spring.factories配置文件中的SPI扩展类\"></a>4.2 加载spring.factories配置文件中的SPI扩展类</h3><p>我们再来看下第<code>【2】</code>步中的<code>SpringFactoriesLoader.loadFactoryNames(type, classLoader)</code>这句代码是如何加载<code>spring.factories</code>配置文件中的SPI扩展类的？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringFactoriesLoader.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">loadFactoryNames</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> factoryClass<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">ClassLoader</span> classLoader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// factoryClass即SPI接口，比如ApplicationContextInitializer,EnableAutoConfiguration等接口</span>\n\t<span class=\"token class-name\">String</span> factoryClassName <span class=\"token operator\">=</span> factoryClass<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【主线，重点关注】继续调用loadSpringFactories方法加载SPI扩展类</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">loadSpringFactories</span><span class=\"token punctuation\">(</span>classLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>factoryClassName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续跟进<code>loadSpringFactories</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringFactoriesLoader.java</span>\n\n<span class=\"token comment\">/**\n * The location to look for factories.\n * &lt;p>Can be present in multiple JAR files.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> FACTORIES_RESOURCE_LOCATION <span class=\"token operator\">=</span> <span class=\"token string\">\"META-INF/spring.factories\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">loadSpringFactories</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">ClassLoader</span> classLoader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 以classLoader作为键先从缓存中取，若能取到则直接返回</span>\n\t<span class=\"token class-name\">MultiValueMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>classLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 若缓存中无记录，则去spring.factories配置文件中获取</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 这里加载所有jar包中包含\"MATF-INF/spring.factories\"文件的url路径</span>\n\t\t<span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>URL<span class=\"token punctuation\">></span></span> urls <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>classLoader <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span>\n\t\t\t\tclassLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span>FACTORIES_RESOURCE_LOCATION<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemResources</span><span class=\"token punctuation\">(</span>FACTORIES_RESOURCE_LOCATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tresult <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedMultiValueMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 遍历urls路径，将所有spring.factories文件的键值对（key:SPI接口类名 value:SPI扩展类名）</span>\n\t\t<span class=\"token comment\">// 加载放到 result集合中</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">.</span><span class=\"token function\">hasMoreElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 取出一条url</span>\n\t\t\t<span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> urls<span class=\"token punctuation\">.</span><span class=\"token function\">nextElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 将url封装到UrlResource对象中</span>\n\t\t\t<span class=\"token class-name\">UrlResource</span> resource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UrlResource</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 利用PropertiesLoaderUtils的loadProperties方法将spring.factories文件键值对内容加载进Properties对象中</span>\n\t\t\t<span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token class-name\">PropertiesLoaderUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadProperties</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 遍历刚加载的键值对properties对象</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> properties<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// 取出SPI接口名</span>\n\t\t\t\t<span class=\"token class-name\">String</span> factoryClassName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">// 遍历SPI接口名对应的实现类即SPI扩展类</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> factoryName <span class=\"token operator\">:</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">commaDelimitedListToStringArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token comment\">// SPI接口名作为key，SPI扩展类作为value放入result中</span>\n\t\t\t\t\tresult<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>factoryClassName<span class=\"token punctuation\">,</span> factoryName<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 以classLoader作为key，result作为value放入cache缓存</span>\n\t\tcache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>classLoader<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 最终返回result对象</span>\n\t\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to load factories from location [\"</span> <span class=\"token operator\">+</span>\n\t\t\t\tFACTORIES_RESOURCE_LOCATION <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如上代码，<code>loadSpringFactories</code>方法主要做的事情就是利用之前获取的线程上下文类加载器将<code>classpath</code>中的所有<code>spring.factories</code>配置文件中所有SPI接口的所有扩展实现类给加载出来，然后放入缓存中。<strong>注意</strong>，这里是一次性加载所有的SPI扩展实现类哈，所以之后根据SPI接口就直接从缓存中获取SPI扩展类了，就不用再次去<code>spring.factories</code>配置文件中获取SPI接口对应的扩展实现类了。比如之后的获取<code>ApplicationListener</code>,<code>FailureAnalyzer</code>和<code>EnableAutoConfiguration</code>接口的扩展实现类都直接从缓存中获取即可。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>思考1：</strong> 这里为啥要一次性从<code>spring.factories</code>配置文件中获取所有的扩展类放入缓存中呢？而不是每次都是根据SPI接口去<code>spring.factories</code>配置文件中获取呢？</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>思考2：</strong> 还记得之前讲的SpringBoot的自动配置源码时提到的<code>AutoConfigurationImportFilter</code>这个接口的作用吗？现在我们应该能更清楚的理解这个接口的作用了吧。</p></blockquote>\n<p>将所有的SPI扩展实现类加载出来后，此时再调用<code>getOrDefault(factoryClassName, Collections.emptyList())</code>方法根据SPI接口名去筛选当前对应的扩展实现类，比如这里传入的<code>factoryClassName</code>参数名为<code>ApplicationContextInitializer</code>接口，那么这个接口将会作为<code>key</code>从刚才缓存数据中取出<code>ApplicationContextInitializer</code>接口对应的SPI扩展实现类。其中从<code>spring.factories</code>中获取的<code>ApplicationContextInitializer</code>接口对应的所有SPI扩展实现类如下图所示：</p>\n<p><img src=\"/../assets/1641290473450-71ef2464-e4e6-4ac5-93cd-c84a165b9efd.png\" alt=\"image.png\"></p>\n<p><a name=\"00d754d7\"></a></p>\n<h3 id=\"4-3-实例化从spring-factories中加载的SPI扩展类\"><a href=\"#4-3-实例化从spring-factories中加载的SPI扩展类\" class=\"headerlink\" title=\"4.3 实例化从spring.factories中加载的SPI扩展类\"></a>4.3 实例化从spring.factories中加载的SPI扩展类</h3><p>前面从<code>spring.factories</code>中获取到<code>ApplicationContextInitializer</code>接口对应的所有SPI扩展实现类后，此时会将这些SPI扩展类进行实例化。</p>\n<p>此时我们再来看下前面的第<code>【3】</code>步的实例化代码：<br /><code>List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes, \t\t\t\tclassLoader, args, names);</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">createSpringFactoriesInstances</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parameterTypes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassLoader</span> classLoader<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> names<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 新建instances集合，用于存储稍后实例化后的SPI扩展类对象</span>\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> instances <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 遍历name集合，names集合存储了所有SPI扩展类的全限定名</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> names<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 根据全限定名利用反射加载类</span>\n\t\t\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> instanceClass <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> classLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 断言刚才加载的SPI扩展类是否属于SPI接口类型</span>\n\t\t\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignable</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> instanceClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 获得SPI扩展类的构造器</span>\n\t\t\t<span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> constructor <span class=\"token operator\">=</span> instanceClass\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span>parameterTypes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 实例化SPI扩展类</span>\n\t\t\t<span class=\"token class-name\">T</span> instance <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">instantiateClass</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 添加进instances集合</span>\n\t\t\tinstances<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token string\">\"Cannot instantiate \"</span> <span class=\"token operator\">+</span> type <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 返回</span>\n\t<span class=\"token keyword\">return</span> instances<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码很简单，主要做的事情就是实例化SPI扩展类。<br />好了，SpringBoot自定义的SPI机制就已经分析完了。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>思考3：</strong> SpringBoot为何弃用Java的SPI而自定义了一套SPI？</p></blockquote>\n<p><a name=\"71cd23f3\"></a></p>\n<h2 id=\"5-小结\"><a href=\"#5-小结\" class=\"headerlink\" title=\"5 小结\"></a>5 小结</h2><p>好了，本片就到此结束了，先将前面的知识点再总结下：</p>\n<ol>\n<li>分析了<code>SpringApplication</code>对象的构造过程；</li>\n<li>分析了SpringBoot自己实现的一套SPI机制。</li>\n</ol>\n<h1 id=\"9-SpringBoot事件监听机制\"><a href=\"#9-SpringBoot事件监听机制\" class=\"headerlink\" title=\"9 SpringBoot事件监听机制\"></a>9 SpringBoot事件监听机制</h1><p><a name=\"a6397be7\"></a></p>\n<h2 id=\"1-温故而知新-3\"><a href=\"#1-温故而知新-3\" class=\"headerlink\" title=\"1 温故而知新\"></a>1 温故而知新</h2><p>温故而知新，我们来简单回顾一下上篇的内容，上一篇我们分析了<strong>SpringApplication 对象的构建过程及 SpringBoot 自己实现的一套 SPI 机制</strong>，现将关键步骤再浓缩总结下：</p>\n<ol>\n<li><code>SpringApplication</code>对象的构造过程其实就是给<code>SpringApplication</code>类的<strong>6</strong>个成员变量赋值；</li>\n<li>SpringBoot 通过以下步骤实现自己的 SPI 机制：</li>\n</ol>\n<ul>\n<li>1)首先获取线程上下文类加载器;</li>\n<li>2)然后利用上下文类加载器从<code>spring.factories</code>配置文件中<strong>加载所有的 SPI 扩展实现类并放入缓存中</strong>;</li>\n<li>3)根据 SPI 接口从缓存中取出相应的 SPI 扩展实现类;</li>\n<li>4)实例化从缓存中取出的 SPI 扩展实现类并返回。</li>\n</ul>\n<p><a name=\"cd1f626d\"></a></p>\n<h2 id=\"2-引言-3\"><a href=\"#2-引言-3\" class=\"headerlink\" title=\"2 引言\"></a>2 引言</h2><p>在 SpringBoot 启动过程中，每个不同的启动阶段会分别广播不同的内置生命周期事件，然后相应的监听器会监听这些事件来执行一些初始化逻辑工作比如<code>ConfigFileApplicationListener</code>会监听<code>onApplicationEnvironmentPreparedEvent</code>事件来加载配置文件<code>application.properties</code>的环境变量等。</p>\n<p>因此本篇内容将来分析下 SpringBoot 的事件监听机制的源码。</p>\n<p><a name=\"10d4372d\"></a></p>\n<h2 id=\"3-SpringBoot-广播内置生命周期事件流程分析\"><a href=\"#3-SpringBoot-广播内置生命周期事件流程分析\" class=\"headerlink\" title=\"3 SpringBoot 广播内置生命周期事件流程分析\"></a>3 SpringBoot 广播内置生命周期事件流程分析</h2><p>为了探究 SpringBoot 广播内置生命周期事件流程，我们再来回顾一下 SpringBoot 的启动流程代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">StopWatch</span> stopWatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StopWatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">ConfigurableApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpringBootExceptionReporter</span><span class=\"token punctuation\">></span></span> exceptionReporters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">configureHeadlessProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【0】新建一个SpringApplicationRunListeners对象用于发射SpringBoot启动过程中的生命周期事件</span>\n\t<span class=\"token class-name\">SpringApplicationRunListeners</span> listeners <span class=\"token operator\">=</span> <span class=\"token function\">getRunListeners</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【1】》》》》》发射【ApplicationStartingEvent】事件，标志SpringApplication开始启动</span>\n\tlisteners<span class=\"token punctuation\">.</span><span class=\"token function\">starting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">ApplicationArguments</span> applicationArguments <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultApplicationArguments</span><span class=\"token punctuation\">(</span>\n\t\t\t\targs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 【2】》》》》》发射【ApplicationEnvironmentPreparedEvent】事件，此时会去加载application.properties等配置文件的环境变量，同时也有标志环境变量已经准备好的意思</span>\n\t\t<span class=\"token class-name\">ConfigurableEnvironment</span> environment <span class=\"token operator\">=</span> <span class=\"token function\">prepareEnvironment</span><span class=\"token punctuation\">(</span>listeners<span class=\"token punctuation\">,</span>\n\t\t\t\tapplicationArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">configureIgnoreBeanInfo</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Banner</span> printedBanner <span class=\"token operator\">=</span> <span class=\"token function\">printBanner</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcontext <span class=\"token operator\">=</span> <span class=\"token function\">createApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texceptionReporters <span class=\"token operator\">=</span> <span class=\"token function\">getSpringFactoriesInstances</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token class-name\">SpringBootExceptionReporter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">ConfigurableApplicationContext</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 【3】》》》》》发射【ApplicationContextInitializedEvent】事件，标志context容器被创建且已准备好</span>\n\t\t<span class=\"token comment\">// 【4】》》》》》发射【ApplicationPreparedEvent】事件，标志Context容器已经准备完成</span>\n\t\t<span class=\"token function\">prepareContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> environment<span class=\"token punctuation\">,</span> listeners<span class=\"token punctuation\">,</span> applicationArguments<span class=\"token punctuation\">,</span>\n\t\t\t\tprintedBanner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">refreshContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">afterRefresh</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> applicationArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logStartupInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">StartupInfoLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainApplicationClass<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">logStarted</span><span class=\"token punctuation\">(</span><span class=\"token function\">getApplicationLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> stopWatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 【5】》》》》》发射【ApplicationStartedEvent】事件，标志spring容器已经刷新，此时所有的bean实例都已经加载完毕</span>\n\t\tlisteners<span class=\"token punctuation\">.</span><span class=\"token function\">started</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">callRunners</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> applicationArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 【6】》》》》》发射【ApplicationFailedEvent】事件，标志SpringBoot启动失败</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">handleRunFailure</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">,</span> exceptionReporters<span class=\"token punctuation\">,</span> listeners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 【7】》》》》》发射【ApplicationReadyEvent】事件，标志SpringApplication已经正在运行即已经成功启动，可以接收服务请求了。</span>\n\t\tlisteners<span class=\"token punctuation\">.</span><span class=\"token function\">running</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">handleRunFailure</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">,</span> exceptionReporters<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到 SpringBoot 在启动过程中首先会先新建一个<code>SpringApplicationRunListeners</code>对象用于发射 SpringBoot 启动过程中的各种生命周期事件，比如发射<code>ApplicationStartingEvent</code>,<code>ApplicationEnvironmentPreparedEvent</code>和<code>ApplicationContextInitializedEvent</code>等事件，然后相应的监听器会执行一些 SpringBoot 启动过程中的初始化逻辑。那么，监听这些 SpringBoot 的生命周期事件的监听器们是何时被加载实例化的呢？还记得上篇文章在分析<code>SpringApplication</code>的构建过程吗？没错，这些执行初始化逻辑的监听器们正是在<code>SpringApplication</code>的构建过程中根据<code>ApplicationListener</code>接口去<code>spring.factories</code>配置文件中加载并实例化的。</p>\n<p><a name=\"5141660d\"></a></p>\n<h2 id=\"3-1-为广播-SpringBoot-内置生命周期事件做前期准备\"><a href=\"#3-1-为广播-SpringBoot-内置生命周期事件做前期准备\" class=\"headerlink\" title=\"3.1 为广播 SpringBoot 内置生命周期事件做前期准备\"></a>3.1 为广播 SpringBoot 内置生命周期事件做前期准备</h2><p><a name=\"fff4764a\"></a></p>\n<h3 id=\"3-1-1-加载-ApplicationListener-监听器实现类\"><a href=\"#3-1-1-加载-ApplicationListener-监听器实现类\" class=\"headerlink\" title=\"3.1.1 加载 ApplicationListener 监听器实现类\"></a>3.1.1 加载 ApplicationListener 监听器实现类</h3><p>我们再来回顾下<a href=\"https://juejin.im/post/5e82bac9518825737a314096\">SpringApplication 对象是如何构建的？ SpringBoot 源码（八）</a>一文中讲到在构建<code>SpringApplication</code>对象时的<code>setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</code>这句代码。</p>\n<p>这句代码做的事情就是从<code>spring.factories</code>中加载出<code>ApplicationListener</code>事件监听接口的 SPI 扩展实现类然后添加到<code>SpringApplication</code>对象的<code>listeners</code>集合中，用于后续监听 SpringBoot 启动过程中的事件，来执行一些初始化逻辑工作。</p>\n<p>SpringBoot 启动时的具体监听器们都实现了<code>ApplicationListener</code>接口，其在<code>spring.factories</code>部分配置如下：</p>\n<p><img src=\"/../assets/1648015968241-234b298a-e7ea-4206-ad72-9bf6f4e37e14.png\"></p>\n<p>不过在调试时，会从所有的 spring.factories 配置文件中加载监听器，最终加载了 10 个监听器。如下图：</p>\n<p><img src=\"/../assets/1648015968371-ecc97e50-1bc4-433d-b8fc-b28fda9adc0a.png\"></p>\n<p><a name=\"92a43663\"></a></p>\n<h3 id=\"3-1-2-加载-SPI-扩展类-EventPublishingRunListener\"><a href=\"#3-1-2-加载-SPI-扩展类-EventPublishingRunListener\" class=\"headerlink\" title=\"3.1.2 加载 SPI 扩展类 EventPublishingRunListener\"></a>3.1.2 加载 SPI 扩展类 EventPublishingRunListener</h3><p>前面讲到，在 SpringBoot 的启动过程中首先会先新建一个<code>SpringApplicationRunListeners</code>对象用于发射 SpringBoot 启动过程中的生命周期事件，即我们现在来看下<code>SpringApplicationRunListeners listeners = getRunListeners(args);</code>这句代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">SpringApplicationRunListeners</span> <span class=\"token function\">getRunListeners</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 构造一个由SpringApplication.class和String[].class组成的types</span>\n\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> types <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 1) 根据SpringApplicationRunListener接口去spring.factories配置文件中加载其SPI扩展实现类</span>\n\t<span class=\"token comment\">// 2) 构建一个SpringApplicationRunListeners对象并返回</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpringApplicationRunListeners</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">,</span> <span class=\"token function\">getSpringFactoriesInstances</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token class-name\">SpringApplicationRunListener</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> types<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们将重点放到<code>getSpringFactoriesInstances( SpringApplicationRunListener.class, types, this, args)</code>这句代码，<code>getSpringFactoriesInstances</code>这个方法我们已经很熟悉，在上一篇分析 SpringBoot 的 SPI 机制时已经详细分析过这个方法。可以看到 SpringBoot 此时又是根据<code>SpringApplicationRunListener</code>这个 SPI 接口去<code>spring.factories</code>中加载相应的 SPI 扩展实现类，我们直接去<code>spring.factories</code>中看看<code>SpringApplicationRunListener</code>有哪些 SPI 实现类：<br /><img src=\"/../assets/1648015968302-16e9243a-7517-417e-bd5e-e9aa59387d79.png\"></p>\n<p>由上图可以看到，<code>SpringApplicationRunListener</code>只有<code>EventPublishingRunListener</code>这个 SPI 实现类<br /><code>EventPublishingRunListener</code>这个哥们在 SpringBoot 的启动过程中尤其重要，由其在 SpringBoot 启动过程的不同阶段发射不同的 SpringBoot 的生命周期事件，<strong>即</strong><code>**SpringApplicationRunListeners**</code><strong>对象没有承担广播事件的职责，而最终是委托</strong><code>**EventPublishingRunListener**</code><strong>这个哥们来广播事件的。</strong></p>\n<p>因为从<code>spring.factories</code>中加载<code>EventPublishingRunListener</code>类后还会实例化该类，那么我们再跟进<code>EventPublishingRunListener</code>的源码，看看其是如何承担发射 SpringBoot 生命周期事件这一职责的？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// EventPublishingRunListener.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EventPublishingRunListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SpringApplicationRunListener</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SpringApplication</span> application<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * 拥有一个SimpleApplicationEventMulticaster事件广播器来广播事件\n\t */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SimpleApplicationEventMulticaster</span> initialMulticaster<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">EventPublishingRunListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringApplication</span> application<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>application <span class=\"token operator\">=</span> application<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>args <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 新建一个事件广播器SimpleApplicationEventMulticaster对象</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialMulticaster <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleApplicationEventMulticaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 遍历在构造SpringApplication对象时从spring.factories配置文件中获取的事件监听器</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> listener <span class=\"token operator\">:</span> application<span class=\"token punctuation\">.</span><span class=\"token function\">getListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// 将从spring.factories配置文件中获取的事件监听器们添加到事件广播器initialMulticaster对象的相关集合中</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialMulticaster<span class=\"token punctuation\">.</span><span class=\"token function\">addApplicationListener</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 》》》》》发射【ApplicationStartingEvent】事件</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">starting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialMulticaster<span class=\"token punctuation\">.</span><span class=\"token function\">multicastEvent</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationStartingEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 》》》》》发射【ApplicationEnvironmentPreparedEvent】事件</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">environmentPrepared</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableEnvironment</span> environment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialMulticaster<span class=\"token punctuation\">.</span><span class=\"token function\">multicastEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationEnvironmentPreparedEvent</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">,</span> environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 》》》》》发射【ApplicationContextInitializedEvent】事件</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">contextPrepared</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialMulticaster<span class=\"token punctuation\">.</span><span class=\"token function\">multicastEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationContextInitializedEvent</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 》》》》》发射【ApplicationPreparedEvent】事件</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoaded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> listener <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span><span class=\"token function\">getListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listener <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ApplicationContextAware</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContextAware</span><span class=\"token punctuation\">)</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">addApplicationListener</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialMulticaster<span class=\"token punctuation\">.</span><span class=\"token function\">multicastEvent</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationPreparedEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 》》》》》发射【ApplicationStartedEvent】事件</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">started</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationStartedEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 》》》》》发射【ApplicationReadyEvent】事件</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">running</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationReadyEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 》》》》》发射【ApplicationFailedEvent】事件</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">failed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">ApplicationFailedEvent</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationFailedEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// Listeners have been registered to the application context so we should</span>\n\t\t\t<span class=\"token comment\">// use it at this point if we can</span>\n\t\t\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// An inactive context may not have a multicaster so we use our multicaster to</span>\n\t\t\t<span class=\"token comment\">// call all of the context's listeners instead</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AbstractApplicationContext</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> listener <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractApplicationContext</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialMulticaster<span class=\"token punctuation\">.</span><span class=\"token function\">addApplicationListener</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialMulticaster<span class=\"token punctuation\">.</span><span class=\"token function\">setErrorHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LoggingErrorHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialMulticaster<span class=\"token punctuation\">.</span><span class=\"token function\">multicastEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// ...省略非关键代码</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>EventPublishingRunListener</code>类实现了<code>SpringApplicationRunListener</code>接口，<code>SpringApplicationRunListener</code>接口定义了 SpringBoot 启动时发射生命周期事件的接口方法，而<code>EventPublishingRunListener</code>类正是通过实现<code>SpringApplicationRunListener</code>接口的<code>starting</code>,<code>environmentPrepared</code>和<code>contextPrepared</code>等方法来广播 SpringBoot 不同的生命周期事件，我们直接看下<code>SpringApplicationRunListener</code>接口源码好了：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplicationRunListener.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SpringApplicationRunListener</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">starting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">environmentPrepared</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableEnvironment</span> environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">contextPrepared</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">contextLoaded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">started</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">running</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">failed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们再接着分析<code>EventPublishingRunListener</code>这个类，可以看到其有一个重要的成员属性<code>initialMulticaster</code>，该成员属性是<code>SimpleApplicationEventMulticaster</code>类对象，该类正是承担了广播 SpringBoot 启动时生命周期事件的职责,<strong>即</strong><code>**EventPublishingRunListener**</code><strong>对象没有承担广播事件的职责，而最终是委托</strong><code>**SimpleApplicationEventMulticaster**</code><strong>这个哥们来广播事件的。</strong> 从<code>EventPublishingRunListener</code>的源码中也可以看到在<code>starting</code>,<code>environmentPrepared</code>和<code>contextPrepared</code>等方法中也正是通过调用<code>SimpleApplicationEventMulticaster</code>类对象的<code>multicastEvent</code>方法来广播事件的。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>思考</strong> SpringBoot 启动过程中发射事件时事件广播者是层层委托职责的，起初由<code>SpringApplicationRunListeners</code>对象承担，然后<code>SpringApplicationRunListeners</code>对象将广播事件职责委托给<code>EventPublishingRunListener</code>对象，最终<code>EventPublishingRunListener</code>对象将广播事件的职责委托给<code>SimpleApplicationEventMulticaster</code>对象。<strong>为什么要层层委托这么做呢？</strong> 这个值得大家思考。</p></blockquote>\n<p>前面讲到从<code>spring.factories</code>中加载出<code>EventPublishingRunListener</code>类后会实例化，而实例化必然会通过<code>EventPublishingRunListener</code>的构造函数来进行实例化，因此我们接下来分析下<code>EventPublishingRunListener</code>的构造函数源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// EventPublishingRunListener.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">EventPublishingRunListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringApplication</span> application<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>application <span class=\"token operator\">=</span> application<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>args <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 新建一个事件广播器SimpleApplicationEventMulticaster对象</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialMulticaster <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleApplicationEventMulticaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 遍历在构造SpringApplication对象时从spring.factories配置文件中获取的事件监听器</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> listener <span class=\"token operator\">:</span> application<span class=\"token punctuation\">.</span><span class=\"token function\">getListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 将从spring.factories配置文件中获取的事件监听器们添加到事件广播器initialMulticaster对象的相关集合中</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialMulticaster<span class=\"token punctuation\">.</span><span class=\"token function\">addApplicationListener</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到在<code>EventPublishingRunListener</code>的构造函数中有一个<code>for</code>循环会遍历之前从<code>spring.factories</code>中加载的监听器们，然后添加到集合中缓存起来，用于以后广播各种事件时直接从这个集合中取出来即可，而不用再去<code>spring.factories</code>中加载，提高效率。</p>\n<p><a name=\"7a35eac0\"></a></p>\n<h3 id=\"3-2-广播-SpringBoot-的内置生命周期事件\"><a href=\"#3-2-广播-SpringBoot-的内置生命周期事件\" class=\"headerlink\" title=\"3.2 广播 SpringBoot 的内置生命周期事件\"></a>3.2 广播 SpringBoot 的内置生命周期事件</h3><p>从<code>spring.factories</code>配置文件中加载并实例化<code>EventPublishingRunListener</code>对象后，那么在在 SpringBoot 的启动过程中会发射一系列 SpringBoot 内置的生命周期事件，我们再来回顾下 SpringBoot 启动过程中的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplication.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">StopWatch</span> stopWatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StopWatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">ConfigurableApplicationContext</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpringBootExceptionReporter</span><span class=\"token punctuation\">></span></span> exceptionReporters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">configureHeadlessProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【0】新建一个SpringApplicationRunListeners对象用于发射SpringBoot启动过程中的生命周期事件</span>\n\t<span class=\"token class-name\">SpringApplicationRunListeners</span> listeners <span class=\"token operator\">=</span> <span class=\"token function\">getRunListeners</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 【1】》》》》》发射【ApplicationStartingEvent】事件，标志SpringApplication开始启动</span>\n\tlisteners<span class=\"token punctuation\">.</span><span class=\"token function\">starting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">ApplicationArguments</span> applicationArguments <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultApplicationArguments</span><span class=\"token punctuation\">(</span>\n\t\t\t\targs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 【2】》》》》》发射【ApplicationEnvironmentPreparedEvent】事件，此时会去加载application.properties等配置文件的环境变量，同时也有标志环境变量已经准备好的意思</span>\n\t\t<span class=\"token class-name\">ConfigurableEnvironment</span> environment <span class=\"token operator\">=</span> <span class=\"token function\">prepareEnvironment</span><span class=\"token punctuation\">(</span>listeners<span class=\"token punctuation\">,</span>\n\t\t\t\tapplicationArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">configureIgnoreBeanInfo</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Banner</span> printedBanner <span class=\"token operator\">=</span> <span class=\"token function\">printBanner</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcontext <span class=\"token operator\">=</span> <span class=\"token function\">createApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\texceptionReporters <span class=\"token operator\">=</span> <span class=\"token function\">getSpringFactoriesInstances</span><span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token class-name\">SpringBootExceptionReporter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">ConfigurableApplicationContext</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 【3】》》》》》发射【ApplicationContextInitializedEvent】事件，标志context容器被创建且已准备好</span>\n\t\t<span class=\"token comment\">// 【4】》》》》》发射【ApplicationPreparedEvent】事件，标志Context容器已经准备完成</span>\n\t\t<span class=\"token function\">prepareContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> environment<span class=\"token punctuation\">,</span> listeners<span class=\"token punctuation\">,</span> applicationArguments<span class=\"token punctuation\">,</span>\n\t\t\t\tprintedBanner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">refreshContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">afterRefresh</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> applicationArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logStartupInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">StartupInfoLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainApplicationClass<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">logStarted</span><span class=\"token punctuation\">(</span><span class=\"token function\">getApplicationLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> stopWatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">// 【5】》》》》》发射【ApplicationStartedEvent】事件，标志spring容器已经刷新，此时所有的bean实例都已经加载完毕</span>\n\t\tlisteners<span class=\"token punctuation\">.</span><span class=\"token function\">started</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">callRunners</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> applicationArguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 【6】》》》》》发射【ApplicationFailedEvent】事件，标志SpringBoot启动失败</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">handleRunFailure</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">,</span> exceptionReporters<span class=\"token punctuation\">,</span> listeners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// 【7】》》》》》发射【ApplicationReadyEvent】事件，标志SpringApplication已经正在运行即已经成功启动，可以接收服务请求了。</span>\n\t\tlisteners<span class=\"token punctuation\">.</span><span class=\"token function\">running</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">handleRunFailure</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">,</span> exceptionReporters<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到在 SpringBoot 的启动过程中总共会发射 7 种不同类型的生命周期事件，来标志 SpringBoot 的不同启动阶段，同时，这些生命周期事件的监听器们也会执行一些启动过程中的初始化逻辑，关于这些监听器的初始化逻辑将在下一篇内容中会分析。以下是 SpringBoot 启动过程中要发射的事件类型，其中<code>ApplicationFailedEvent</code>在 SpringBoot 启动过程中遇到异常才会发射：</p>\n<ol>\n<li><code>ApplicationStartingEvent</code></li>\n<li><code>ApplicationEnvironmentPreparedEvent</code></li>\n<li><code>ApplicationContextInitializedEvent</code></li>\n<li><code>ApplicationPreparedEvent</code></li>\n<li><code>ApplicationStartedEvent</code></li>\n<li><code>ApplicationFailedEvent</code></li>\n<li><code>ApplicationReadyEvent</code></li>\n</ol>\n<p>我们以<code>listeners.starting();</code>这句代码为例，看看<code>EventPublishingRunListener</code>对象发射事件的源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SpringApplicationRunListeners.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">starting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 遍历listeners集合，这里实质取出的就是刚才从spring.factories中取出的SPI实现类EventPublishingRunListener</span>\n\t<span class=\"token comment\">// 而EventPublishingRunListener对象承担了SpringBoot启动过程中负责广播不同的生命周期事件</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringApplicationRunListener</span> listener <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t        <span class=\"token comment\">// 调用EventPublishingRunListener的starting方法来广播ApplicationStartingEvent事件</span>\n\t\tlistener<span class=\"token punctuation\">.</span><span class=\"token function\">starting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续跟进<code>listener.starting();</code>的源码:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">EventPublishingRunListener</span><span class=\"token punctuation\">.</span>java\n\n<span class=\"token comment\">// 》》》》》发射【ApplicationStartingEvent】事件</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">starting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// EventPublishingRunListener对象将发布ApplicationStartingEvent这件事情委托给了initialMulticaster对象</span>\n\t<span class=\"token comment\">// 调用initialMulticaster的multicastEvent方法来发射ApplicationStartingEvent事件</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialMulticaster<span class=\"token punctuation\">.</span><span class=\"token function\">multicastEvent</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationStartingEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，<code>EventPublishingRunListener</code>对象将发布<code>ApplicationStartingEvent</code>这件事情委托给了<code>SimpleApplicationEventMulticaster</code>对象<code>initialMulticaster</code>,<br />,而<code>initialMulticaster</code>对象最终会调用其<code>multicastEvent</code>方法来发射<code>ApplicationStartingEvent</code>事件。关于<code>SimpleApplicationEventMulticaster</code>类如何广播事件，笔者已经在<a href=\"https://juejin.im/post/5e421bfc6fb9a07cd80f1354\">Spring 是如何实现事件监听机制的？ Spring 源码（二）</a>这篇文章已经详细分析，这里不再赘述。</p>\n<p>关于 SpringBoot 启动过程中发射其他生命周期事件的源码这里不再分析</p>\n<p><a name=\"e9c3e3d6\"></a></p>\n<h2 id=\"4-SpringBoot-的内置生命周期事件总结\"><a href=\"#4-SpringBoot-的内置生命周期事件总结\" class=\"headerlink\" title=\"4 SpringBoot 的内置生命周期事件总结\"></a>4 SpringBoot 的内置生命周期事件总结</h2><p>好了，前面已经分析了 SpringBoot 启动过程中要发射的各种生命周期事件，下面列一个表格总结下：</p>\n<p><img src=\"/../assets/1648015968208-996456d7-dae0-4c21-ab6a-efd7142cb698.png\"></p>\n<p><a name=\"71cd23f3\"></a></p>\n<h2 id=\"5-小结-1\"><a href=\"#5-小结-1\" class=\"headerlink\" title=\"5 小结\"></a>5 小结</h2><p>SpringBoot 启动过程中广播生命周期事件的源码分析就到此结束了，下一篇会继续介绍监听这些生命周期事件的监听器们。我们再回顾本篇内容总结下关键点：</p>\n<p>SpringBoot 启动过程中会发射 7 种类型的生命周期事件，标志不同的启动阶段，然后相应的监听器会监听这些事件来执行一些初始化逻辑工作。</p>\n<br />\n\n<h1 id=\"10-SpringBoot内置生命周期事件详解\"><a href=\"#10-SpringBoot内置生命周期事件详解\" class=\"headerlink\" title=\"10 SpringBoot内置生命周期事件详解\"></a>10 SpringBoot内置生命周期事件详解</h1><p><a name=\"a6397be7\"></a></p>\n<h2 id=\"1-温故而知新-4\"><a href=\"#1-温故而知新-4\" class=\"headerlink\" title=\"1 温故而知新\"></a>1 温故而知新</h2><p>温故而知新，我们来简单回顾一下上篇的内容，上一篇我们分析了<strong>SpringBoot 启动时广播生命周期事件的原理</strong>，现将关键步骤再浓缩总结下：</p>\n<ol>\n<li>为广播 SpringBoot 内置生命周期事件做前期准备：1）首先加载<code>ApplicationListener</code>监听器实现类；2）其次加载 SPI 扩展类<code>EventPublishingRunListener</code>。</li>\n<li>SpringBoot 启动时利用<code>EventPublishingRunListener</code>广播生命周期事件，然后<code>ApplicationListener</code>监听器实现类监听相应的生命周期事件执行一些初始化逻辑的工作。</li>\n</ol>\n<p><a name=\"cd1f626d\"></a></p>\n<h2 id=\"2-引言-4\"><a href=\"#2-引言-4\" class=\"headerlink\" title=\"2 引言\"></a>2 引言</h2><p>上篇文章的侧重点是分析了 SpringBoot 启动时广播生命周期事件的原理，此篇文章我们再来详细分析 SpringBoot 内置的 7 种生命周期事件的源码。</p>\n<p><a name=\"e92fd014\"></a></p>\n<h2 id=\"3-SpringBoot-生命周期事件源码分析\"><a href=\"#3-SpringBoot-生命周期事件源码分析\" class=\"headerlink\" title=\"3 SpringBoot 生命周期事件源码分析\"></a>3 SpringBoot 生命周期事件源码分析</h2><p>分析 SpringBoot 的生命周期事件，我们先来看一张类结构图：</p>\n<p><img src=\"/../assets/1648016004643-2d610e2b-7716-48e6-9dce-1d49be284ef0.png\"></p>\n<p>由上图可以看到事件类之间的关系：</p>\n<ol>\n<li>最顶级的父类是 JDK 的事件基类<code>EventObject</code>；</li>\n<li>然后 Spring 的事件基类<code>ApplicationEvent</code>继承了 JDK 的事件基类<code>EventObject</code>；</li>\n<li>其次 SpringBoot 的生命周期事件基类<code>SpringApplicationEvent</code>继承了 Spring 的事件基类<code>ApplicationEvent</code>；</li>\n<li>最后 SpringBoot 具体的 7 个生命周期事件类再继承了 SpringBoot 的生命周期事件基类<code>SpringApplicationEvent</code>。</li>\n</ol>\n<p><a name=\"18c30edd\"></a></p>\n<h3 id=\"3-1-JDK-的事件基类-EventObject\"><a href=\"#3-1-JDK-的事件基类-EventObject\" class=\"headerlink\" title=\"3.1 JDK 的事件基类 EventObject\"></a>3.1 JDK 的事件基类 EventObject</h3><p><code>EventObject</code>类是 JDK 的事件基类，可以说是所有 Java 事件类的基本，即所有的 Java 事件类都直接或间接继承于该类，源码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// EventObject.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EventObject</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">5516075349620653480L</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * The object on which the Event initially occurred.\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">Object</span>  source<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * Constructs a prototypical Event.\n     *\n     * @param    source    The object on which the Event initially occurred.\n     * @exception  IllegalArgumentException  if source is null.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">EventObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>source <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null source\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>source <span class=\"token operator\">=</span> source<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">/**\n     * The object on which the Event initially occurred.\n     *\n     * @return   The object on which the Event initially occurred.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">/**\n     * Returns a String representation of this EventObject.\n     *\n     * @return  A a String representation of this EventObject.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"[source=\"</span> <span class=\"token operator\">+</span> source <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>EventObject</code>类只有一个属性<code>source</code>，这个属性是用来记录最初事件是发生在哪个类，举个栗子，比如在 SpringBoot 启动过程中会发射<code>ApplicationStartingEvent</code>事件，而这个事件最初是在<code>SpringApplication</code>类中发射的，因此<code>source</code>就是<code>SpringApplication</code>对象。</p>\n<p><a name=\"f9931d4d\"></a></p>\n<h3 id=\"3-2-Spring-的事件基类-ApplicationEvent\"><a href=\"#3-2-Spring-的事件基类-ApplicationEvent\" class=\"headerlink\" title=\"3.2 Spring 的事件基类 ApplicationEvent\"></a>3.2 Spring 的事件基类 ApplicationEvent</h3><p><code>ApplicationEvent</code>继承了 DK 的事件基类<code>EventObject</code>类，是 Spring 的事件基类，被所有 Spring 的具体事件类继承，源码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ApplicationEvent.java</span>\n\n<span class=\"token comment\">/**\n * Class to be extended by all application events. Abstract as it\n * doesn't make sense for generic events to be published directly.\n *\n * @author Rod Johnson\n * @author Juergen Hoeller\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EventObject</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/** use serialVersionUID from Spring 1.2 for interoperability. */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">7099057708183571937L</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/** System time when the event happened. */</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> timestamp<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Create a new ApplicationEvent.\n\t * @param source the object on which the event initially occurred (never &#123;@code null&#125;)\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">/**\n\t * Return the system time in milliseconds when the event happened.\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>ApplicationEvent</code>有且仅有一个属性<code>timestamp</code>，该属性是用来记录事件发生的时间。</p>\n<p><a name=\"acbfc96a\"></a></p>\n<h3 id=\"3-3-SpringBoot-的事件基类-SpringApplicationEvent\"><a href=\"#3-3-SpringBoot-的事件基类-SpringApplicationEvent\" class=\"headerlink\" title=\"3.3 SpringBoot 的事件基类 SpringApplicationEvent\"></a>3.3 SpringBoot 的事件基类 SpringApplicationEvent</h3><p><code>SpringApplicationEvent</code>类继承了 Spring 的事件基类<code>ApplicationEvent</code>，是所有 SpringBoot 内置生命周期事件的父类，源码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Base class for &#123;@link ApplicationEvent&#125; related to a &#123;@link SpringApplication&#125;.\n *\n * @author Phillip Webb\n */</span>\n<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"serial\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringApplicationEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ApplicationEvent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">SpringApplicationEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringApplication</span> application<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>args <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">SpringApplication</span> <span class=\"token function\">getSpringApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">)</span> <span class=\"token function\">getSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>SpringApplicationEvent</code>有且仅有一个属性<code>args</code>，该属性就是 SpringBoot 启动时的命令行参数即标注<code>@SpringBootApplication</code>启动类中<code>main</code>函数的参数。</p>\n<p><a name=\"5ff8e17c\"></a></p>\n<h3 id=\"3-4-SpringBoot-具体的生命周期事件类\"><a href=\"#3-4-SpringBoot-具体的生命周期事件类\" class=\"headerlink\" title=\"3.4 SpringBoot 具体的生命周期事件类\"></a>3.4 SpringBoot 具体的生命周期事件类</h3><p>接下来我们再来看一下<code>SpringBoot</code>内置生命周期事件即<code>SpringApplicationEvent</code>的具体子类们。</p>\n<p><a name=\"03def913\"></a></p>\n<h4 id=\"3-4-1-ApplicationStartingEvent\"><a href=\"#3-4-1-ApplicationStartingEvent\" class=\"headerlink\" title=\"3.4.1 ApplicationStartingEvent\"></a>3.4.1 ApplicationStartingEvent</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ApplicationStartingEvent.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationStartingEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SpringApplicationEvent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ApplicationStartingEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringApplication</span> application<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>SpringBoot 开始启动时便会发布<code>ApplicationStartingEvent</code>事件，其发布时机在环境变量 Environment 或容器 ApplicationContext 创建前但在注册<code>ApplicationListener</code>具体监听器之后，标志标志<code>SpringApplication</code>开始启动。</p>\n<p><a name=\"77fb075a\"></a></p>\n<h4 id=\"3-4-2-ApplicationEnvironmentPreparedEvent\"><a href=\"#3-4-2-ApplicationEnvironmentPreparedEvent\" class=\"headerlink\" title=\"3.4.2 ApplicationEnvironmentPreparedEvent\"></a>3.4.2 ApplicationEnvironmentPreparedEvent</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ApplicationEnvironmentPreparedEvent.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationEnvironmentPreparedEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SpringApplicationEvent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ConfigurableEnvironment</span> environment<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Create a new &#123;@link ApplicationEnvironmentPreparedEvent&#125; instance.\n\t * @param application the current application\n\t * @param args the arguments the application is running with\n\t * @param environment the environment that was just created\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ApplicationEnvironmentPreparedEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringApplication</span> application<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConfigurableEnvironment</span> environment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>environment <span class=\"token operator\">=</span> environment<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">/**\n\t * Return the environment.\n\t * @return the environment\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConfigurableEnvironment</span> <span class=\"token function\">getEnvironment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>environment<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>ApplicationEnvironmentPreparedEvent</code>事件多了一个<code>environment</code>属性，我们不妨想一下，多了<code>environment</code>属性的作用是啥？ 答案就是<code>ApplicationEnvironmentPreparedEvent</code>事件的<code>environment</code>属性作用是利用事件发布订阅机制，相应监听器们可以从<code>ApplicationEnvironmentPreparedEvent</code>事件中取出<code>environment</code>变量，然后我们可以为<code>environment</code>属性增加属性值或读出<code>environment</code>变量中的值。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>举个栗子：</strong> <code>ConfigFileApplicationListener</code>监听器就是监听了<code>ApplicationEnvironmentPreparedEvent</code>事件，然后取出<code>ApplicationEnvironmentPreparedEvent</code>事件的<code>environment</code>属性，然后再为<code>environment</code>属性增加<code>application.properties</code>配置文件中的环境变量值。</p></blockquote>\n<p>当 SpringApplication 已经开始启动且环境变量<code>Environment</code>已经创建后，并且为环境变量<code>Environment</code>配置了命令行和<code>Servlet</code>等类型的环境变量后，此时会发布<code>ApplicationEnvironmentPreparedEvent</code>事件。</p>\n<p>监听<code>ApplicationEnvironmentPreparedEvent</code>事件的第一个监听器是<code>ConfigFileApplicationListener</code>，因为是<code>ConfigFileApplicationListener</code>监听器还要为环境变量<code>Environment</code>增加<code>application.properties</code>配置文件中的环境变量；此后还有一些也是监听<code>ApplicationEnvironmentPreparedEvent</code>事件的其他监听器监听到此事件时，此时可以说环境变量<code>Environment</code>几乎已经完全准备好了。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>思考：</strong> 监听同一事件的监听器们执行监听逻辑时是有顺序的，我们可以想一下这个排序逻辑是什么时候排序的？还有为什么要这样排序呢？</p></blockquote>\n<p><a name=\"08933110\"></a></p>\n<h4 id=\"3-4-3-ApplicationContextInitializedEvent\"><a href=\"#3-4-3-ApplicationContextInitializedEvent\" class=\"headerlink\" title=\"3.4.3 ApplicationContextInitializedEvent\"></a>3.4.3 ApplicationContextInitializedEvent</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ApplicationContextInitializedEvent.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationContextInitializedEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SpringApplicationEvent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Create a new &#123;@link ApplicationContextInitializedEvent&#125; instance.\n\t * @param application the current application\n\t * @param args the arguments the application is running with\n\t * @param context the context that has been initialized\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ApplicationContextInitializedEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringApplication</span> application<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">/**\n\t * Return the application context.\n\t * @return the context\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> <span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>ApplicationContextInitializedEvent</code>事件多了个<code>ConfigurableApplicationContext</code>类型的<code>context</code>属性，<code>context</code>属性的作用同样是为了相应监听器可以拿到这个<code>context</code>属性执行一些逻辑，具体作用将在<code>3.4.4</code>详述。</p>\n<p><code>ApplicationContextInitializedEvent</code>事件在<code>ApplicationContext</code>容器创建后，且为<code>ApplicationContext</code>容器设置了<code>environment</code>变量和执行了<code>ApplicationContextInitializers</code>的初始化方法后但在 bean 定义加载前触发，标志 ApplicationContext 已经初始化完毕。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>扩展：</strong> 可以看到<code>ApplicationContextInitializedEvent</code>是在为<code>context</code>容器配置<code>environment</code>变量后触发，此时<code>ApplicationContextInitializedEvent</code>等事件只要有<code>context</code>容器的话，那么其他需要<code>environment</code>环境变量的监听器只需要从<code>context</code>中取出<code>environment</code>变量即可，从而<code>ApplicationContextInitializedEvent</code>等事件没必要再配置<code>environment</code>属性。</p></blockquote>\n<p><a name=\"d49d45a8\"></a></p>\n<h4 id=\"3-4-4-ApplicationPreparedEvent\"><a href=\"#3-4-4-ApplicationPreparedEvent\" class=\"headerlink\" title=\"3.4.4 ApplicationPreparedEvent\"></a>3.4.4 ApplicationPreparedEvent</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ApplicationPreparedEvent.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationPreparedEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SpringApplicationEvent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Create a new &#123;@link ApplicationPreparedEvent&#125; instance.\n\t * @param application the current application\n\t * @param args the arguments the application is running with\n\t * @param context the ApplicationContext about to be refreshed\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ApplicationPreparedEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringApplication</span> application<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">/**\n\t * Return the application context.\n\t * @return the context\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> <span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同样可以看到<code>ApplicationPreparedEvent</code>事件多了个<code>ConfigurableApplicationContext</code>类型的<code>context</code>属性，多了<code>context</code>属性的作用是能让监听该事件的监听器们能拿到<code>context</code>属性，监听器拿到<code>context</code>属性一般有如下作用：</p>\n<ol>\n<li>从事件中取出<code>context</code>属性，然后可以增加一些后置处理器，比如<code>ConfigFileApplicationListener</code>监听器监听到<code>ApplicationPreparedEvent</code>事件后，然后取出<code>context</code>变量，通过<code>context</code>变量增加了<code>PropertySourceOrderingPostProcessor</code>这个后置处理器；</li>\n<li>通过<code>context</code>属性取出<code>beanFactory</code>容器，然后注册一些<code>bean</code>，比如<code>LoggingApplicationListener</code>监听器通过<code>ApplicationPreparedEvent</code>事件的<code>context</code>属性取出<code>beanFactory</code>容器,然后注册了<code>springBootLoggingSystem</code>这个单例<code>bean</code>；</li>\n<li>通过<code>context</code>属性取出<code>Environment</code>环境变量，然后就可以操作环境变量，比如<code>PropertiesMigrationListener</code>。</li>\n</ol>\n<p><code>ApplicationPreparedEvent</code>事件在<code>ApplicationContext</code>容器已经完全准备好时但在容器刷新前触发，在这个阶段<code>bean</code>定义已经加载完毕还有<code>environment</code>已经准备好可以用了。</p>\n<p><a name=\"4d11cb0d\"></a></p>\n<h4 id=\"3-4-5-ApplicationStartedEvent\"><a href=\"#3-4-5-ApplicationStartedEvent\" class=\"headerlink\" title=\"3.4.5 ApplicationStartedEvent\"></a>3.4.5 ApplicationStartedEvent</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ApplicationStartedEvent.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationStartedEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SpringApplicationEvent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Create a new &#123;@link ApplicationStartedEvent&#125; instance.\n\t * @param application the current application\n\t * @param args the arguments the application is running with\n\t * @param context the context that was being created\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ApplicationStartedEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringApplication</span> application<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">/**\n\t * Return the application context.\n\t * @return the context\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> <span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>ApplicationStartedEvent</code>事件将在容器刷新后但<code>ApplicationRunner</code>和<code>CommandLineRunner</code>的<code>run</code>方法执行前触发，标志<code>Spring</code>容器已经刷新，此时容器已经准备完毕了。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>扩展：</strong> 这里提到了<code>ApplicationRunner</code>和<code>CommandLineRunner</code>接口有啥作用呢？我们一般会在<code>Spring</code>容器刷新完毕后，此时可能有一些系统参数等静态数据需要加载，此时我们就可以实现了<code>ApplicationRunner</code>或<code>CommandLineRunner</code>接口来实现静态数据的加载。</p></blockquote>\n<p><a name=\"11f1af81\"></a></p>\n<h4 id=\"3-4-6-ApplicationReadyEvent\"><a href=\"#3-4-6-ApplicationReadyEvent\" class=\"headerlink\" title=\"3.4.6 ApplicationReadyEvent\"></a>3.4.6 ApplicationReadyEvent</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ApplicationReadyEvent.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationReadyEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SpringApplicationEvent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Create a new &#123;@link ApplicationReadyEvent&#125; instance.\n\t * @param application the current application\n\t * @param args the arguments the application is running with\n\t * @param context the context that was being created\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ApplicationReadyEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringApplication</span> application<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">/**\n\t * Return the application context.\n\t * @return the context\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> <span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>ApplicationReadyEvent</code>事件在调用完<code>ApplicationRunner</code>和<code>CommandLineRunner</code>的<code>run</code>方法后触发，此时标志<code>SpringApplication</code>已经正在运行。</p>\n<p><a name=\"dbcabccc\"></a></p>\n<h4 id=\"3-4-7-ApplicationFailedEvent\"><a href=\"#3-4-7-ApplicationFailedEvent\" class=\"headerlink\" title=\"3.4.7 ApplicationFailedEvent\"></a>3.4.7 ApplicationFailedEvent</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ApplicationFailedEvent.java</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationFailedEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SpringApplicationEvent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Throwable</span> exception<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Create a new &#123;@link ApplicationFailedEvent&#125; instance.\n\t * @param application the current application\n\t * @param args the arguments the application was running with\n\t * @param context the context that was being created (maybe null)\n\t * @param exception the exception that caused the error\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ApplicationFailedEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringApplication</span> application<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">ConfigurableApplicationContext</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exception <span class=\"token operator\">=</span> exception<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">/**\n\t * Return the application context.\n\t * @return the context\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ConfigurableApplicationContext</span> <span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">/**\n\t * Return the exception that caused the failure.\n\t * @return the exception\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Throwable</span> <span class=\"token function\">getException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到<code>ApplicationFailedEvent</code>事件除了多了一个<code>context</code>属性外，还多了一个<code>Throwable</code>类型的<code>exception</code>属性用来记录 SpringBoot 启动失败时的异常。</p>\n<p><code>ApplicationFailedEvent</code>事件在 SpringBoot 启动失败时触发，标志 SpringBoot 启动失败。</p>\n<p><a name=\"4d6c09c0\"></a></p>\n<h2 id=\"4-小结\"><a href=\"#4-小结\" class=\"headerlink\" title=\"4 小结\"></a>4 小结</h2><p>此篇文章相对简单，对 SpringBoot 内置的 7 种生命周期事件进行了详细分析。我们还是引用上篇文章的一张图来回顾一下这些生命周期事件及其用途：</p>\n<p><img src=\"/../assets/1648016003883-b79334cb-c1e5-4f90-9baa-9100b24f177d.png\"></p>\n","feature":true,"text":"1 如何搭建SpringBoot源码调试环境1 前言这是 SpringBoot2.1 源码分析专题的第一篇文章，主要讲如何来搭建我们的源码阅读调试环境。如果有经验的小伙伴们可以略过此篇文章。 2 环境安装要求 IntelliJ IDEA JDK1.8 Maven3.5 以上 3 ...","link":"","photos":[],"count_time":{"symbolsCount":"161k","symbolsTime":"2:26"},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"},{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/tags/SpringBoot.json"},{"name":"源码分析","slug":"源码分析","count":1,"path":"api/tags/源码分析.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BASpringBoot%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">1 如何搭建SpringBoot源码调试环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">1 前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">2 环境安装要求</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E4%BB%8E-Github-%E4%B8%8A%E5%B0%86-SpringBoot-%E6%BA%90%E7%A0%81%E9%A1%B9%E7%9B%AE%E4%B8%8B%E8%BD%BD%E4%B8%8B%E6%9D%A5\"><span class=\"toc-text\">3 从 Github 上将 SpringBoot 源码项目下载下来</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%B0%86-SpringBoot-%E6%BA%90%E7%A0%81%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E5%88%B0-IDEA-%E4%B8%AD\"><span class=\"toc-text\">4 将 SpringBoot 源码项目导入到 IDEA 中</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA-SpringBoot-%E6%BA%90%E7%A0%81%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">5 编译构建 SpringBoot 源码项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E8%BF%90%E8%A1%8C-SpringBoot-%E8%87%AA%E5%B8%A6%E7%9A%84-sample\"><span class=\"toc-text\">6 运行 SpringBoot 自带的 sample</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E5%8A%A8%E6%89%8B%E5%AE%9E%E8%B7%B5%E7%8E%AF%E8%8A%82\"><span class=\"toc-text\">7 动手实践环节</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90SpringBoot%E6%BA%90%E7%A0%81%E6%A8%A1%E5%9D%97%E5%8F%8A%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2 如何分析SpringBoot源码模块及结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E8%A8%80-1\"><span class=\"toc-text\">1 前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-SpringBoot%E6%BA%90%E7%A0%81%E6%A8%A1%E5%9D%97%E4%B8%80%E8%A7%88\"><span class=\"toc-text\">2 SpringBoot源码模块一览</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-spring-boot-project%E6%BA%90%E7%A0%81%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">3 spring-boot-project源码模块详解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E7%94%A8%E4%B8%80%E4%B8%AA%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E6%9D%A5%E6%80%BB%E7%BB%93%E4%B8%8BSpringBoot%E6%BA%90%E7%A0%81%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%84%89%E7%BB%9C\"><span class=\"toc-text\">4 用一个思维导图来总结下SpringBoot源码项目的脉络</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-SpringBoot%E6%A8%A1%E5%9D%97%E4%B9%8B%E9%97%B4%E7%9A%84pom%E5%85%B3%E7%B3%BB%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">5 SpringBoot模块之间的pom关系详解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">6 小结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%9A%84%E6%9D%A1%E4%BB%B6%E6%B3%A8%E8%A7%A3%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">3 SpringBoot自动配置的条件注解原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E8%A8%80-2\"><span class=\"toc-text\">1 前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-SpringBoot-%E7%9A%84%E6%B4%BE%E7%94%9F%E6%9D%A1%E4%BB%B6%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">2 SpringBoot 的派生条件注解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-Condition-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">3 Condition 接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-Condition-%E6%8E%A5%E5%8F%A3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">3.1 Condition 接口源码分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-Spring-%E7%9A%84%E5%86%85%E7%BD%AE-Condition-%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%B1%BB\"><span class=\"toc-text\">3.2 Spring 的内置 Condition 接口实现类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-SpringBootCondition-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">4 SpringBootCondition 源码解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-OnResourceCondition-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">4.1 OnResourceCondition 源码分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-OnBeanCondition-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">4.2 OnBeanCondition 源码分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-OnWebApplicationCondition\"><span class=\"toc-text\">4.3 OnWebApplicationCondition</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">4.4 其他</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%A6%82%E4%BD%95%E6%89%A9%E5%B1%95-SpringBootCondition\"><span class=\"toc-text\">5 如何扩展 SpringBootCondition</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-SpringBoot%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">4 SpringBoot是如何实现自动配置的？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E8%A8%80-3\"><span class=\"toc-text\">1 前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-SpringBootApplication-%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">2 @SpringBootApplication 注解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%A6%82%E4%BD%95%E5%8E%BB%E6%89%BE-SpringBoot-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91%E7%9A%84%E5%85%A5%E5%8F%A3%E6%96%B9%E6%B3%95%EF%BC%9F\"><span class=\"toc-text\">3 如何去找 SpringBoot 自动配置实现逻辑的入口方法？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%88%86%E6%9E%90-SpringBoot-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">4 分析 SpringBoot 自动配置原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E5%88%86%E6%9E%90%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%9A%84%E4%B8%BB%E8%A6%81%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">4.1 分析自动配置的主要逻辑</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E6%9C%89%E9%80%89%E6%8B%A9%E7%9A%84%E5%AF%BC%E5%85%A5%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">4.2 有选择的导入自动配置类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-AutoConfigurationImportFilter\"><span class=\"toc-text\">5 AutoConfigurationImportFilter</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-OnClassCondition\"><span class=\"toc-text\">5.1 OnClassCondition</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-1-createOutcomesResolver\"><span class=\"toc-text\">5.1.1 createOutcomesResolver</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-2-new-StandardOutcomesResolver\"><span class=\"toc-text\">5.1.2 new StandardOutcomesResolver</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-3-StandardOutcomesResolver-resolveOutcomes-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">5.1.3 StandardOutcomesResolver.resolveOutcomes 方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-4-ThreadedOutcomesResolver-resolveOutcomes-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">5.1.4 ThreadedOutcomesResolver.resolveOutcomes 方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-OnBeanCondition-%E5%92%8C-OnWebApplicationCondition\"><span class=\"toc-text\">5.2 OnBeanCondition 和 OnWebApplicationCondition</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-AutoConfigurationImportListener\"><span class=\"toc-text\">6 AutoConfigurationImportListener</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-AutoConfigurationPackages\"><span class=\"toc-text\">7 AutoConfigurationPackages</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">8 小结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-SpringBoot%E7%9A%84%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%80%BC%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">5 SpringBoot的配置属性值是如何绑定的？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E8%A8%80-4\"><span class=\"toc-text\">1 前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-EnableConfigurationProperties\"><span class=\"toc-text\">2 @EnableConfigurationProperties</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-EnableConfigurationPropertiesImportSelector\"><span class=\"toc-text\">3 EnableConfigurationPropertiesImportSelector</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-ConfigurationPropertiesBeanRegistrar\"><span class=\"toc-text\">4 ConfigurationPropertiesBeanRegistrar</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-ConfigurationPropertiesBindingPostProcessorRegistrar\"><span class=\"toc-text\">5 ConfigurationPropertiesBindingPostProcessorRegistrar</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-ConfigurationBeanFactoryMetadata\"><span class=\"toc-text\">6 ConfigurationBeanFactoryMetadata</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-ConfigurationPropertiesBindingPostProcessor\"><span class=\"toc-text\">7 ConfigurationPropertiesBindingPostProcessor</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-%E5%9C%A8%E6%89%A7%E8%A1%8C%E5%A4%96%E9%83%A8%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A%E9%80%BB%E8%BE%91%E5%89%8D%E5%85%88%E5%87%86%E5%A4%87%E5%A5%BD%E7%9B%B8%E5%85%B3%E5%85%83%E6%95%B0%E6%8D%AE%E5%92%8C%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A%E5%99%A8\"><span class=\"toc-text\">7.1 在执行外部属性绑定逻辑前先准备好相关元数据和配置属性绑定器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2-%E6%89%A7%E8%A1%8C%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%A4%96%E9%83%A8%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A%E9%80%BB%E8%BE%91%E3%80%90%E4%B8%BB%E7%BA%BF%E3%80%91\"><span class=\"toc-text\">7.2 执行真正的外部属性绑定逻辑【主线】</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-ConfigurationPropertiesBinder\"><span class=\"toc-text\">8 ConfigurationPropertiesBinder</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1-%E8%8E%B7%E5%8F%96-BindHandler-%E5%AF%B9%E8%B1%A1%E4%BB%A5%E4%BE%BF%E5%9C%A8%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A%E6%97%B6%E6%9D%A5%E5%A4%84%E7%90%86%E4%B8%80%E4%BA%9B%E9%99%84%E4%BB%B6%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">8.1 获取 BindHandler 对象以便在属性绑定时来处理一些附件逻辑</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-%E8%8E%B7%E5%8F%96-Binder-%E5%AF%B9%E8%B1%A1%E7%94%A8%E4%BA%8E%E8%BF%9B%E8%A1%8C%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A%E3%80%90%E4%B8%BB%E7%BA%BF%E3%80%91\"><span class=\"toc-text\">8.2 获取 Binder 对象用于进行属性绑定【主线】</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">9 小结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-SpringBoot%E5%86%85%E7%BD%AE%E7%9A%84%E5%90%84%E7%A7%8DStarter%E6%98%AF%E6%80%8E%E6%A0%B7%E6%9E%84%E5%BB%BA%E7%9A%84\"><span class=\"toc-text\">6 SpringBoot内置的各种Starter是怎样构建的</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%B8%A9%E6%95%85%E8%80%8C%E7%9F%A5%E6%96%B0\"><span class=\"toc-text\">1 温故而知新</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">2 引言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-Maven%E4%BC%A0%E9%80%92%E4%BE%9D%E8%B5%96%E7%9A%84optional%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">3 Maven传递依赖的optional标签</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-SpringBoot%E5%86%85%E7%BD%AE%E7%9A%84%E5%90%84%E7%A7%8DStarter%E6%98%AF%E6%80%8E%E6%A0%B7%E6%9E%84%E5%BB%BA%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">4 SpringBoot内置的各种Starter是怎样构建的？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E6%A8%A1%E4%BB%BFSpringBoot%E5%8C%85%E7%BB%93%E6%9E%84%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AAStarter\"><span class=\"toc-text\">5 模仿SpringBoot包结构自定义一个Starter</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E5%B0%8F%E7%BB%93-1\"><span class=\"toc-text\">6 小结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-SpringBoot%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">7 SpringBoot的启动流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%B8%A9%E6%95%85%E8%80%8C%E7%9F%A5%E6%96%B0-1\"><span class=\"toc-text\">1 温故而知新</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%BC%95%E8%A8%80-1\"><span class=\"toc-text\">2 引言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AASpringBoot%E5%90%AF%E5%8A%A8%E7%B1%BB\"><span class=\"toc-text\">3 如何编写一个SpringBoot启动类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-SpringBootApplication\"><span class=\"toc-text\">4 @SpringBootApplication</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-SpringBoot%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">5 SpringBoot的启动流程是怎样的？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E5%B0%8F%E7%BB%93-2\"><span class=\"toc-text\">6 小结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8-SpringApplication%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">8 SpringApplication对象是如何构建的？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%B8%A9%E6%95%85%E8%80%8C%E7%9F%A5%E6%96%B0-2\"><span class=\"toc-text\">1 温故而知新</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%BC%95%E8%A8%80-2\"><span class=\"toc-text\">2 引言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-SpringApplication%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">3 SpringApplication对象的构建过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E6%8E%A8%E6%96%AD%E9%A1%B9%E7%9B%AE%E5%BA%94%E7%94%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.1 推断项目应用类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E6%8E%A8%E6%96%AD%E5%93%AA%E4%B8%AA%E7%B1%BB%E8%B0%83%E7%94%A8%E4%BA%86main%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.2 推断哪个类调用了main函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-SpringBoot%E7%9A%84SPI%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E8%A7%A3%E8%AF%BB\"><span class=\"toc-text\">4 SpringBoot的SPI机制原理解读</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E8%8E%B7%E5%BE%97%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8\"><span class=\"toc-text\">4.1 获得类加载器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-%E5%8A%A0%E8%BD%BDspring-factories%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84SPI%E6%89%A9%E5%B1%95%E7%B1%BB\"><span class=\"toc-text\">4.2 加载spring.factories配置文件中的SPI扩展类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E5%AE%9E%E4%BE%8B%E5%8C%96%E4%BB%8Espring-factories%E4%B8%AD%E5%8A%A0%E8%BD%BD%E7%9A%84SPI%E6%89%A9%E5%B1%95%E7%B1%BB\"><span class=\"toc-text\">4.3 实例化从spring.factories中加载的SPI扩展类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">5 小结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#9-SpringBoot%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">9 SpringBoot事件监听机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%B8%A9%E6%95%85%E8%80%8C%E7%9F%A5%E6%96%B0-3\"><span class=\"toc-text\">1 温故而知新</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%BC%95%E8%A8%80-3\"><span class=\"toc-text\">2 引言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-SpringBoot-%E5%B9%BF%E6%92%AD%E5%86%85%E7%BD%AE%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">3 SpringBoot 广播内置生命周期事件流程分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E4%B8%BA%E5%B9%BF%E6%92%AD-SpringBoot-%E5%86%85%E7%BD%AE%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BA%8B%E4%BB%B6%E5%81%9A%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87\"><span class=\"toc-text\">3.1 为广播 SpringBoot 内置生命周期事件做前期准备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-1-%E5%8A%A0%E8%BD%BD-ApplicationListener-%E7%9B%91%E5%90%AC%E5%99%A8%E5%AE%9E%E7%8E%B0%E7%B1%BB\"><span class=\"toc-text\">3.1.1 加载 ApplicationListener 监听器实现类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-2-%E5%8A%A0%E8%BD%BD-SPI-%E6%89%A9%E5%B1%95%E7%B1%BB-EventPublishingRunListener\"><span class=\"toc-text\">3.1.2 加载 SPI 扩展类 EventPublishingRunListener</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E5%B9%BF%E6%92%AD-SpringBoot-%E7%9A%84%E5%86%85%E7%BD%AE%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">3.2 广播 SpringBoot 的内置生命周期事件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-SpringBoot-%E7%9A%84%E5%86%85%E7%BD%AE%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">4 SpringBoot 的内置生命周期事件总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%B0%8F%E7%BB%93-1\"><span class=\"toc-text\">5 小结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#10-SpringBoot%E5%86%85%E7%BD%AE%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BA%8B%E4%BB%B6%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">10 SpringBoot内置生命周期事件详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%B8%A9%E6%95%85%E8%80%8C%E7%9F%A5%E6%96%B0-4\"><span class=\"toc-text\">1 温故而知新</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%BC%95%E8%A8%80-4\"><span class=\"toc-text\">2 引言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-SpringBoot-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BA%8B%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">3 SpringBoot 生命周期事件源码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-JDK-%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%B1%BB-EventObject\"><span class=\"toc-text\">3.1 JDK 的事件基类 EventObject</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-Spring-%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%B1%BB-ApplicationEvent\"><span class=\"toc-text\">3.2 Spring 的事件基类 ApplicationEvent</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-SpringBoot-%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%9F%BA%E7%B1%BB-SpringApplicationEvent\"><span class=\"toc-text\">3.3 SpringBoot 的事件基类 SpringApplicationEvent</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-SpringBoot-%E5%85%B7%E4%BD%93%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BA%8B%E4%BB%B6%E7%B1%BB\"><span class=\"toc-text\">3.4 SpringBoot 具体的生命周期事件类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-1-ApplicationStartingEvent\"><span class=\"toc-text\">3.4.1 ApplicationStartingEvent</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-2-ApplicationEnvironmentPreparedEvent\"><span class=\"toc-text\">3.4.2 ApplicationEnvironmentPreparedEvent</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-3-ApplicationContextInitializedEvent\"><span class=\"toc-text\">3.4.3 ApplicationContextInitializedEvent</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-4-ApplicationPreparedEvent\"><span class=\"toc-text\">3.4.4 ApplicationPreparedEvent</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-5-ApplicationStartedEvent\"><span class=\"toc-text\">3.4.5 ApplicationStartedEvent</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-6-ApplicationReadyEvent\"><span class=\"toc-text\">3.4.6 ApplicationReadyEvent</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-7-ApplicationFailedEvent\"><span class=\"toc-text\">3.4.7 ApplicationFailedEvent</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">4 小结</span></a></li></ol></li></ol>","author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Netty源码分析","uid":"f63fd983001a548ddde94851f2bab33a","slug":"Netty源码分析","date":"2022-06-11T08:38:37.855Z","updated":"2022-06-11T08:39:39.149Z","comments":true,"path":"api/articles/Netty源码分析.json","keywords":null,"cover":[],"text":"本文将介绍 Netty，Java 平台上使用最广泛的 NIO 包，它是对 JDK 中的 NIO 实现的一层封装，让我们能更方便地开发 NIO 程序。其实，Netty 不仅仅是 NIO 吧，但是，基本上大家都冲着 NIO 来的。 本文只介绍 TCP 相关的内容，Netty 对于其他...","link":"","photos":[],"count_time":{"symbolsCount":"66k","symbolsTime":"1:01"},"categories":[{"name":"源码","slug":"源码","count":2,"path":"api/categories/源码.json"}],"tags":[{"name":"java","slug":"java","count":11,"path":"api/tags/java.json"},{"name":"源码","slug":"源码","count":2,"path":"api/tags/源码.json"},{"name":"Netty","slug":"Netty","count":1,"path":"api/tags/Netty.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}