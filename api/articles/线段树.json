{"title":"线段树","uid":"a448dfd8ebb4408d1633f0dff8411f1c","slug":"线段树","date":"2022-06-11T13:28:51.895Z","updated":"2022-06-11T13:29:56.762Z","comments":true,"path":"api/articles/线段树.json","keywords":null,"cover":[],"content":"<p><a href=\"https://leetcode-cn.com/problems/range-sum-query-mutable/\">leetcode</a><br /><img src=\"/../assets/1649037153349-cf3c2580-8f2a-461f-a120-4ef965c69249.png\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NumArray</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            start <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n            end <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">></span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">TreeNode</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            res<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            res<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>start<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            res<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">+</span> res<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">NumArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        root <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>start <span class=\"token operator\">==</span> root<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            root<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>end <span class=\"token operator\">-</span> root<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            root<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">+</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>start <span class=\"token operator\">==</span> i<span class=\"token operator\">&amp;&amp;</span>root<span class=\"token punctuation\">.</span>end <span class=\"token operator\">==</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>end <span class=\"token operator\">-</span> root<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;=</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">>=</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sumRange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * obj.update(index,val);\n * int param_2 = obj.sumRange(left,right);\n */</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"leetcode class NumArray &#123; class TreeNode&#123; int sum; int start,end; TreeNode left,right; public TreeNode(int s,int e)&#123; left = n...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"toc":"","author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"字典树(前缀树)","uid":"781fb484634f3be0f1bf39d2ec5d0535","slug":"字典树","date":"2022-06-11T13:28:51.903Z","updated":"2022-06-11T13:32:00.060Z","comments":true,"path":"api/articles/字典树.json","keywords":null,"cover":[],"text":"1 class Solution &#123; public int findKthNumber(int n, int k) &#123; int ans = 1; while(k>1)&#123; int count = dfs(ans,n); //求出子树的数量和K比较，若大...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"实现LRU","uid":"c4317418140da87757f2c4ade40f3f4c","slug":"LRU缓存","date":"2022-06-11T13:26:26.264Z","updated":"2022-06-11T13:29:56.770Z","comments":true,"path":"api/articles/LRU缓存.json","keywords":null,"cover":[],"text":"实际上底层维护双向链表和哈希表，将新查询的数据或插入的数据移动到链表头，若再插入数据时容量不足则从链表尾部删除 class LRUCache &#123; Map&lt;Integer, Node> map; DoubleLinkedList cache; int capacit...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":8,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":8,"path":"api/tags/算法.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}