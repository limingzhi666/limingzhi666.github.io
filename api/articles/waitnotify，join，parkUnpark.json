{"title":"wait/notify，join，park/Unpark","uid":"489d7b6b150f5087fe22abf19dc56ce1","slug":"waitnotify，join，parkUnpark","date":"2022-06-11T13:10:26.016Z","updated":"2022-06-11T13:11:09.285Z","comments":true,"path":"api/articles/waitnotify，join，parkUnpark.json","keywords":null,"cover":[],"content":"<h1 id=\"wait-x2F-notify，join，park-x2F-Unpark\"><a href=\"#wait-x2F-notify，join，park-x2F-Unpark\" class=\"headerlink\" title=\"wait&#x2F;notify，join，park&#x2F;Unpark\"></a>wait&#x2F;notify，join，park&#x2F;Unpark</h1><h4 id=\"wait-x2F-notify的原理：\"><a href=\"#wait-x2F-notify的原理：\" class=\"headerlink\" title=\"wait&#x2F;notify的原理：\"></a>wait&#x2F;notify的原理：</h4><p><img src=\"/../assets/1647331795065-bb60219f-3485-4a8e-99ae-824be13890de.png\" alt=\"1646831765857.png\"></p>\n<p>1.Owner发现线程条件不满足，调用wait方法，即可进入WaitSet变为WAITING状态</p>\n<p>2.BLOCKED和WAITING的线程都处于阻塞状态，不占用CPU时间片</p>\n<p>3.BLOCKED线程会在Owner线程释放锁时唤醒</p>\n<p>4.WAITING线程会在Owner线程调用notify或notifyAll时唤醒，但唤醒后并不意味着立即所得锁，仍需要进入EntryList重新竞争</p>\n<hr>\n<p><a name=\"cb180bba\"></a></p>\n<h4 id=\"API介绍：\"><a href=\"#API介绍：\" class=\"headerlink\" title=\"API介绍：\"></a>API介绍：</h4><p>1.obj.wait()：让进入object监视器的线程到waitSet等待</p>\n<p>2.obj.wait(long timeout)：让进入object监视器的线程到waitSet等待，属性值为最长等待时间</p>\n<p>3.obj.notify()：让object上正在waitSet等待的线程中挑一个唤醒</p>\n<p>4.obj.notifyAll()：让Object上正在waitSet等待的线程全部唤醒</p>\n<p>它们都是线程之间进行写作的手段，都是Object对象的方法，必须获得此对象的锁才能调用方法</p>\n<hr>\n<p><a name=\"874e24cc\"></a></p>\n<h4 id=\"wait和notify的正确使用：\"><a href=\"#wait和notify的正确使用：\" class=\"headerlink\" title=\"wait和notify的正确使用：\"></a>wait和notify的正确使用：</h4><p><a name=\"80412369\"></a></p>\n<h5 id=\"1-sleep-long-n-和wait-long-n-的区别：\"><a href=\"#1-sleep-long-n-和wait-long-n-的区别：\" class=\"headerlink\" title=\"1.sleep(long n)和wait(long n)的区别：\"></a>1.sleep(long n)和wait(long n)的区别：</h5><p>①：sleep是Thread的方法，而wait是Object的方法</p>\n<p>②：sleep不需要强制和synchronized配合使用，但是wait需要和synchronized一起使用</p>\n<p>③：sleep在睡眠的同时，不会释放对象锁，但是wait在等待的时候会释放对象锁</p>\n<p>④：它们的状态都会变为TIMED_WAITING</p>\n<p><a name=\"a4a1b929\"></a></p>\n<h5 id=\"join原理\"><a href=\"#join原理\" class=\"headerlink\" title=\"join原理:\"></a>join原理:</h5><p>join的底层使用到了保护性暂停的设计模式</p>\n<p>源码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> millis<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token comment\">//记录最初时间</span>\n        <span class=\"token keyword\">long</span> base <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token comment\">//记录已经经历的时间</span>\n        <span class=\"token keyword\">long</span> now <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//传入的时间小于0，抛异常</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>millis <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout value is negative\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token comment\">//等于0就是一直等待，调用wait(0)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>millis <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//delay表示传入的参数减去已经经历的时间，小于0就结束</span>\n                <span class=\"token keyword\">long</span> delay <span class=\"token operator\">=</span> millis <span class=\"token operator\">-</span> now<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delay <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">//将delay设置为参数，防止唤醒错误的问题</span>\n                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \t\t<span class=\"token comment\">//判断已经经历的时间</span>\n                now <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> base<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a name=\"cac303b7\"></a></p>\n<h5 id=\"保护性暂停的设计模式：\"><a href=\"#保护性暂停的设计模式：\" class=\"headerlink\" title=\"保护性暂停的设计模式：\"></a>保护性暂停的设计模式：</h5><p><img src=\"/../assets/1647331810242-9f0548f3-ba30-4441-8044-dcd8710fca2b.png\" alt=\"1646895418198.png\"></p>\n<p><a name=\"8565e3f7\"></a></p>\n<h4 id=\"park、Unpark\"><a href=\"#park、Unpark\" class=\"headerlink\" title=\"park、Unpark\"></a>park、Unpark</h4><p>1.基本使用：</p>\n<p>它们是LockSupport类中的方法</p>\n<p>LockSupport.park()； &#x2F;&#x2F;暂停当前线程</p>\n<p>LockSupport.unpark(暂停线程对象);   &#x2F;&#x2F;恢复某个线程的运行</p>\n<p><strong>注意：</strong></p>\n<p>unpark可以在一个线程调用park方法之前使用，等该线程调用park方法后会立即恢复运行</p>\n<p><a name=\"18699fe1\"></a></p>\n<h5 id=\"与wait和notify比较\"><a href=\"#与wait和notify比较\" class=\"headerlink\" title=\"与wait和notify比较\"></a>与wait和notify比较</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">1.wait,notify和notifyAll 必须配合Object Monitor一起使用(即先获取到对象锁)，而unpark不用\n\n2.park和unpark是以线程为单位来阻塞和唤醒线程，而notify只能随机唤醒一个等待的线程\n\n3.park和unpark可以先unpark，但是wait和notify不能先notify<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a name=\"400a1262\"></a></p>\n<h4 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><p>每个线程都有自己的一个Parker对象(底层有C实现)，由三部分组成 _counter _cond _nutex</p>\n<p>线程就像一个旅行者，Parker就像它随身携带的背包，条件变量就像背包中的帐篷，_counter就像背包中的备用粮食(0为耗尽，1为充足)</p>\n<p>调用park就是要看是否需要休息</p>\n<p>​\t如果备用粮食充足则不需要休息</p>\n<p>​\t如果备用粮食耗尽就需要休息</p>\n<p>调用unpark就好比让备用粮食处于充足状态</p>\n<p>​\t如果此时线程在休息，就唤醒它</p>\n<p>​\t如果此时线程正在运行，那么它下次调用park方法，仅消耗掉备用粮食，不需要休息</p>\n<p>​\t因为背包空间有限，多次调用unpark仅仅会补充一份备用粮食<img src=\"/../assets/1647331819670-bcb401e7-40e9-42db-a917-35c159694434.png\" alt=\"1646898990954.png\"></p>\n","text":"wait&#x2F;notify，join，park&#x2F;Unparkwait&#x2F;notify的原理： 1.Owner发现线程条件不满足，调用wait方法，即可进入WaitSet变为WAITING状态 2.BLOCKED和WAITING的线程都处于阻塞状态，不占用C...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":11,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#wait-x2F-notify%EF%BC%8Cjoin%EF%BC%8Cpark-x2F-Unpark\"><span class=\"toc-text\">wait&#x2F;notify，join，park&#x2F;Unpark</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#wait-x2F-notify%E7%9A%84%E5%8E%9F%E7%90%86%EF%BC%9A\"><span class=\"toc-text\">wait&#x2F;notify的原理：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#API%E4%BB%8B%E7%BB%8D%EF%BC%9A\"><span class=\"toc-text\">API介绍：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#wait%E5%92%8Cnotify%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%EF%BC%9A\"><span class=\"toc-text\">wait和notify的正确使用：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-sleep-long-n-%E5%92%8Cwait-long-n-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A\"><span class=\"toc-text\">1.sleep(long n)和wait(long n)的区别：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#join%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">join原理:</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E6%8A%A4%E6%80%A7%E6%9A%82%E5%81%9C%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">保护性暂停的设计模式：</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#park%E3%80%81Unpark\"><span class=\"toc-text\">park、Unpark</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%8Ewait%E5%92%8Cnotify%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">与wait和notify比较</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%EF%BC%9A\"><span class=\"toc-text\">原理：</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"java内存模型(JMM)","uid":"8719a59ea15091ad0c2facf954842244","slug":"java内存模型(JMM)","date":"2022-06-11T13:15:23.102Z","updated":"2022-06-11T13:21:17.770Z","comments":true,"path":"api/articles/java内存模型(JMM).json","keywords":null,"cover":[],"text":"java内存模型(JMM)java内存模型：JMM即java Memory Model，它定义了内存、工作内存抽象概念、底层对CPU寄存器、缓存、硬件内存、CPU指令优化等 JMM体现在以下几个方面：​ 1.原子性：保证指令不会受到线程上下文切换的影响 ​ 2.可见性：保证指令不...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":11,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ReentrantLock原理","uid":"de5cee1035d10664a305cb1a74a3c58a","slug":"ReentrantLock","date":"2022-06-11T13:07:20.302Z","updated":"2022-06-11T13:21:17.762Z","comments":true,"path":"api/articles/ReentrantLock.json","keywords":null,"cover":[],"text":" ReentrantLock原理： 1.非公平锁的实现原理： 加锁解锁流程：先从构造器来看，默认为非公平锁实现 public ReentrantLock() &#123; sync = new NonfairSync(); &#125; NonfairSync 继承自 AQS 没...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":11,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}