{"title":"ReentrantLock","uid":"773d445206bebbe9cb9076bdec61ca0a","slug":"ReentrantLock","date":"2022-06-11T13:07:20.302Z","updated":"2022-06-11T13:07:54.473Z","comments":true,"path":"api/articles/ReentrantLock.json","keywords":null,"cover":null,"content":"<p><a name=\"ReentrantLock\"></a></p>\n<h4 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h4><p><a name=\"51dca132\"></a></p>\n<h6 id=\"相对于synchronized的特点\"><a href=\"#相对于synchronized的特点\" class=\"headerlink\" title=\"相对于synchronized的特点\"></a>相对于synchronized的特点</h6><pre><code>1.可中断\n\n2.可以设置超时时间\n\n3.可以设置为公平锁\t(防止线程饥饿)\n\n4.支持多个条件变量\n\n5.与synchronized一样，都支持可重入\n</code></pre>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取锁</span>\nreentrantLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 临界区</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 释放锁</span>\n reentrantLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a name=\"29d170fa\"></a></p>\n<h5 id=\"可重入：\"><a href=\"#可重入：\" class=\"headerlink\" title=\"可重入：\"></a>可重入：</h5><p>可重入是指同一个线程如果首次获得了这把锁，那么因为它是这把锁的拥有者，因此有权利再次获得这把锁，</p>\n<p>如果是不可重入锁，那么第二次获得锁时，自己也会被锁挡住</p>\n<p><a name=\"f916b41c\"></a></p>\n<h5 id=\"可打断：\"><a href=\"#可打断：\" class=\"headerlink\" title=\"可打断：\"></a>可打断：</h5><p>在等待锁的过程中，其他线程使用interrupt方法打断。则获取锁的类型为</p>\n<p>reentrantLock.lockInterruptibly</p>\n<p><a name=\"03ef4555\"></a></p>\n<h5 id=\"锁超时：\"><a href=\"#锁超时：\" class=\"headerlink\" title=\"锁超时：\"></a>锁超时：</h5><p>tryLock()—-尝试获得锁——参数可以为时间和单位，在指定时间之内获取不到锁就放弃</p>\n<p>该方法同样可以被打断</p>\n<p><a name=\"4e6d1f7e\"></a></p>\n<h5 id=\"公平锁：（一般情况下没有必要，会降低并发度）\"><a href=\"#公平锁：（一般情况下没有必要，会降低并发度）\" class=\"headerlink\" title=\"公平锁：（一般情况下没有必要，会降低并发度）\"></a>公平锁：（一般情况下没有必要，会降低并发度）</h5><p>ReentrantLock默认是不公平的（随机获取而不是按照进入阻塞队列的顺序来获取锁资源）</p>\n<p><a name=\"400efa16\"></a></p>\n<h5 id=\"条件变量：\"><a href=\"#条件变量：\" class=\"headerlink\" title=\"条件变量：\"></a>条件变量：</h5><p>synchronized 中也有条件变量，就是我们讲原理时那个 waitSet 休息室，当条件不满足时进入 waitSet 等待</p>\n<p>ReentrantLock 的条件变量比 synchronized 强大之处在于，它是支持多个条件变量的，这就好比</p>\n<pre><code>synchronized 是那些不满足条件的线程都在一间休息室等消息\n\n而 ReentrantLock 支持多间休息室，有专门等烟的休息室、专门等早餐的休息室、唤醒时也是按休息室来唤醒\n</code></pre>\n<p>使用newCondition()方法来创建多个休息室</p>\n<p>使用要点：</p>\n<pre><code>await 前需要获得锁\n\nawait 执行后，会释放锁，进入 conditionObject 等待\n\nawait 的线程被唤醒（或打断、或超时）取重新竞争 lock 锁\n\n竞争 lock 锁成功后，从 await 后继续执行\n</code></pre>\n<p><a name=\"335c9505\"></a></p>\n<h6 id=\"await相当于wait，signal相当于notify\"><a href=\"#await相当于wait，signal相当于notify\" class=\"headerlink\" title=\"await相当于wait，signal相当于notify\"></a>await相当于wait，signal相当于notify</h6><hr>\n<p><a name=\"qIbUC\"></a></p>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><p>由于ReentrantLock是java.util.concurrent包下提供的一套互斥锁，相比Synchronized，ReentrantLock类提供了一些高级功能，主要有以下3项：<br><a name=\"ziGwo\"></a></p>\n<h1 id=\"1-等待可中断\"><a href=\"#1-等待可中断\" class=\"headerlink\" title=\"1.等待可中断\"></a>1.等待可中断</h1><p>持有锁的线程长期不释放的时候，正在等待的线程可以选择放弃等待，这相当于Synchronized来说可以避免出现死锁的情况。通过lock.lockInterruptibly()来实现这个机制。<br><a name=\"Cd8bn\"></a></p>\n<h1 id=\"2-公平锁\"><a href=\"#2-公平锁\" class=\"headerlink\" title=\"2.公平锁\"></a>2.公平锁</h1><p>多个线程等待同一个锁时，必须按照申请锁的时间顺序获得锁，Synchronized锁非公平锁，ReentrantLock默认的构造函数是创建的非公平锁，可以通过参数true设为公平锁，但公平锁表现的性能不是很好。</p>\n<p><a name=\"PsSrZ\"></a></p>\n<h2 id=\"公平锁、非公平锁的创建方式：\"><a href=\"#公平锁、非公平锁的创建方式：\" class=\"headerlink\" title=\"公平锁、非公平锁的创建方式：\"></a>公平锁、非公平锁的创建方式：</h2><p>创建一个非公平锁，默认是非公平锁Lock lock &#x3D; new ReentrantLock();Lock lock &#x3D; new ReentrantLock(false); <br />创建一个公平锁，构造传参trueLock lock &#x3D; new ReentrantLock(true);<br><a name=\"eCTqT\"></a></p>\n<h1 id=\"3-锁绑定多个条件\"><a href=\"#3-锁绑定多个条件\" class=\"headerlink\" title=\"3.锁绑定多个条件\"></a>3.锁绑定多个条件</h1><p>一个ReentrantLock对象可以同时绑定对个对象。ReenTrantLock提供了一个Condition（条件）类，用来实现分组唤醒需要唤醒的线程们，而不是像synchronized要么随机唤醒一个线程要么唤醒全部线程。<br /><a href=\"https://blog.csdn.net/qq_40551367/article/details/89414446/\"><br /></a></p>\n","text":" ReentrantLock 相对于synchronized的特点1.可中断 2.可以设置超时时间 3.可以设置为公平锁 (防止线程饥饿) 4.支持多个条件变量 5.与synchronized一样，都支持可重入 // 获取锁 reentrantLock.lock(); try &...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"JUC","slug":"JUC","count":6,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":6,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":9,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":6,"path":"api/tags/多线程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ReentrantLock\"><span class=\"toc-text\">ReentrantLock</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%AF%B9%E4%BA%8Esynchronized%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">相对于synchronized的特点</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E9%87%8D%E5%85%A5%EF%BC%9A\"><span class=\"toc-text\">可重入：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E6%89%93%E6%96%AD%EF%BC%9A\"><span class=\"toc-text\">可打断：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%94%81%E8%B6%85%E6%97%B6%EF%BC%9A\"><span class=\"toc-text\">锁超时：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%AC%E5%B9%B3%E9%94%81%EF%BC%9A%EF%BC%88%E4%B8%80%E8%88%AC%E6%83%85%E5%86%B5%E4%B8%8B%E6%B2%A1%E6%9C%89%E5%BF%85%E8%A6%81%EF%BC%8C%E4%BC%9A%E9%99%8D%E4%BD%8E%E5%B9%B6%E5%8F%91%E5%BA%A6%EF%BC%89\"><span class=\"toc-text\">公平锁：（一般情况下没有必要，会降低并发度）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F%EF%BC%9A\"><span class=\"toc-text\">条件变量：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#await%E7%9B%B8%E5%BD%93%E4%BA%8Ewait%EF%BC%8Csignal%E7%9B%B8%E5%BD%93%E4%BA%8Enotify\"><span class=\"toc-text\">await相当于wait，signal相当于notify</span></a></li></ol></li></ol></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">补充</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E7%AD%89%E5%BE%85%E5%8F%AF%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">1.等待可中断</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%85%AC%E5%B9%B3%E9%94%81\"><span class=\"toc-text\">2.公平锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AC%E5%B9%B3%E9%94%81%E3%80%81%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81%E7%9A%84%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">公平锁、非公平锁的创建方式：</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E9%94%81%E7%BB%91%E5%AE%9A%E5%A4%9A%E4%B8%AA%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">3.锁绑定多个条件</span></a>","author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"wait/notify，join，park/Unpark","uid":"489d7b6b150f5087fe22abf19dc56ce1","slug":"waitnotify，join，parkUnpark","date":"2022-06-11T13:10:26.016Z","updated":"2022-06-11T13:11:09.285Z","comments":true,"path":"api/articles/waitnotify，join，parkUnpark.json","keywords":null,"cover":[],"text":"wait&#x2F;notify，join，park&#x2F;Unparkwait&#x2F;notify的原理： 1.Owner发现线程条件不满足，调用wait方法，即可进入WaitSet变为WAITING状态 2.BLOCKED和WAITING的线程都处于阻塞状态，不占用C...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"JUC","slug":"JUC","count":6,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":6,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":9,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":6,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"synchronized关键字","uid":"e1b3118af0455ea0158a80d4d6b7a3a6","slug":"synchronized关键字","date":"2022-06-11T12:58:01.936Z","updated":"2022-06-11T12:58:35.833Z","comments":true,"path":"api/articles/synchronized关键字.json","keywords":null,"cover":[],"text":" synchronized 解决方案 互斥为了避免临界区的竞态条件发生，有多种手段可以达到目的。 阻塞式的解决方案：synchronized，Lock 非阻塞式的解决方案：原子变量 synchronized，来解决上述问题，即俗称的【对象锁】，它采用互斥的方式让同一时刻至多只有一...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"JUC","slug":"JUC","count":6,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":6,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":9,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":6,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}