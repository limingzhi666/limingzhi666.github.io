{"title":"java内存模型(JMM)","uid":"8719a59ea15091ad0c2facf954842244","slug":"java内存模型(JMM)","date":"2022-06-11T13:15:23.102Z","updated":"2022-06-11T13:21:17.770Z","comments":true,"path":"api/articles/java内存模型(JMM).json","keywords":null,"cover":[],"content":"<h1 id=\"java内存模型-JMM\"><a href=\"#java内存模型-JMM\" class=\"headerlink\" title=\"java内存模型(JMM)\"></a>java内存模型(JMM)</h1><h3 id=\"java内存模型：\"><a href=\"#java内存模型：\" class=\"headerlink\" title=\"java内存模型：\"></a>java内存模型：</h3><p>JMM即java Memory Model，它定义了内存、工作内存抽象概念、底层对CPU寄存器、缓存、硬件内存、CPU指令优化等</p>\n<h3 id=\"JMM体现在以下几个方面：\"><a href=\"#JMM体现在以下几个方面：\" class=\"headerlink\" title=\"JMM体现在以下几个方面：\"></a>JMM体现在以下几个方面：</h3><p>​\t1.原子性：保证指令不会受到线程上下文切换的影响</p>\n<p>​\t2.可见性：保证指令不会受到CPU缓存的影响</p>\n<p>​\t3.有序性：保证指令不会受到CPU指令并行优化的影响</p>\n<p><a name=\"3cb34db1\"></a></p>\n<h4 id=\"可见性：\"><a href=\"#可见性：\" class=\"headerlink\" title=\"可见性：\"></a>可见性：</h4><p>存在的问题：</p>\n<p>main 线程对 run 变量的修改对于 t 线程不可见，导致了 t 线程无法停止：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> run <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// ....</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n run <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 线程t不会如预想的停下来</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>程序不会停止</p>\n<p>1.初始状态， t 线程刚开始从主内存读取了 run 的值到工作内存</p>\n<p><img src=\"/../assets/1647331900435-631024d3-9564-4fb7-bdee-64acc3020a10.png\" alt=\"1646913001483.png\"></p>\n<p>2.因为 t 线程要频繁从主内存中读取 run 的值，JIT 编译器会将 run 的值缓存至自己工作内存中的高速缓存中，</p>\n<p>减少对主存中 run 的访问，提高效率</p>\n<p><img src=\"/../assets/1647331928282-54e91620-e6a5-4930-8e78-8e80c01b9743.png\" alt=\"1646913048388.png\"></p>\n<p>3.1 秒之后，main 线程修改了 run 的值，并同步至主存，而 t 是从自己工作内存中的高速缓存中读取这个变量</p>\n<p>的值，结果永远是旧值</p>\n<p><img src=\"/../assets/1647331932803-90120356-824a-49f6-b084-e950480464d2.png\" alt=\"1646913067772.png\"></p>\n<p><a name=\"9252c8c0\"></a></p>\n<h5 id=\"解决：\"><a href=\"#解决：\" class=\"headerlink\" title=\"解决：\"></a>解决：</h5><p><a name=\"1af0e665\"></a></p>\n<h6 id=\"添加volatile修饰符：（只能保证可见性，不能保证原子性）\"><a href=\"#添加volatile修饰符：（只能保证可见性，不能保证原子性）\" class=\"headerlink\" title=\"添加volatile修饰符：（只能保证可见性，不能保证原子性）\"></a>添加volatile修饰符：（只能保证可见性，不能保证原子性）</h6><p><strong>注意：</strong></p>\n<p>想要保证原子性还需要使用synchronized或者ReentrantLock</p>\n<p>synchronized也可以保证可见性，但是性能比较低，底层依赖于monitar</p>\n<p>它可以用来修饰成员变量和静态成员变量</p>\n<p>他可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作 volatile 变量都是直接操作主存</p>\n<hr>\n<p><a name=\"5dba3f2f\"></a></p>\n<h4 id=\"有序性：\"><a href=\"#有序性：\" class=\"headerlink\" title=\"有序性：\"></a>有序性：</h4><p>JVM会在不影响正确性的前提下，可以调整语句的执行顺序</p>\n<p>重排序可能导致程序的运行结果与预期结果不一致</p>\n<p>使用volatile可以禁止掉重排序</p>\n<p><a name=\"8416e4d3\"></a></p>\n<h3 id=\"volatile原理\"><a href=\"#volatile原理\" class=\"headerlink\" title=\"volatile原理\"></a>volatile原理</h3><p>volatile的底层实现原理是内存屏障，Memory Barrier（Memory Fence）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">对volatile变量的写指令后会加入写屏障\n\n对volatile变量的读指令之前会加入读屏障<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><a name=\"2ce3f186\"></a></p>\n<h4 id=\"1-如何保证可见性：\"><a href=\"#1-如何保证可见性：\" class=\"headerlink\" title=\"1.如何保证可见性：\"></a>1.如何保证可见性：</h4><p>写屏障(sfence)保证在该屏障之前的，对共享变量的改动，都同步到主存当中，而不是使用缓存中的数据</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">actor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">I_Result</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    num <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    ready <span class=\"token operator\">=</span> ture<span class=\"token punctuation\">;</span> <span class=\"token comment\">//ready 是volatile赋值带写屏障</span>\n    <span class=\"token comment\">//写屏障</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>读屏障(ifence)保证在该屏障之后，对共享变量的读取，加载的是主存中最新数据，而不是使用缓存中的数据</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">actor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">I_Result</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//读屏障</span>\n    <span class=\"token comment\">//ready 是volatile读取值带读屏障</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ready<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        r<span class=\"token punctuation\">,</span>r1 <span class=\"token operator\">=</span> num <span class=\"token operator\">+</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        r<span class=\"token punctuation\">.</span>r1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../assets/1647331943300-3386f50d-3884-43ce-95f3-7924165a3dd9.png\" alt=\"1646917373979.png\"></p>\n<hr>\n<p><a name=\"2bb4aa6a\"></a></p>\n<h5 id=\"2-如何保证有序性：\"><a href=\"#2-如何保证有序性：\" class=\"headerlink\" title=\"2.如何保证有序性：\"></a>2.如何保证有序性：</h5><p>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后</p>\n<p>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前</p>\n<p><a name=\"e0309fb5\"></a></p>\n<h3 id=\"happens-before规则：\"><a href=\"#happens-before规则：\" class=\"headerlink\" title=\"happens-before规则：\"></a>happens-before规则：</h3><p>happens-before规定了对共享变量的写操作对其他线程的读操作可见，它是可见性与有序性的一套规则总结，抛开以下happens-before规则，JMM并不能保证一个线程对共享变量的写，对于其他线程对该共享变量的读可见</p>\n<p><a name=\"4a2530c2\"></a></p>\n<h6 id=\"1-线程解锁m之前对变量的写，对于接下来对m加锁的其他线程对该变量的读可见\"><a href=\"#1-线程解锁m之前对变量的写，对于接下来对m加锁的其他线程对该变量的读可见\" class=\"headerlink\" title=\"1.线程解锁m之前对变量的写，对于接下来对m加锁的其他线程对该变量的读可见\"></a>1.线程解锁m之前对变量的写，对于接下来对m加锁的其他线程对该变量的读可见</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a name=\"783ef4dc\"></a></p>\n<h6 id=\"2-线程对volatile变量的写，对接下来其他线程对该变量的读可见\"><a href=\"#2-线程对volatile变量的写，对接下来其他线程对该变量的读可见\" class=\"headerlink\" title=\"2.线程对volatile变量的写，对接下来其他线程对该变量的读可见\"></a>2.线程对volatile变量的写，对接下来其他线程对该变量的读可见</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n \tx <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a name=\"8a78dfa2\"></a></p>\n<h6 id=\"3-线程start前对变量的写，对该线程开启后对该变量的读可见\"><a href=\"#3-线程start前对变量的写，对该线程开启后对该变量的读可见\" class=\"headerlink\" title=\"3.线程start前对变量的写，对该线程开启后对该变量的读可见\"></a>3.线程start前对变量的写，对该线程开启后对该变量的读可见</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a name=\"705ab845\"></a></p>\n<h6 id=\"4-线程结束前对变量的写，对其它线程得知它结束后的读可见（比如其他线程调用isAlive或join等待它结束）\"><a href=\"#4-线程结束前对变量的写，对其它线程得知它结束后的读可见（比如其他线程调用isAlive或join等待它结束）\" class=\"headerlink\" title=\"4.线程结束前对变量的写，对其它线程得知它结束后的读可见（比如其他线程调用isAlive或join等待它结束）\"></a>4.线程结束前对变量的写，对其它线程得知它结束后的读可见（比如其他线程调用isAlive或join等待它结束）</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n \tx <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nt1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a name=\"5023914b\"></a></p>\n<h6 id=\"5-线程t1打断t2前对变量的写，对于其他线程得知t2被打断后对变量的读可见\"><a href=\"#5-线程t1打断t2前对变量的写，对于其他线程得知t2被打断后对变量的读可见\" class=\"headerlink\" title=\"5.线程t1打断t2前对变量的写，对于其他线程得知t2被打断后对变量的读可见\"></a>5.线程t1打断t2前对变量的写，对于其他线程得知t2被打断后对变量的读可见</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \n <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n \t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n \t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n \t\t<span class=\"token punctuation\">&#125;</span>\n \t<span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n \t<span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \tx <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n \tt2<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t2<span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n \t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a name=\"8f09a861\"></a></p>\n<h6 id=\"6-对变量默认值-0，false，null-的写操作，对其他线程对该变量的读可见\"><a href=\"#6-对变量默认值-0，false，null-的写操作，对其他线程对该变量的读可见\" class=\"headerlink\" title=\"6.对变量默认值(0，false，null)的写操作，对其他线程对该变量的读可见\"></a>6.对变量默认值(0，false，null)的写操作，对其他线程对该变量的读可见</h6><p><a name=\"d8a6aea2\"></a></p>\n<h6 id=\"7-具有传递性\"><a href=\"#7-具有传递性\" class=\"headerlink\" title=\"7.具有传递性\"></a>7.具有传递性</h6><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n \ty <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n \tx <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n \t<span class=\"token comment\">// x=20 对 t2 可见, 同时 y=10 也对 t2 可见</span>\n \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"java内存模型(JMM)java内存模型：JMM即java Memory Model，它定义了内存、工作内存抽象概念、底层对CPU寄存器、缓存、硬件内存、CPU指令优化等 JMM体现在以下几个方面：​ 1.原子性：保证指令不会受到线程上下文切换的影响 ​ 2.可见性：保证指令不...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":11,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-JMM\"><span class=\"toc-text\">java内存模型(JMM)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%EF%BC%9A\"><span class=\"toc-text\">java内存模型：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JMM%E4%BD%93%E7%8E%B0%E5%9C%A8%E4%BB%A5%E4%B8%8B%E5%87%A0%E4%B8%AA%E6%96%B9%E9%9D%A2%EF%BC%9A\"><span class=\"toc-text\">JMM体现在以下几个方面：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E8%A7%81%E6%80%A7%EF%BC%9A\"><span class=\"toc-text\">可见性：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%EF%BC%9A\"><span class=\"toc-text\">解决：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0volatile%E4%BF%AE%E9%A5%B0%E7%AC%A6%EF%BC%9A%EF%BC%88%E5%8F%AA%E8%83%BD%E4%BF%9D%E8%AF%81%E5%8F%AF%E8%A7%81%E6%80%A7%EF%BC%8C%E4%B8%8D%E8%83%BD%E4%BF%9D%E8%AF%81%E5%8E%9F%E5%AD%90%E6%80%A7%EF%BC%89\"><span class=\"toc-text\">添加volatile修饰符：（只能保证可见性，不能保证原子性）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%BA%8F%E6%80%A7%EF%BC%9A\"><span class=\"toc-text\">有序性：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#volatile%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">volatile原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%8F%AF%E8%A7%81%E6%80%A7%EF%BC%9A\"><span class=\"toc-text\">1.如何保证可见性：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9C%89%E5%BA%8F%E6%80%A7%EF%BC%9A\"><span class=\"toc-text\">2.如何保证有序性：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#happens-before%E8%A7%84%E5%88%99%EF%BC%9A\"><span class=\"toc-text\">happens-before规则：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#1-%E7%BA%BF%E7%A8%8B%E8%A7%A3%E9%94%81m%E4%B9%8B%E5%89%8D%E5%AF%B9%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%99%EF%BC%8C%E5%AF%B9%E4%BA%8E%E6%8E%A5%E4%B8%8B%E6%9D%A5%E5%AF%B9m%E5%8A%A0%E9%94%81%E7%9A%84%E5%85%B6%E4%BB%96%E7%BA%BF%E7%A8%8B%E5%AF%B9%E8%AF%A5%E5%8F%98%E9%87%8F%E7%9A%84%E8%AF%BB%E5%8F%AF%E8%A7%81\"><span class=\"toc-text\">1.线程解锁m之前对变量的写，对于接下来对m加锁的其他线程对该变量的读可见</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#2-%E7%BA%BF%E7%A8%8B%E5%AF%B9volatile%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%99%EF%BC%8C%E5%AF%B9%E6%8E%A5%E4%B8%8B%E6%9D%A5%E5%85%B6%E4%BB%96%E7%BA%BF%E7%A8%8B%E5%AF%B9%E8%AF%A5%E5%8F%98%E9%87%8F%E7%9A%84%E8%AF%BB%E5%8F%AF%E8%A7%81\"><span class=\"toc-text\">2.线程对volatile变量的写，对接下来其他线程对该变量的读可见</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#3-%E7%BA%BF%E7%A8%8Bstart%E5%89%8D%E5%AF%B9%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%99%EF%BC%8C%E5%AF%B9%E8%AF%A5%E7%BA%BF%E7%A8%8B%E5%BC%80%E5%90%AF%E5%90%8E%E5%AF%B9%E8%AF%A5%E5%8F%98%E9%87%8F%E7%9A%84%E8%AF%BB%E5%8F%AF%E8%A7%81\"><span class=\"toc-text\">3.线程start前对变量的写，对该线程开启后对该变量的读可见</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#4-%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9D%9F%E5%89%8D%E5%AF%B9%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%99%EF%BC%8C%E5%AF%B9%E5%85%B6%E5%AE%83%E7%BA%BF%E7%A8%8B%E5%BE%97%E7%9F%A5%E5%AE%83%E7%BB%93%E6%9D%9F%E5%90%8E%E7%9A%84%E8%AF%BB%E5%8F%AF%E8%A7%81%EF%BC%88%E6%AF%94%E5%A6%82%E5%85%B6%E4%BB%96%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8isAlive%E6%88%96join%E7%AD%89%E5%BE%85%E5%AE%83%E7%BB%93%E6%9D%9F%EF%BC%89\"><span class=\"toc-text\">4.线程结束前对变量的写，对其它线程得知它结束后的读可见（比如其他线程调用isAlive或join等待它结束）</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-%E7%BA%BF%E7%A8%8Bt1%E6%89%93%E6%96%ADt2%E5%89%8D%E5%AF%B9%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%99%EF%BC%8C%E5%AF%B9%E4%BA%8E%E5%85%B6%E4%BB%96%E7%BA%BF%E7%A8%8B%E5%BE%97%E7%9F%A5t2%E8%A2%AB%E6%89%93%E6%96%AD%E5%90%8E%E5%AF%B9%E5%8F%98%E9%87%8F%E7%9A%84%E8%AF%BB%E5%8F%AF%E8%A7%81\"><span class=\"toc-text\">5.线程t1打断t2前对变量的写，对于其他线程得知t2被打断后对变量的读可见</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#6-%E5%AF%B9%E5%8F%98%E9%87%8F%E9%BB%98%E8%AE%A4%E5%80%BC-0%EF%BC%8Cfalse%EF%BC%8Cnull-%E7%9A%84%E5%86%99%E6%93%8D%E4%BD%9C%EF%BC%8C%E5%AF%B9%E5%85%B6%E4%BB%96%E7%BA%BF%E7%A8%8B%E5%AF%B9%E8%AF%A5%E5%8F%98%E9%87%8F%E7%9A%84%E8%AF%BB%E5%8F%AF%E8%A7%81\"><span class=\"toc-text\">6.对变量默认值(0，false，null)的写操作，对其他线程对该变量的读可见</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#7-%E5%85%B7%E6%9C%89%E4%BC%A0%E9%80%92%E6%80%A7\"><span class=\"toc-text\">7.具有传递性</span></a></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CAS","uid":"779600de7239585350eddc687c9afdbb","slug":"CAS","date":"2022-06-11T13:20:41.435Z","updated":"2022-06-11T13:21:17.762Z","comments":true,"path":"api/articles/CAS.json","keywords":null,"cover":null,"text":"CAS与volatileCAS — compareAndSet()，内部实现了原子性（） public void withdraw(Integer amount) &#123; // 需要不断尝试，直到成功为止 while (true) &#123; // 比如拿到了旧值 100...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":11,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"wait/notify，join，park/Unpark","uid":"489d7b6b150f5087fe22abf19dc56ce1","slug":"waitnotify，join，parkUnpark","date":"2022-06-11T13:10:26.016Z","updated":"2022-06-11T13:11:09.285Z","comments":true,"path":"api/articles/waitnotify，join，parkUnpark.json","keywords":null,"cover":[],"text":"wait&#x2F;notify，join，park&#x2F;Unparkwait&#x2F;notify的原理： 1.Owner发现线程条件不满足，调用wait方法，即可进入WaitSet变为WAITING状态 2.BLOCKED和WAITING的线程都处于阻塞状态，不占用C...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"JUC","slug":"JUC","count":7,"path":"api/categories/JUC.json"}],"tags":[{"name":"JUC","slug":"JUC","count":7,"path":"api/tags/JUC.json"},{"name":"java","slug":"java","count":11,"path":"api/tags/java.json"},{"name":"多线程","slug":"多线程","count":7,"path":"api/tags/多线程.json"}],"author":{"name":"小李不在_","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"<b>Welcome</b> <br />  <b>qq：3163678221</b><br />  <b>河北工程大学</b>","socials":{"github":"https://github.com/limingzhi666","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}